(function() {
    (function() {
        (function() {
            this.Turbolinks = {
                supported: function() {
                    return null != window.history.pushState && null != window.requestAnimationFrame && null != window.addEventListener;
                }(),
                visit: function(e, r) {
                    return t.controller.visit(e, r);
                },
                clearCache: function() {
                    return t.controller.clearCache();
                }
            };
        }).call(this);
    }).call(this);
    var t = this.Turbolinks;
    (function() {
        (function() {
            var e, r, n = [].slice;
            t.copyObject = function(t) {
                var e, r, n;
                r = {};
                for (e in t) n = t[e], r[e] = n;
                return r;
            }, t.closest = function(t, r) {
                return e.call(t, r);
            }, e = function() {
                var t, e;
                return t = document.documentElement, null != (e = t.closest) ? e : function(t) {
                    var e;
                    for (e = this; e; ) {
                        if (e.nodeType === Node.ELEMENT_NODE && r.call(e, t)) return e;
                        e = e.parentNode;
                    }
                };
            }(), t.defer = function(t) {
                return setTimeout(t, 1);
            }, t.throttle = function(t) {
                var e;
                return e = null, function() {
                    var r;
                    return r = 1 <= arguments.length ? n.call(arguments, 0) : [], null != e ? e : e = requestAnimationFrame(function(n) {
                        return function() {
                            return e = null, t.apply(n, r);
                        };
                    }(this));
                };
            }, t.dispatch = function(t, e) {
                var r, n, o, i, s;
                return i = null != e ? e : {}, s = i.target, r = i.cancelable, n = i.data, o = document.createEvent("Events"), 
                o.initEvent(t, !0, r === !0), o.data = null != n ? n : {}, (null != s ? s : document).dispatchEvent(o), 
                o;
            }, t.match = function(t, e) {
                return r.call(t, e);
            }, r = function() {
                var t, e, r, n;
                return t = document.documentElement, null != (e = null != (r = null != (n = t.matchesSelector) ? n : t.webkitMatchesSelector) ? r : t.msMatchesSelector) ? e : t.mozMatchesSelector;
            }(), t.uuid = function() {
                var t, e, r;
                for (r = "", t = e = 1; 36 >= e; t = ++e) r += 9 === t || 14 === t || 19 === t || 24 === t ? "-" : 15 === t ? "4" : 20 === t ? (Math.floor(4 * Math.random()) + 8).toString(16) : Math.floor(15 * Math.random()).toString(16);
                return r;
            };
        }).call(this), function() {
            t.Location = function() {
                function t(t) {
                    var e, r;
                    null == t && (t = ""), r = document.createElement("a"), r.href = t.toString(), this.absoluteURL = r.href, 
                    e = r.hash.length, 2 > e ? this.requestURL = this.absoluteURL : (this.requestURL = this.absoluteURL.slice(0, -e), 
                    this.anchor = r.hash.slice(1));
                }
                var e, r, n, o;
                return t.wrap = function(t) {
                    return t instanceof this ? t : new this(t);
                }, t.prototype.getOrigin = function() {
                    return this.absoluteURL.split("/", 3).join("/");
                }, t.prototype.getPath = function() {
                    var t, e;
                    return null != (t = null != (e = this.absoluteURL.match(/\/\/[^\/]*(\/[^?;]*)/)) ? e[1] : void 0) ? t : "/";
                }, t.prototype.getPathComponents = function() {
                    return this.getPath().split("/").slice(1);
                }, t.prototype.getLastPathComponent = function() {
                    return this.getPathComponents().slice(-1)[0];
                }, t.prototype.getExtension = function() {
                    var t, e;
                    return null != (t = null != (e = this.getLastPathComponent().match(/\.[^.]*$/)) ? e[0] : void 0) ? t : "";
                }, t.prototype.isHTML = function() {
                    return this.getExtension().match(/^(?:|\.(?:htm|html|xhtml))$/);
                }, t.prototype.isPrefixedBy = function(t) {
                    var e;
                    return e = r(t), this.isEqualTo(t) || o(this.absoluteURL, e);
                }, t.prototype.isEqualTo = function(t) {
                    return this.absoluteURL === (null != t ? t.absoluteURL : void 0);
                }, t.prototype.toCacheKey = function() {
                    return this.requestURL;
                }, t.prototype.toJSON = function() {
                    return this.absoluteURL;
                }, t.prototype.toString = function() {
                    return this.absoluteURL;
                }, t.prototype.valueOf = function() {
                    return this.absoluteURL;
                }, r = function(t) {
                    return e(t.getOrigin() + t.getPath());
                }, e = function(t) {
                    return n(t, "/") ? t : t + "/";
                }, o = function(t, e) {
                    return t.slice(0, e.length) === e;
                }, n = function(t, e) {
                    return t.slice(-e.length) === e;
                }, t;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.HttpRequest = function() {
                function r(r, n, o) {
                    this.delegate = r, this.requestCanceled = e(this.requestCanceled, this), this.requestTimedOut = e(this.requestTimedOut, this), 
                    this.requestFailed = e(this.requestFailed, this), this.requestLoaded = e(this.requestLoaded, this), 
                    this.requestProgressed = e(this.requestProgressed, this), this.url = t.Location.wrap(n).requestURL, 
                    this.referrer = t.Location.wrap(o).absoluteURL, this.createXHR();
                }
                return r.NETWORK_FAILURE = 0, r.TIMEOUT_FAILURE = -1, r.timeout = 60, r.prototype.send = function() {
                    var t;
                    return this.xhr && !this.sent ? (this.notifyApplicationBeforeRequestStart(), this.setProgress(0), 
                    this.xhr.send(), this.sent = !0, "function" == typeof (t = this.delegate).requestStarted ? t.requestStarted() : void 0) : void 0;
                }, r.prototype.cancel = function() {
                    return this.xhr && this.sent ? this.xhr.abort() : void 0;
                }, r.prototype.requestProgressed = function(t) {
                    return t.lengthComputable ? this.setProgress(t.loaded / t.total) : void 0;
                }, r.prototype.requestLoaded = function() {
                    return this.endRequest(function(t) {
                        return function() {
                            var e;
                            return 200 <= (e = t.xhr.status) && 300 > e ? t.delegate.requestCompletedWithResponse(t.xhr.responseText, t.xhr.getResponseHeader("Turbolinks-Location")) : (t.failed = !0, 
                            t.delegate.requestFailedWithStatusCode(t.xhr.status, t.xhr.responseText));
                        };
                    }(this));
                }, r.prototype.requestFailed = function() {
                    return this.endRequest(function(t) {
                        return function() {
                            return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.NETWORK_FAILURE);
                        };
                    }(this));
                }, r.prototype.requestTimedOut = function() {
                    return this.endRequest(function(t) {
                        return function() {
                            return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.TIMEOUT_FAILURE);
                        };
                    }(this));
                }, r.prototype.requestCanceled = function() {
                    return this.endRequest();
                }, r.prototype.notifyApplicationBeforeRequestStart = function() {
                    return t.dispatch("turbolinks:request-start", {
                        data: {
                            url: this.url,
                            xhr: this.xhr
                        }
                    });
                }, r.prototype.notifyApplicationAfterRequestEnd = function() {
                    return t.dispatch("turbolinks:request-end", {
                        data: {
                            url: this.url,
                            xhr: this.xhr
                        }
                    });
                }, r.prototype.createXHR = function() {
                    return this.xhr = new XMLHttpRequest(), this.xhr.open("GET", this.url, !0), this.xhr.timeout = 1e3 * this.constructor.timeout, 
                    this.xhr.setRequestHeader("Accept", "text/html, application/xhtml+xml"), this.xhr.setRequestHeader("Turbolinks-Referrer", this.referrer), 
                    this.xhr.onprogress = this.requestProgressed, this.xhr.onload = this.requestLoaded, 
                    this.xhr.onerror = this.requestFailed, this.xhr.ontimeout = this.requestTimedOut, 
                    this.xhr.onabort = this.requestCanceled;
                }, r.prototype.endRequest = function(t) {
                    return this.xhr ? (this.notifyApplicationAfterRequestEnd(), null != t && t.call(this), 
                    this.destroy()) : void 0;
                }, r.prototype.setProgress = function(t) {
                    var e;
                    return this.progress = t, "function" == typeof (e = this.delegate).requestProgressed ? e.requestProgressed(this.progress) : void 0;
                }, r.prototype.destroy = function() {
                    var t;
                    return this.setProgress(1), "function" == typeof (t = this.delegate).requestFinished && t.requestFinished(), 
                    this.delegate = null, this.xhr = null;
                }, r;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.ProgressBar = function() {
                function t() {
                    this.trickle = e(this.trickle, this), this.stylesheetElement = this.createStylesheetElement(), 
                    this.progressElement = this.createProgressElement();
                }
                var r;
                return r = 300, t.defaultCSS = ".turbolinks-progress-bar {\n  position: fixed;\n  display: block;\n  top: 0;\n  left: 0;\n  height: 3px;\n  background: #0076ff;\n  z-index: 9999;\n  transition: width " + r + "ms ease-out, opacity " + r / 2 + "ms " + r / 2 + "ms ease-in;\n  transform: translate3d(0, 0, 0);\n}", 
                t.prototype.show = function() {
                    return this.visible ? void 0 : (this.visible = !0, this.installStylesheetElement(), 
                    this.installProgressElement(), this.startTrickling());
                }, t.prototype.hide = function() {
                    return this.visible && !this.hiding ? (this.hiding = !0, this.fadeProgressElement(function(t) {
                        return function() {
                            return t.uninstallProgressElement(), t.stopTrickling(), t.visible = !1, t.hiding = !1;
                        };
                    }(this))) : void 0;
                }, t.prototype.setValue = function(t) {
                    return this.value = t, this.refresh();
                }, t.prototype.installStylesheetElement = function() {
                    return document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
                }, t.prototype.installProgressElement = function() {
                    return this.progressElement.style.width = 0, this.progressElement.style.opacity = 1, 
                    document.documentElement.insertBefore(this.progressElement, document.body), this.refresh();
                }, t.prototype.fadeProgressElement = function(t) {
                    return this.progressElement.style.opacity = 0, setTimeout(t, 1.5 * r);
                }, t.prototype.uninstallProgressElement = function() {
                    return this.progressElement.parentNode ? document.documentElement.removeChild(this.progressElement) : void 0;
                }, t.prototype.startTrickling = function() {
                    return null != this.trickleInterval ? this.trickleInterval : this.trickleInterval = setInterval(this.trickle, r);
                }, t.prototype.stopTrickling = function() {
                    return clearInterval(this.trickleInterval), this.trickleInterval = null;
                }, t.prototype.trickle = function() {
                    return this.setValue(this.value + Math.random() / 100);
                }, t.prototype.refresh = function() {
                    return requestAnimationFrame(function(t) {
                        return function() {
                            return t.progressElement.style.width = 10 + 90 * t.value + "%";
                        };
                    }(this));
                }, t.prototype.createStylesheetElement = function() {
                    var t;
                    return t = document.createElement("style"), t.type = "text/css", t.textContent = this.constructor.defaultCSS, 
                    t;
                }, t.prototype.createProgressElement = function() {
                    var t;
                    return t = document.createElement("div"), t.className = "turbolinks-progress-bar", 
                    t;
                }, t;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.BrowserAdapter = function() {
                function r(r) {
                    this.controller = r, this.showProgressBar = e(this.showProgressBar, this), this.progressBar = new t.ProgressBar();
                }
                var n, o, i, s;
                return s = t.HttpRequest, n = s.NETWORK_FAILURE, i = s.TIMEOUT_FAILURE, o = 500, 
                r.prototype.visitProposedToLocationWithAction = function(t, e) {
                    return this.controller.startVisitToLocationWithAction(t, e);
                }, r.prototype.visitStarted = function(t) {
                    return t.issueRequest(), t.changeHistory(), t.loadCachedSnapshot();
                }, r.prototype.visitRequestStarted = function(t) {
                    return this.progressBar.setValue(0), t.hasCachedSnapshot() || "restore" !== t.action ? this.showProgressBarAfterDelay() : this.showProgressBar();
                }, r.prototype.visitRequestProgressed = function(t) {
                    return this.progressBar.setValue(t.progress);
                }, r.prototype.visitRequestCompleted = function(t) {
                    return t.loadResponse();
                }, r.prototype.visitRequestFailedWithStatusCode = function(t, e) {
                    switch (e) {
                      case n:
                      case i:
                        return this.reload();

                      default:
                        return t.loadResponse();
                    }
                }, r.prototype.visitRequestFinished = function(t) {
                    return this.hideProgressBar();
                }, r.prototype.visitCompleted = function(t) {
                    return t.followRedirect();
                }, r.prototype.pageInvalidated = function() {
                    return this.reload();
                }, r.prototype.showProgressBarAfterDelay = function() {
                    return this.progressBarTimeout = setTimeout(this.showProgressBar, o);
                }, r.prototype.showProgressBar = function() {
                    return this.progressBar.show();
                }, r.prototype.hideProgressBar = function() {
                    return this.progressBar.hide(), clearTimeout(this.progressBarTimeout);
                }, r.prototype.reload = function() {
                    return window.location.reload();
                }, r;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.History = function() {
                function r(t) {
                    this.delegate = t, this.onPageLoad = e(this.onPageLoad, this), this.onPopState = e(this.onPopState, this);
                }
                return r.prototype.start = function() {
                    return this.started ? void 0 : (addEventListener("popstate", this.onPopState, !1), 
                    addEventListener("load", this.onPageLoad, !1), this.started = !0);
                }, r.prototype.stop = function() {
                    return this.started ? (removeEventListener("popstate", this.onPopState, !1), removeEventListener("load", this.onPageLoad, !1), 
                    this.started = !1) : void 0;
                }, r.prototype.push = function(e, r) {
                    return e = t.Location.wrap(e), this.update("push", e, r);
                }, r.prototype.replace = function(e, r) {
                    return e = t.Location.wrap(e), this.update("replace", e, r);
                }, r.prototype.onPopState = function(e) {
                    var r, n, o, i;
                    return this.shouldHandlePopState() && (i = null != (n = e.state) ? n.turbolinks : void 0) ? (r = t.Location.wrap(window.location), 
                    o = i.restorationIdentifier, this.delegate.historyPoppedToLocationWithRestorationIdentifier(r, o)) : void 0;
                }, r.prototype.onPageLoad = function(e) {
                    return t.defer(function(t) {
                        return function() {
                            return t.pageLoaded = !0;
                        };
                    }(this));
                }, r.prototype.shouldHandlePopState = function() {
                    return this.pageIsLoaded();
                }, r.prototype.pageIsLoaded = function() {
                    return this.pageLoaded || "complete" === document.readyState;
                }, r.prototype.update = function(t, e, r) {
                    var n;
                    return n = {
                        turbolinks: {
                            restorationIdentifier: r
                        }
                    }, history[t + "State"](n, null, e);
                }, r;
            }();
        }.call(this), function() {
            t.Snapshot = function() {
                function e(t) {
                    var e, r;
                    r = t.head, e = t.body, this.head = null != r ? r : document.createElement("head"), 
                    this.body = null != e ? e : document.createElement("body");
                }
                return e.wrap = function(t) {
                    return t instanceof this ? t : this.fromHTML(t);
                }, e.fromHTML = function(t) {
                    var e;
                    return e = document.createElement("html"), e.innerHTML = t, this.fromElement(e);
                }, e.fromElement = function(t) {
                    return new this({
                        head: t.querySelector("head"),
                        body: t.querySelector("body")
                    });
                }, e.prototype.clone = function() {
                    return new e({
                        head: this.head.cloneNode(!0),
                        body: this.body.cloneNode(!0)
                    });
                }, e.prototype.getRootLocation = function() {
                    var e, r;
                    return r = null != (e = this.getSetting("root")) ? e : "/", new t.Location(r);
                }, e.prototype.getCacheControlValue = function() {
                    return this.getSetting("cache-control");
                }, e.prototype.hasAnchor = function(t) {
                    try {
                        return null != this.body.querySelector("[id='" + t + "']");
                    } catch (e) {}
                }, e.prototype.isPreviewable = function() {
                    return "no-preview" !== this.getCacheControlValue();
                }, e.prototype.isCacheable = function() {
                    return "no-cache" !== this.getCacheControlValue();
                }, e.prototype.getSetting = function(t) {
                    var e, r;
                    return r = this.head.querySelectorAll("meta[name='turbolinks-" + t + "']"), e = r[r.length - 1], 
                    null != e ? e.getAttribute("content") : void 0;
                }, e;
            }();
        }.call(this), function() {
            var e = [].slice;
            t.Renderer = function() {
                function t() {}
                var r;
                return t.render = function() {
                    var t, r, n, o;
                    return n = arguments[0], r = arguments[1], t = 3 <= arguments.length ? e.call(arguments, 2) : [], 
                    o = function(t, e, r) {
                        r.prototype = t.prototype;
                        var n = new r(), o = t.apply(n, e);
                        return Object(o) === o ? o : n;
                    }(this, t, function() {}), o.delegate = n, o.render(r), o;
                }, t.prototype.renderView = function(t) {
                    return this.delegate.viewWillRender(this.newBody), t(), this.delegate.viewRendered(this.newBody);
                }, t.prototype.invalidateView = function() {
                    return this.delegate.viewInvalidated();
                }, t.prototype.createScriptElement = function(t) {
                    var e;
                    return "false" === t.getAttribute("data-turbolinks-eval") ? t : (e = document.createElement("script"), 
                    e.textContent = t.textContent, r(e, t), e);
                }, r = function(t, e) {
                    var r, n, o, i, s, a, u;
                    for (i = e.attributes, a = [], r = 0, n = i.length; n > r; r++) s = i[r], o = s.name, 
                    u = s.value, a.push(t.setAttribute(o, u));
                    return a;
                }, t;
            }();
        }.call(this), function() {
            t.HeadDetails = function() {
                function t(t) {
                    var e, r, i, s, a, u, l;
                    for (this.element = t, this.elements = {}, l = this.element.childNodes, s = 0, u = l.length; u > s; s++) i = l[s], 
                    i.nodeType === Node.ELEMENT_NODE && (a = i.outerHTML, r = null != (e = this.elements)[a] ? e[a] : e[a] = {
                        type: o(i),
                        tracked: n(i),
                        elements: []
                    }, r.elements.push(i));
                }
                var e, r, n, o;
                return t.prototype.hasElementWithKey = function(t) {
                    return t in this.elements;
                }, t.prototype.getTrackedElementSignature = function() {
                    var t, e;
                    return function() {
                        var r, n;
                        r = this.elements, n = [];
                        for (t in r) e = r[t].tracked, e && n.push(t);
                        return n;
                    }.call(this).join("");
                }, t.prototype.getScriptElementsNotInDetails = function(t) {
                    return this.getElementsMatchingTypeNotInDetails("script", t);
                }, t.prototype.getStylesheetElementsNotInDetails = function(t) {
                    return this.getElementsMatchingTypeNotInDetails("stylesheet", t);
                }, t.prototype.getElementsMatchingTypeNotInDetails = function(t, e) {
                    var r, n, o, i, s, a;
                    o = this.elements, s = [];
                    for (n in o) i = o[n], a = i.type, r = i.elements, a !== t || e.hasElementWithKey(n) || s.push(r[0]);
                    return s;
                }, t.prototype.getProvisionalElements = function() {
                    var t, e, r, n, o, i, s;
                    r = [], n = this.elements;
                    for (e in n) o = n[e], s = o.type, i = o.tracked, t = o.elements, null != s || i ? t.length > 1 && r.push.apply(r, t.slice(1)) : r.push.apply(r, t);
                    return r;
                }, o = function(t) {
                    return e(t) ? "script" : r(t) ? "stylesheet" : void 0;
                }, n = function(t) {
                    return "reload" === t.getAttribute("data-turbolinks-track");
                }, e = function(t) {
                    var e;
                    return e = t.tagName.toLowerCase(), "script" === e;
                }, r = function(t) {
                    var e;
                    return e = t.tagName.toLowerCase(), "style" === e || "link" === e && "stylesheet" === t.getAttribute("rel");
                }, t;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                function n() {
                    this.constructor = t;
                }
                for (var o in e) r.call(e, o) && (t[o] = e[o]);
                return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, 
                t;
            }, r = {}.hasOwnProperty;
            t.SnapshotRenderer = function(r) {
                function n(e, r) {
                    this.currentSnapshot = e, this.newSnapshot = r, this.currentHeadDetails = new t.HeadDetails(this.currentSnapshot.head), 
                    this.newHeadDetails = new t.HeadDetails(this.newSnapshot.head), this.newBody = this.newSnapshot.body;
                }
                return e(n, r), n.prototype.render = function(t) {
                    return this.trackedElementsAreIdentical() ? (this.mergeHead(), this.renderView(function(e) {
                        return function() {
                            return e.replaceBody(), e.focusFirstAutofocusableElement(), t();
                        };
                    }(this))) : this.invalidateView();
                }, n.prototype.mergeHead = function() {
                    return this.copyNewHeadStylesheetElements(), this.copyNewHeadScriptElements(), this.removeCurrentHeadProvisionalElements(), 
                    this.copyNewHeadProvisionalElements();
                }, n.prototype.replaceBody = function() {
                    return this.activateBodyScriptElements(), this.importBodyPermanentElements(), this.assignNewBody();
                }, n.prototype.trackedElementsAreIdentical = function() {
                    return this.currentHeadDetails.getTrackedElementSignature() === this.newHeadDetails.getTrackedElementSignature();
                }, n.prototype.copyNewHeadStylesheetElements = function() {
                    var t, e, r, n, o;
                    for (n = this.getNewHeadStylesheetElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], 
                    o.push(document.head.appendChild(t));
                    return o;
                }, n.prototype.copyNewHeadScriptElements = function() {
                    var t, e, r, n, o;
                    for (n = this.getNewHeadScriptElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], 
                    o.push(document.head.appendChild(this.createScriptElement(t)));
                    return o;
                }, n.prototype.removeCurrentHeadProvisionalElements = function() {
                    var t, e, r, n, o;
                    for (n = this.getCurrentHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], 
                    o.push(document.head.removeChild(t));
                    return o;
                }, n.prototype.copyNewHeadProvisionalElements = function() {
                    var t, e, r, n, o;
                    for (n = this.getNewHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) t = n[e], 
                    o.push(document.head.appendChild(t));
                    return o;
                }, n.prototype.importBodyPermanentElements = function() {
                    var t, e, r, n, o, i;
                    for (n = this.getNewBodyPermanentElements(), i = [], e = 0, r = n.length; r > e; e++) o = n[e], 
                    (t = this.findCurrentBodyPermanentElement(o)) ? i.push(o.parentNode.replaceChild(t, o)) : i.push(void 0);
                    return i;
                }, n.prototype.activateBodyScriptElements = function() {
                    var t, e, r, n, o, i;
                    for (n = this.getNewBodyScriptElements(), i = [], e = 0, r = n.length; r > e; e++) o = n[e], 
                    t = this.createScriptElement(o), i.push(o.parentNode.replaceChild(t, o));
                    return i;
                }, n.prototype.assignNewBody = function() {
                    return document.body = this.newBody;
                }, n.prototype.focusFirstAutofocusableElement = function() {
                    var t;
                    return null != (t = this.findFirstAutofocusableElement()) ? t.focus() : void 0;
                }, n.prototype.getNewHeadStylesheetElements = function() {
                    return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails);
                }, n.prototype.getNewHeadScriptElements = function() {
                    return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails);
                }, n.prototype.getCurrentHeadProvisionalElements = function() {
                    return this.currentHeadDetails.getProvisionalElements();
                }, n.prototype.getNewHeadProvisionalElements = function() {
                    return this.newHeadDetails.getProvisionalElements();
                }, n.prototype.getNewBodyPermanentElements = function() {
                    return this.newBody.querySelectorAll("[id][data-turbolinks-permanent]");
                }, n.prototype.findCurrentBodyPermanentElement = function(t) {
                    return document.body.querySelector("#" + t.id + "[data-turbolinks-permanent]");
                }, n.prototype.getNewBodyScriptElements = function() {
                    return this.newBody.querySelectorAll("script");
                }, n.prototype.findFirstAutofocusableElement = function() {
                    return document.body.querySelector("[autofocus]");
                }, n;
            }(t.Renderer);
        }.call(this), function() {
            var e = function(t, e) {
                function n() {
                    this.constructor = t;
                }
                for (var o in e) r.call(e, o) && (t[o] = e[o]);
                return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, 
                t;
            }, r = {}.hasOwnProperty;
            t.ErrorRenderer = function(t) {
                function r(t) {
                    this.html = t;
                }
                return e(r, t), r.prototype.render = function(t) {
                    return this.renderView(function(e) {
                        return function() {
                            return e.replaceDocumentHTML(), e.activateBodyScriptElements(), t();
                        };
                    }(this));
                }, r.prototype.replaceDocumentHTML = function() {
                    return document.documentElement.innerHTML = this.html;
                }, r.prototype.activateBodyScriptElements = function() {
                    var t, e, r, n, o, i;
                    for (n = this.getScriptElements(), i = [], e = 0, r = n.length; r > e; e++) o = n[e], 
                    t = this.createScriptElement(o), i.push(o.parentNode.replaceChild(t, o));
                    return i;
                }, r.prototype.getScriptElements = function() {
                    return document.documentElement.querySelectorAll("script");
                }, r;
            }(t.Renderer);
        }.call(this), function() {
            t.View = function() {
                function e(t) {
                    this.delegate = t, this.element = document.documentElement;
                }
                return e.prototype.getRootLocation = function() {
                    return this.getSnapshot().getRootLocation();
                }, e.prototype.getSnapshot = function() {
                    return t.Snapshot.fromElement(this.element);
                }, e.prototype.render = function(t, e) {
                    var r, n, o;
                    return o = t.snapshot, r = t.error, n = t.isPreview, this.markAsPreview(n), null != o ? this.renderSnapshot(o, e) : this.renderError(r, e);
                }, e.prototype.markAsPreview = function(t) {
                    return t ? this.element.setAttribute("data-turbolinks-preview", "") : this.element.removeAttribute("data-turbolinks-preview");
                }, e.prototype.renderSnapshot = function(e, r) {
                    return t.SnapshotRenderer.render(this.delegate, r, this.getSnapshot(), t.Snapshot.wrap(e));
                }, e.prototype.renderError = function(e, r) {
                    return t.ErrorRenderer.render(this.delegate, r, e);
                }, e;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.ScrollManager = function() {
                function r(r) {
                    this.delegate = r, this.onScroll = e(this.onScroll, this), this.onScroll = t.throttle(this.onScroll);
                }
                return r.prototype.start = function() {
                    return this.started ? void 0 : (addEventListener("scroll", this.onScroll, !1), this.onScroll(), 
                    this.started = !0);
                }, r.prototype.stop = function() {
                    return this.started ? (removeEventListener("scroll", this.onScroll, !1), this.started = !1) : void 0;
                }, r.prototype.scrollToElement = function(t) {
                    return t.scrollIntoView();
                }, r.prototype.scrollToPosition = function(t) {
                    var e, r;
                    return e = t.x, r = t.y, window.scrollTo(e, r);
                }, r.prototype.onScroll = function(t) {
                    return this.updatePosition({
                        x: window.pageXOffset,
                        y: window.pageYOffset
                    });
                }, r.prototype.updatePosition = function(t) {
                    var e;
                    return this.position = t, null != (e = this.delegate) ? e.scrollPositionChanged(this.position) : void 0;
                }, r;
            }();
        }.call(this), function() {
            t.SnapshotCache = function() {
                function e(t) {
                    this.size = t, this.keys = [], this.snapshots = {};
                }
                var r;
                return e.prototype.has = function(t) {
                    var e;
                    return e = r(t), e in this.snapshots;
                }, e.prototype.get = function(t) {
                    var e;
                    if (this.has(t)) return e = this.read(t), this.touch(t), e;
                }, e.prototype.put = function(t, e) {
                    return this.write(t, e), this.touch(t), e;
                }, e.prototype.read = function(t) {
                    var e;
                    return e = r(t), this.snapshots[e];
                }, e.prototype.write = function(t, e) {
                    var n;
                    return n = r(t), this.snapshots[n] = e;
                }, e.prototype.touch = function(t) {
                    var e, n;
                    return n = r(t), e = this.keys.indexOf(n), e > -1 && this.keys.splice(e, 1), this.keys.unshift(n), 
                    this.trim();
                }, e.prototype.trim = function() {
                    var t, e, r, n, o;
                    for (n = this.keys.splice(this.size), o = [], t = 0, r = n.length; r > t; t++) e = n[t], 
                    o.push(delete this.snapshots[e]);
                    return o;
                }, r = function(e) {
                    return t.Location.wrap(e).toCacheKey();
                }, e;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.Visit = function() {
                function r(r, n, o) {
                    this.controller = r, this.action = o, this.performScroll = e(this.performScroll, this), 
                    this.identifier = t.uuid(), this.location = t.Location.wrap(n), this.adapter = this.controller.adapter, 
                    this.state = "initialized", this.timingMetrics = {};
                }
                var n;
                return r.prototype.start = function() {
                    return "initialized" === this.state ? (this.recordTimingMetric("visitStart"), this.state = "started", 
                    this.adapter.visitStarted(this)) : void 0;
                }, r.prototype.cancel = function() {
                    var t;
                    return "started" === this.state ? (null != (t = this.request) && t.cancel(), this.cancelRender(), 
                    this.state = "canceled") : void 0;
                }, r.prototype.complete = function() {
                    var t;
                    return "started" === this.state ? (this.recordTimingMetric("visitEnd"), this.state = "completed", 
                    "function" == typeof (t = this.adapter).visitCompleted && t.visitCompleted(this), 
                    this.controller.visitCompleted(this)) : void 0;
                }, r.prototype.fail = function() {
                    var t;
                    return "started" === this.state ? (this.state = "failed", "function" == typeof (t = this.adapter).visitFailed ? t.visitFailed(this) : void 0) : void 0;
                }, r.prototype.changeHistory = function() {
                    var t, e;
                    return this.historyChanged ? void 0 : (t = this.location.isEqualTo(this.referrer) ? "replace" : this.action, 
                    e = n(t), this.controller[e](this.location, this.restorationIdentifier), this.historyChanged = !0);
                }, r.prototype.issueRequest = function() {
                    return this.shouldIssueRequest() && null == this.request ? (this.progress = 0, this.request = new t.HttpRequest(this, this.location, this.referrer), 
                    this.request.send()) : void 0;
                }, r.prototype.getCachedSnapshot = function() {
                    var t;
                    return !(t = this.controller.getCachedSnapshotForLocation(this.location)) || null != this.location.anchor && !t.hasAnchor(this.location.anchor) || "restore" !== this.action && !t.isPreviewable() ? void 0 : t;
                }, r.prototype.hasCachedSnapshot = function() {
                    return null != this.getCachedSnapshot();
                }, r.prototype.loadCachedSnapshot = function() {
                    var t, e;
                    return (e = this.getCachedSnapshot()) ? (t = this.shouldIssueRequest(), this.render(function() {
                        var r;
                        return this.cacheSnapshot(), this.controller.render({
                            snapshot: e,
                            isPreview: t
                        }, this.performScroll), "function" == typeof (r = this.adapter).visitRendered && r.visitRendered(this), 
                        t ? void 0 : this.complete();
                    })) : void 0;
                }, r.prototype.loadResponse = function() {
                    return null != this.response ? this.render(function() {
                        var t, e;
                        return this.cacheSnapshot(), this.request.failed ? (this.controller.render({
                            error: this.response
                        }, this.performScroll), "function" == typeof (t = this.adapter).visitRendered && t.visitRendered(this), 
                        this.fail()) : (this.controller.render({
                            snapshot: this.response
                        }, this.performScroll), "function" == typeof (e = this.adapter).visitRendered && e.visitRendered(this), 
                        this.complete());
                    }) : void 0;
                }, r.prototype.followRedirect = function() {
                    return this.redirectedToLocation && !this.followedRedirect ? (this.location = this.redirectedToLocation, 
                    this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation, this.restorationIdentifier), 
                    this.followedRedirect = !0) : void 0;
                }, r.prototype.requestStarted = function() {
                    var t;
                    return this.recordTimingMetric("requestStart"), "function" == typeof (t = this.adapter).visitRequestStarted ? t.visitRequestStarted(this) : void 0;
                }, r.prototype.requestProgressed = function(t) {
                    var e;
                    return this.progress = t, "function" == typeof (e = this.adapter).visitRequestProgressed ? e.visitRequestProgressed(this) : void 0;
                }, r.prototype.requestCompletedWithResponse = function(e, r) {
                    return this.response = e, null != r && (this.redirectedToLocation = t.Location.wrap(r)), 
                    this.adapter.visitRequestCompleted(this);
                }, r.prototype.requestFailedWithStatusCode = function(t, e) {
                    return this.response = e, this.adapter.visitRequestFailedWithStatusCode(this, t);
                }, r.prototype.requestFinished = function() {
                    var t;
                    return this.recordTimingMetric("requestEnd"), "function" == typeof (t = this.adapter).visitRequestFinished ? t.visitRequestFinished(this) : void 0;
                }, r.prototype.performScroll = function() {
                    return this.scrolled ? void 0 : ("restore" === this.action ? this.scrollToRestoredPosition() || this.scrollToTop() : this.scrollToAnchor() || this.scrollToTop(), 
                    this.scrolled = !0);
                }, r.prototype.scrollToRestoredPosition = function() {
                    var t, e;
                    return t = null != (e = this.restorationData) ? e.scrollPosition : void 0, null != t ? (this.controller.scrollToPosition(t), 
                    !0) : void 0;
                }, r.prototype.scrollToAnchor = function() {
                    return null != this.location.anchor ? (this.controller.scrollToAnchor(this.location.anchor), 
                    !0) : void 0;
                }, r.prototype.scrollToTop = function() {
                    return this.controller.scrollToPosition({
                        x: 0,
                        y: 0
                    });
                }, r.prototype.recordTimingMetric = function(t) {
                    var e;
                    return null != (e = this.timingMetrics)[t] ? e[t] : e[t] = new Date().getTime();
                }, r.prototype.getTimingMetrics = function() {
                    return t.copyObject(this.timingMetrics);
                }, n = function(t) {
                    switch (t) {
                      case "replace":
                        return "replaceHistoryWithLocationAndRestorationIdentifier";

                      case "advance":
                      case "restore":
                        return "pushHistoryWithLocationAndRestorationIdentifier";
                    }
                }, r.prototype.shouldIssueRequest = function() {
                    return "restore" === this.action ? !this.hasCachedSnapshot() : !0;
                }, r.prototype.cacheSnapshot = function() {
                    return this.snapshotCached ? void 0 : (this.controller.cacheSnapshot(), this.snapshotCached = !0);
                }, r.prototype.render = function(t) {
                    return this.cancelRender(), this.frame = requestAnimationFrame(function(e) {
                        return function() {
                            return e.frame = null, t.call(e);
                        };
                    }(this));
                }, r.prototype.cancelRender = function() {
                    return this.frame ? cancelAnimationFrame(this.frame) : void 0;
                }, r;
            }();
        }.call(this), function() {
            var e = function(t, e) {
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.Controller = function() {
                function r() {
                    this.clickBubbled = e(this.clickBubbled, this), this.clickCaptured = e(this.clickCaptured, this), 
                    this.pageLoaded = e(this.pageLoaded, this), this.history = new t.History(this), 
                    this.view = new t.View(this), this.scrollManager = new t.ScrollManager(this), this.restorationData = {}, 
                    this.clearCache();
                }
                return r.prototype.start = function() {
                    return t.supported && !this.started ? (addEventListener("click", this.clickCaptured, !0), 
                    addEventListener("DOMContentLoaded", this.pageLoaded, !1), this.scrollManager.start(), 
                    this.startHistory(), this.started = !0, this.enabled = !0) : void 0;
                }, r.prototype.disable = function() {
                    return this.enabled = !1;
                }, r.prototype.stop = function() {
                    return this.started ? (removeEventListener("click", this.clickCaptured, !0), removeEventListener("DOMContentLoaded", this.pageLoaded, !1), 
                    this.scrollManager.stop(), this.stopHistory(), this.started = !1) : void 0;
                }, r.prototype.clearCache = function() {
                    return this.cache = new t.SnapshotCache(10);
                }, r.prototype.visit = function(e, r) {
                    var n, o;
                    return null == r && (r = {}), e = t.Location.wrap(e), this.applicationAllowsVisitingLocation(e) ? this.locationIsVisitable(e) ? (n = null != (o = r.action) ? o : "advance", 
                    this.adapter.visitProposedToLocationWithAction(e, n)) : window.location = e : void 0;
                }, r.prototype.startVisitToLocationWithAction = function(e, r, n) {
                    var o;
                    return t.supported ? (o = this.getRestorationDataForIdentifier(n), this.startVisit(e, r, {
                        restorationData: o
                    })) : window.location = e;
                }, r.prototype.startHistory = function() {
                    return this.location = t.Location.wrap(window.location), this.restorationIdentifier = t.uuid(), 
                    this.history.start(), this.history.replace(this.location, this.restorationIdentifier);
                }, r.prototype.stopHistory = function() {
                    return this.history.stop();
                }, r.prototype.pushHistoryWithLocationAndRestorationIdentifier = function(e, r) {
                    return this.restorationIdentifier = r, this.location = t.Location.wrap(e), this.history.push(this.location, this.restorationIdentifier);
                }, r.prototype.replaceHistoryWithLocationAndRestorationIdentifier = function(e, r) {
                    return this.restorationIdentifier = r, this.location = t.Location.wrap(e), this.history.replace(this.location, this.restorationIdentifier);
                }, r.prototype.historyPoppedToLocationWithRestorationIdentifier = function(e, r) {
                    var n;
                    return this.restorationIdentifier = r, this.enabled ? (n = this.getRestorationDataForIdentifier(this.restorationIdentifier), 
                    this.startVisit(e, "restore", {
                        restorationIdentifier: this.restorationIdentifier,
                        restorationData: n,
                        historyChanged: !0
                    }), this.location = t.Location.wrap(e)) : this.adapter.pageInvalidated();
                }, r.prototype.getCachedSnapshotForLocation = function(t) {
                    var e;
                    return e = this.cache.get(t), e ? e.clone() : void 0;
                }, r.prototype.shouldCacheSnapshot = function() {
                    return this.view.getSnapshot().isCacheable();
                }, r.prototype.cacheSnapshot = function() {
                    var t;
                    return this.shouldCacheSnapshot() ? (this.notifyApplicationBeforeCachingSnapshot(), 
                    t = this.view.getSnapshot(), this.cache.put(this.lastRenderedLocation, t.clone())) : void 0;
                }, r.prototype.scrollToAnchor = function(t) {
                    var e;
                    return (e = document.getElementById(t)) ? this.scrollToElement(e) : this.scrollToPosition({
                        x: 0,
                        y: 0
                    });
                }, r.prototype.scrollToElement = function(t) {
                    return this.scrollManager.scrollToElement(t);
                }, r.prototype.scrollToPosition = function(t) {
                    return this.scrollManager.scrollToPosition(t);
                }, r.prototype.scrollPositionChanged = function(t) {
                    var e;
                    return e = this.getCurrentRestorationData(), e.scrollPosition = t;
                }, r.prototype.render = function(t, e) {
                    return this.view.render(t, e);
                }, r.prototype.viewInvalidated = function() {
                    return this.adapter.pageInvalidated();
                }, r.prototype.viewWillRender = function(t) {
                    return this.notifyApplicationBeforeRender(t);
                }, r.prototype.viewRendered = function() {
                    return this.lastRenderedLocation = this.currentVisit.location, this.notifyApplicationAfterRender();
                }, r.prototype.pageLoaded = function() {
                    return this.lastRenderedLocation = this.location, this.notifyApplicationAfterPageLoad();
                }, r.prototype.clickCaptured = function() {
                    return removeEventListener("click", this.clickBubbled, !1), addEventListener("click", this.clickBubbled, !1);
                }, r.prototype.clickBubbled = function(t) {
                    var e, r, n;
                    return this.enabled && this.clickEventIsSignificant(t) && (r = this.getVisitableLinkForNode(t.target)) && (n = this.getVisitableLocationForLink(r)) && this.applicationAllowsFollowingLinkToLocation(r, n) ? (t.preventDefault(), 
                    e = this.getActionForLink(r), this.visit(n, {
                        action: e
                    })) : void 0;
                }, r.prototype.applicationAllowsFollowingLinkToLocation = function(t, e) {
                    var r;
                    return r = this.notifyApplicationAfterClickingLinkToLocation(t, e), !r.defaultPrevented;
                }, r.prototype.applicationAllowsVisitingLocation = function(t) {
                    var e;
                    return e = this.notifyApplicationBeforeVisitingLocation(t), !e.defaultPrevented;
                }, r.prototype.notifyApplicationAfterClickingLinkToLocation = function(e, r) {
                    return t.dispatch("turbolinks:click", {
                        target: e,
                        data: {
                            url: r.absoluteURL
                        },
                        cancelable: !0
                    });
                }, r.prototype.notifyApplicationBeforeVisitingLocation = function(e) {
                    return t.dispatch("turbolinks:before-visit", {
                        data: {
                            url: e.absoluteURL
                        },
                        cancelable: !0
                    });
                }, r.prototype.notifyApplicationAfterVisitingLocation = function(e) {
                    return t.dispatch("turbolinks:visit", {
                        data: {
                            url: e.absoluteURL
                        }
                    });
                }, r.prototype.notifyApplicationBeforeCachingSnapshot = function() {
                    return t.dispatch("turbolinks:before-cache");
                }, r.prototype.notifyApplicationBeforeRender = function(e) {
                    return t.dispatch("turbolinks:before-render", {
                        data: {
                            newBody: e
                        }
                    });
                }, r.prototype.notifyApplicationAfterRender = function() {
                    return t.dispatch("turbolinks:render");
                }, r.prototype.notifyApplicationAfterPageLoad = function(e) {
                    return null == e && (e = {}), t.dispatch("turbolinks:load", {
                        data: {
                            url: this.location.absoluteURL,
                            timing: e
                        }
                    });
                }, r.prototype.startVisit = function(t, e, r) {
                    var n;
                    return null != (n = this.currentVisit) && n.cancel(), this.currentVisit = this.createVisit(t, e, r), 
                    this.currentVisit.start(), this.notifyApplicationAfterVisitingLocation(t);
                }, r.prototype.createVisit = function(e, r, n) {
                    var o, i, s, a, u;
                    return i = null != n ? n : {}, a = i.restorationIdentifier, s = i.restorationData, 
                    o = i.historyChanged, u = new t.Visit(this, e, r), u.restorationIdentifier = null != a ? a : t.uuid(), 
                    u.restorationData = t.copyObject(s), u.historyChanged = o, u.referrer = this.location, 
                    u;
                }, r.prototype.visitCompleted = function(t) {
                    return this.notifyApplicationAfterPageLoad(t.getTimingMetrics());
                }, r.prototype.clickEventIsSignificant = function(t) {
                    return !(t.defaultPrevented || t.target.isContentEditable || t.which > 1 || t.altKey || t.ctrlKey || t.metaKey || t.shiftKey);
                }, r.prototype.getVisitableLinkForNode = function(e) {
                    return this.nodeIsVisitable(e) ? t.closest(e, "a[href]:not([target]):not([download])") : void 0;
                }, r.prototype.getVisitableLocationForLink = function(e) {
                    var r;
                    return r = new t.Location(e.getAttribute("href")), this.locationIsVisitable(r) ? r : void 0;
                }, r.prototype.getActionForLink = function(t) {
                    var e;
                    return null != (e = t.getAttribute("data-turbolinks-action")) ? e : "advance";
                }, r.prototype.nodeIsVisitable = function(e) {
                    var r;
                    return (r = t.closest(e, "[data-turbolinks]")) ? "false" !== r.getAttribute("data-turbolinks") : !0;
                }, r.prototype.locationIsVisitable = function(t) {
                    return t.isPrefixedBy(this.view.getRootLocation()) && t.isHTML();
                }, r.prototype.getCurrentRestorationData = function() {
                    return this.getRestorationDataForIdentifier(this.restorationIdentifier);
                }, r.prototype.getRestorationDataForIdentifier = function(t) {
                    var e;
                    return null != (e = this.restorationData)[t] ? e[t] : e[t] = {};
                }, r;
            }();
        }.call(this), function() {
            var e, r, n;
            t.start = function() {
                return r() ? (null == t.controller && (t.controller = e()), t.controller.start()) : void 0;
            }, r = function() {
                return null == window.Turbolinks && (window.Turbolinks = t), n();
            }, e = function() {
                var e;
                return e = new t.Controller(), e.adapter = new t.BrowserAdapter(e), e;
            }, n = function() {
                return window.Turbolinks === t;
            }, n() && t.start();
        }.call(this);
    }).call(this), "object" == typeof module && module.exports ? module.exports = t : "function" == typeof define && define.amd && define(t);
}).call(this);

(function(window, undefined) {
    var document = window.document;
    var jQuery = function() {
        var jQuery = function(selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery);
        }, _jQuery = window.jQuery, _$ = window.$, rootjQuery, quickExpr = /^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/, rnotwhite = /\S/, trimLeft = /^\s+/, trimRight = /\s+$/, rdigit = /\d/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/, rvalidchars = /^[\],:{}\s]*$/, rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rwebkit = /(webkit)[ \/]([\w.]+)/, ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/, rmsie = /(msie) ([\w.]+)/, rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/, userAgent = navigator.userAgent, browserMatch, readyBound = false, readyList, promiseMethods = "then done fail isResolved isRejected promise".split(" "), DOMContentLoaded, toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, push = Array.prototype.push, slice = Array.prototype.slice, trim = String.prototype.trim, indexOf = Array.prototype.indexOf, class2type = {};
        jQuery.fn = jQuery.prototype = {
            constructor: jQuery,
            init: function(selector, context, rootjQuery) {
                var match, elem, ret, doc;
                if (!selector) {
                    return this;
                }
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this;
                }
                if (selector === "body" && !context && document.body) {
                    this.context = document;
                    this[0] = document.body;
                    this.selector = "body";
                    this.length = 1;
                    return this;
                }
                if (typeof selector === "string") {
                    match = quickExpr.exec(selector);
                    if (match && (match[1] || !context)) {
                        if (match[1]) {
                            context = context instanceof jQuery ? context[0] : context;
                            doc = context ? context.ownerDocument || context : document;
                            ret = rsingleTag.exec(selector);
                            if (ret) {
                                if (jQuery.isPlainObject(context)) {
                                    selector = [ document.createElement(ret[1]) ];
                                    jQuery.fn.attr.call(selector, context, true);
                                } else {
                                    selector = [ doc.createElement(ret[1]) ];
                                }
                            } else {
                                ret = jQuery.buildFragment([ match[1] ], [ doc ]);
                                selector = (ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment).childNodes;
                            }
                            return jQuery.merge(this, selector);
                        } else {
                            elem = document.getElementById(match[2]);
                            if (elem && elem.parentNode) {
                                if (elem.id !== match[2]) {
                                    return rootjQuery.find(selector);
                                }
                                this.length = 1;
                                this[0] = elem;
                            }
                            this.context = document;
                            this.selector = selector;
                            return this;
                        }
                    } else if (!context || context.jquery) {
                        return (context || rootjQuery).find(selector);
                    } else {
                        return this.constructor(context).find(selector);
                    }
                } else if (jQuery.isFunction(selector)) {
                    return rootjQuery.ready(selector);
                }
                if (selector.selector !== undefined) {
                    this.selector = selector.selector;
                    this.context = selector.context;
                }
                return jQuery.makeArray(selector, this);
            },
            selector: "",
            jquery: "1.5",
            length: 0,
            size: function() {
                return this.length;
            },
            toArray: function() {
                return slice.call(this, 0);
            },
            get: function(num) {
                return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
            },
            pushStack: function(elems, name, selector) {
                var ret = this.constructor();
                if (jQuery.isArray(elems)) {
                    push.apply(ret, elems);
                } else {
                    jQuery.merge(ret, elems);
                }
                ret.prevObject = this;
                ret.context = this.context;
                if (name === "find") {
                    ret.selector = this.selector + (this.selector ? " " : "") + selector;
                } else if (name) {
                    ret.selector = this.selector + "." + name + "(" + selector + ")";
                }
                return ret;
            },
            each: function(callback, args) {
                return jQuery.each(this, callback, args);
            },
            ready: function(fn) {
                jQuery.bindReady();
                readyList.done(fn);
                return this;
            },
            eq: function(i) {
                return i === -1 ? this.slice(i) : this.slice(i, +i + 1);
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            slice: function() {
                return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","));
            },
            map: function(callback) {
                return this.pushStack(jQuery.map(this, function(elem, i) {
                    return callback.call(elem, i, elem);
                }));
            },
            end: function() {
                return this.prevObject || this.constructor(null);
            },
            push: push,
            sort: [].sort,
            splice: [].splice
        };
        jQuery.fn.init.prototype = jQuery.fn;
        jQuery.extend = jQuery.fn.extend = function() {
            var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
            if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
            }
            if (typeof target !== "object" && !jQuery.isFunction(target)) {
                target = {};
            }
            if (length === i) {
                target = this;
                --i;
            }
            for (;i < length; i++) {
                if ((options = arguments[i]) != null) {
                    for (name in options) {
                        src = target[name];
                        copy = options[name];
                        if (target === copy) {
                            continue;
                        }
                        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                            if (copyIsArray) {
                                copyIsArray = false;
                                clone = src && jQuery.isArray(src) ? src : [];
                            } else {
                                clone = src && jQuery.isPlainObject(src) ? src : {};
                            }
                            target[name] = jQuery.extend(deep, clone, copy);
                        } else if (copy !== undefined) {
                            target[name] = copy;
                        }
                    }
                }
            }
            return target;
        };
        jQuery.extend({
            noConflict: function(deep) {
                window.$ = _$;
                if (deep) {
                    window.jQuery = _jQuery;
                }
                return jQuery;
            },
            isReady: false,
            readyWait: 1,
            ready: function(wait) {
                if (wait === true) {
                    jQuery.readyWait--;
                }
                if (!jQuery.readyWait || wait !== true && !jQuery.isReady) {
                    if (!document.body) {
                        return setTimeout(jQuery.ready, 1);
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return;
                    }
                    readyList.resolveWith(document, [ jQuery ]);
                    if (jQuery.fn.trigger) {
                        jQuery(document).trigger("ready").unbind("ready");
                    }
                }
            },
            bindReady: function() {
                if (readyBound) {
                    return;
                }
                readyBound = true;
                if (document.readyState === "complete") {
                    return setTimeout(jQuery.ready, 1);
                }
                if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    window.addEventListener("load", jQuery.ready, false);
                } else if (document.attachEvent) {
                    document.attachEvent("onreadystatechange", DOMContentLoaded);
                    window.attachEvent("onload", jQuery.ready);
                    var toplevel = false;
                    try {
                        toplevel = window.frameElement == null;
                    } catch (e) {}
                    if (document.documentElement.doScroll && toplevel) {
                        doScrollCheck();
                    }
                }
            },
            isFunction: function(obj) {
                return jQuery.type(obj) === "function";
            },
            isArray: Array.isArray || function(obj) {
                return jQuery.type(obj) === "array";
            },
            isWindow: function(obj) {
                return obj && typeof obj === "object" && "setInterval" in obj;
            },
            isNaN: function(obj) {
                return obj == null || !rdigit.test(obj) || isNaN(obj);
            },
            type: function(obj) {
                return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
            },
            isPlainObject: function(obj) {
                if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                    return false;
                }
                if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false;
                }
                var key;
                for (key in obj) {}
                return key === undefined || hasOwn.call(obj, key);
            },
            isEmptyObject: function(obj) {
                for (var name in obj) {
                    return false;
                }
                return true;
            },
            error: function(msg) {
                throw msg;
            },
            parseJSON: function(data) {
                if (typeof data !== "string" || !data) {
                    return null;
                }
                data = jQuery.trim(data);
                if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                    return window.JSON && window.JSON.parse ? window.JSON.parse(data) : new Function("return " + data)();
                } else {
                    jQuery.error("Invalid JSON: " + data);
                }
            },
            parseXML: function(data, xml, tmp) {
                if (window.DOMParser) {
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml");
                } else {
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data);
                }
                tmp = xml.documentElement;
                if (!tmp || !tmp.nodeName || tmp.nodeName === "parsererror") {
                    jQuery.error("Invalid XML: " + data);
                }
                return xml;
            },
            noop: function() {},
            globalEval: function(data) {
                if (data && rnotwhite.test(data)) {
                    var head = document.getElementsByTagName("head")[0] || document.documentElement, script = document.createElement("script");
                    script.type = "text/javascript";
                    if (jQuery.support.scriptEval()) {
                        script.appendChild(document.createTextNode(data));
                    } else {
                        script.text = data;
                    }
                    head.insertBefore(script, head.firstChild);
                    head.removeChild(script);
                }
            },
            nodeName: function(elem, name) {
                return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
            },
            each: function(object, callback, args) {
                var name, i = 0, length = object.length, isObj = length === undefined || jQuery.isFunction(object);
                if (args) {
                    if (isObj) {
                        for (name in object) {
                            if (callback.apply(object[name], args) === false) {
                                break;
                            }
                        }
                    } else {
                        for (;i < length; ) {
                            if (callback.apply(object[i++], args) === false) {
                                break;
                            }
                        }
                    }
                } else {
                    if (isObj) {
                        for (name in object) {
                            if (callback.call(object[name], name, object[name]) === false) {
                                break;
                            }
                        }
                    } else {
                        for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value = object[++i]) {}
                    }
                }
                return object;
            },
            trim: trim ? function(text) {
                return text == null ? "" : trim.call(text);
            } : function(text) {
                return text == null ? "" : text.toString().replace(trimLeft, "").replace(trimRight, "");
            },
            makeArray: function(array, results) {
                var ret = results || [];
                if (array != null) {
                    var type = jQuery.type(array);
                    if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
                        push.call(ret, array);
                    } else {
                        jQuery.merge(ret, array);
                    }
                }
                return ret;
            },
            inArray: function(elem, array) {
                if (array.indexOf) {
                    return array.indexOf(elem);
                }
                for (var i = 0, length = array.length; i < length; i++) {
                    if (array[i] === elem) {
                        return i;
                    }
                }
                return -1;
            },
            merge: function(first, second) {
                var i = first.length, j = 0;
                if (typeof second.length === "number") {
                    for (var l = second.length; j < l; j++) {
                        first[i++] = second[j];
                    }
                } else {
                    while (second[j] !== undefined) {
                        first[i++] = second[j++];
                    }
                }
                first.length = i;
                return first;
            },
            grep: function(elems, callback, inv) {
                var ret = [], retVal;
                inv = !!inv;
                for (var i = 0, length = elems.length; i < length; i++) {
                    retVal = !!callback(elems[i], i);
                    if (inv !== retVal) {
                        ret.push(elems[i]);
                    }
                }
                return ret;
            },
            map: function(elems, callback, arg) {
                var ret = [], value;
                for (var i = 0, length = elems.length; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
                return ret.concat.apply([], ret);
            },
            guid: 1,
            proxy: function(fn, proxy, thisObject) {
                if (arguments.length === 2) {
                    if (typeof proxy === "string") {
                        thisObject = fn;
                        fn = thisObject[proxy];
                        proxy = undefined;
                    } else if (proxy && !jQuery.isFunction(proxy)) {
                        thisObject = proxy;
                        proxy = undefined;
                    }
                }
                if (!proxy && fn) {
                    proxy = function() {
                        return fn.apply(thisObject || this, arguments);
                    };
                }
                if (fn) {
                    proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
                }
                return proxy;
            },
            access: function(elems, key, value, exec, fn, pass) {
                var length = elems.length;
                if (typeof key === "object") {
                    for (var k in key) {
                        jQuery.access(elems, k, key[k], exec, fn, value);
                    }
                    return elems;
                }
                if (value !== undefined) {
                    exec = !pass && exec && jQuery.isFunction(value);
                    for (var i = 0; i < length; i++) {
                        fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
                    }
                    return elems;
                }
                return length ? fn(elems[0], key) : undefined;
            },
            now: function() {
                return new Date().getTime();
            },
            _Deferred: function() {
                var callbacks = [], fired, firing, cancelled, deferred = {
                    done: function() {
                        if (!cancelled) {
                            var args = arguments, i, length, elem, type, _fired;
                            if (fired) {
                                _fired = fired;
                                fired = 0;
                            }
                            for (i = 0, length = args.length; i < length; i++) {
                                elem = args[i];
                                type = jQuery.type(elem);
                                if (type === "array") {
                                    deferred.done.apply(deferred, elem);
                                } else if (type === "function") {
                                    callbacks.push(elem);
                                }
                            }
                            if (_fired) {
                                deferred.resolveWith(_fired[0], _fired[1]);
                            }
                        }
                        return this;
                    },
                    resolveWith: function(context, args) {
                        if (!cancelled && !fired && !firing) {
                            firing = 1;
                            try {
                                while (callbacks[0]) {
                                    callbacks.shift().apply(context, args);
                                }
                            } finally {
                                fired = [ context, args ];
                                firing = 0;
                            }
                        }
                        return this;
                    },
                    resolve: function() {
                        deferred.resolveWith(jQuery.isFunction(this.promise) ? this.promise() : this, arguments);
                        return this;
                    },
                    isResolved: function() {
                        return !!(firing || fired);
                    },
                    cancel: function() {
                        cancelled = 1;
                        callbacks = [];
                        return this;
                    }
                };
                return deferred;
            },
            Deferred: function(func) {
                var deferred = jQuery._Deferred(), failDeferred = jQuery._Deferred(), promise;
                jQuery.extend(deferred, {
                    then: function(doneCallbacks, failCallbacks) {
                        deferred.done(doneCallbacks).fail(failCallbacks);
                        return this;
                    },
                    fail: failDeferred.done,
                    rejectWith: failDeferred.resolveWith,
                    reject: failDeferred.resolve,
                    isRejected: failDeferred.isResolved,
                    promise: function(obj, i) {
                        if (obj == null) {
                            if (promise) {
                                return promise;
                            }
                            promise = obj = {};
                        }
                        i = promiseMethods.length;
                        while (i--) {
                            obj[promiseMethods[i]] = deferred[promiseMethods[i]];
                        }
                        return obj;
                    }
                });
                deferred.then(failDeferred.cancel, deferred.cancel);
                delete deferred.cancel;
                if (func) {
                    func.call(deferred, deferred);
                }
                return deferred;
            },
            when: function(object) {
                var args = arguments, length = args.length, deferred = length <= 1 && object && jQuery.isFunction(object.promise) ? object : jQuery.Deferred(), promise = deferred.promise(), resolveArray;
                if (length > 1) {
                    resolveArray = new Array(length);
                    jQuery.each(args, function(index, element) {
                        jQuery.when(element).then(function(value) {
                            resolveArray[index] = arguments.length > 1 ? slice.call(arguments, 0) : value;
                            if (!--length) {
                                deferred.resolveWith(promise, resolveArray);
                            }
                        }, deferred.reject);
                    });
                } else if (deferred !== object) {
                    deferred.resolve(object);
                }
                return promise;
            },
            uaMatch: function(ua) {
                ua = ua.toLowerCase();
                var match = rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];
                return {
                    browser: match[1] || "",
                    version: match[2] || "0"
                };
            },
            sub: function() {
                function jQuerySubclass(selector, context) {
                    return new jQuerySubclass.fn.init(selector, context);
                }
                jQuery.extend(true, jQuerySubclass, this);
                jQuerySubclass.superclass = this;
                jQuerySubclass.fn = jQuerySubclass.prototype = this();
                jQuerySubclass.fn.constructor = jQuerySubclass;
                jQuerySubclass.subclass = this.subclass;
                jQuerySubclass.fn.init = function init(selector, context) {
                    if (context && context instanceof jQuery && !(context instanceof jQuerySubclass)) {
                        context = jQuerySubclass(context);
                    }
                    return jQuery.fn.init.call(this, selector, context, rootjQuerySubclass);
                };
                jQuerySubclass.fn.init.prototype = jQuerySubclass.fn;
                var rootjQuerySubclass = jQuerySubclass(document);
                return jQuerySubclass;
            },
            browser: {}
        });
        readyList = jQuery._Deferred();
        jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });
        browserMatch = jQuery.uaMatch(userAgent);
        if (browserMatch.browser) {
            jQuery.browser[browserMatch.browser] = true;
            jQuery.browser.version = browserMatch.version;
        }
        if (jQuery.browser.webkit) {
            jQuery.browser.safari = true;
        }
        if (indexOf) {
            jQuery.inArray = function(elem, array) {
                return indexOf.call(array, elem);
            };
        }
        if (rnotwhite.test(" ")) {
            trimLeft = /^[\s\xA0]+/;
            trimRight = /[\s\xA0]+$/;
        }
        rootjQuery = jQuery(document);
        if (document.addEventListener) {
            DOMContentLoaded = function() {
                document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                jQuery.ready();
            };
        } else if (document.attachEvent) {
            DOMContentLoaded = function() {
                if (document.readyState === "complete") {
                    document.detachEvent("onreadystatechange", DOMContentLoaded);
                    jQuery.ready();
                }
            };
        }
        function doScrollCheck() {
            if (jQuery.isReady) {
                return;
            }
            try {
                document.documentElement.doScroll("left");
            } catch (e) {
                setTimeout(doScrollCheck, 1);
                return;
            }
            jQuery.ready();
        }
        return window.jQuery = window.$ = jQuery;
    }();
    (function() {
        jQuery.support = {};
        var div = document.createElement("div");
        div.style.display = "none";
        div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
        var all = div.getElementsByTagName("*"), a = div.getElementsByTagName("a")[0], select = document.createElement("select"), opt = select.appendChild(document.createElement("option"));
        if (!all || !all.length || !a) {
            return;
        }
        jQuery.support = {
            leadingWhitespace: div.firstChild.nodeType === 3,
            tbody: !div.getElementsByTagName("tbody").length,
            htmlSerialize: !!div.getElementsByTagName("link").length,
            style: /red/.test(a.getAttribute("style")),
            hrefNormalized: a.getAttribute("href") === "/a",
            opacity: /^0.55$/.test(a.style.opacity),
            cssFloat: !!a.style.cssFloat,
            checkOn: div.getElementsByTagName("input")[0].value === "on",
            optSelected: opt.selected,
            deleteExpando: true,
            optDisabled: false,
            checkClone: false,
            _scriptEval: null,
            noCloneEvent: true,
            boxModel: null,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableHiddenOffsets: true
        };
        select.disabled = true;
        jQuery.support.optDisabled = !opt.disabled;
        jQuery.support.scriptEval = function() {
            if (jQuery.support._scriptEval === null) {
                var root = document.documentElement, script = document.createElement("script"), id = "script" + jQuery.now();
                script.type = "text/javascript";
                try {
                    script.appendChild(document.createTextNode("window." + id + "=1;"));
                } catch (e) {}
                root.insertBefore(script, root.firstChild);
                if (window[id]) {
                    jQuery.support._scriptEval = true;
                    delete window[id];
                } else {
                    jQuery.support._scriptEval = false;
                }
                root.removeChild(script);
                root = script = id = null;
            }
            return jQuery.support._scriptEval;
        };
        try {
            delete div.test;
        } catch (e) {
            jQuery.support.deleteExpando = false;
        }
        if (div.attachEvent && div.fireEvent) {
            div.attachEvent("onclick", function click() {
                jQuery.support.noCloneEvent = false;
                div.detachEvent("onclick", click);
            });
            div.cloneNode(true).fireEvent("onclick");
        }
        div = document.createElement("div");
        div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
        var fragment = document.createDocumentFragment();
        fragment.appendChild(div.firstChild);
        jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        jQuery(function() {
            var div = document.createElement("div"), body = document.getElementsByTagName("body")[0];
            if (!body) {
                return;
            }
            div.style.width = div.style.paddingLeft = "1px";
            body.appendChild(div);
            jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
            if ("zoom" in div.style) {
                div.style.display = "inline";
                div.style.zoom = 1;
                jQuery.support.inlineBlockNeedsLayout = div.offsetWidth === 2;
                div.style.display = "";
                div.innerHTML = "<div style='width:4px;'></div>";
                jQuery.support.shrinkWrapBlocks = div.offsetWidth !== 2;
            }
            div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
            var tds = div.getElementsByTagName("td");
            jQuery.support.reliableHiddenOffsets = tds[0].offsetHeight === 0;
            tds[0].style.display = "";
            tds[1].style.display = "none";
            jQuery.support.reliableHiddenOffsets = jQuery.support.reliableHiddenOffsets && tds[0].offsetHeight === 0;
            div.innerHTML = "";
            body.removeChild(div).style.display = "none";
            div = tds = null;
        });
        var eventSupported = function(eventName) {
            var el = document.createElement("div");
            eventName = "on" + eventName;
            if (!el.attachEvent) {
                return true;
            }
            var isSupported = eventName in el;
            if (!isSupported) {
                el.setAttribute(eventName, "return;");
                isSupported = typeof el[eventName] === "function";
            }
            el = null;
            return isSupported;
        };
        jQuery.support.submitBubbles = eventSupported("submit");
        jQuery.support.changeBubbles = eventSupported("change");
        div = all = a = null;
    })();
    var rbrace = /^(?:\{.*\}|\[.*\])$/;
    jQuery.extend({
        cache: {},
        uuid: 0,
        expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
        noData: {
            embed: true,
            object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
            applet: true
        },
        hasData: function(elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !jQuery.isEmptyObject(elem);
        },
        data: function(elem, name, data, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var internalKey = jQuery.expando, getByName = typeof name === "string", thisCache, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : elem[jQuery.expando] && jQuery.expando;
            if ((!id || pvt && id && !cache[id][internalKey]) && getByName && data === undefined) {
                return;
            }
            if (!id) {
                if (isNode) {
                    elem[jQuery.expando] = id = ++jQuery.uuid;
                } else {
                    id = jQuery.expando;
                }
            }
            if (!cache[id]) {
                cache[id] = {};
            }
            if (typeof name === "object") {
                if (pvt) {
                    cache[id][internalKey] = jQuery.extend(cache[id][internalKey], name);
                } else {
                    cache[id] = jQuery.extend(cache[id], name);
                }
            }
            thisCache = cache[id];
            if (pvt) {
                if (!thisCache[internalKey]) {
                    thisCache[internalKey] = {};
                }
                thisCache = thisCache[internalKey];
            }
            if (data !== undefined) {
                thisCache[name] = data;
            }
            if (name === "events" && !thisCache[name]) {
                return thisCache[internalKey] && thisCache[internalKey].events;
            }
            return getByName ? thisCache[name] : thisCache;
        },
        removeData: function(elem, name, pvt) {
            if (!jQuery.acceptData(elem)) {
                return;
            }
            var internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
            if (!cache[id]) {
                return;
            }
            if (name) {
                var thisCache = pvt ? cache[id][internalKey] : cache[id];
                if (thisCache) {
                    delete thisCache[name];
                    if (!jQuery.isEmptyObject(thisCache)) {
                        return;
                    }
                }
            }
            if (pvt) {
                delete cache[id][internalKey];
                if (!jQuery.isEmptyObject(cache[id])) {
                    return;
                }
            }
            var internalCache = cache[id][internalKey];
            if (jQuery.support.deleteExpando || cache != window) {
                delete cache[id];
            } else {
                cache[id] = null;
            }
            if (internalCache) {
                cache[id] = {};
                cache[id][internalKey] = internalCache;
            } else if (isNode) {
                if (jQuery.support.deleteExpando) {
                    delete elem[jQuery.expando];
                } else if (elem.removeAttribute) {
                    elem.removeAttribute(jQuery.expando);
                } else {
                    elem[jQuery.expando] = null;
                }
            }
        },
        _data: function(elem, name, data) {
            return jQuery.data(elem, name, data, true);
        },
        acceptData: function(elem) {
            if (elem.nodeName) {
                var match = jQuery.noData[elem.nodeName.toLowerCase()];
                if (match) {
                    return !(match === true || elem.getAttribute("classid") !== match);
                }
            }
            return true;
        }
    });
    jQuery.fn.extend({
        data: function(key, value) {
            var data = null;
            if (typeof key === "undefined") {
                if (this.length) {
                    data = jQuery.data(this[0]);
                    if (this[0].nodeType === 1) {
                        var attr = this[0].attributes, name;
                        for (var i = 0, l = attr.length; i < l; i++) {
                            name = attr[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = name.substr(5);
                                dataAttr(this[0], name, data[name]);
                            }
                        }
                    }
                }
                return data;
            } else if (typeof key === "object") {
                return this.each(function() {
                    jQuery.data(this, key);
                });
            }
            var parts = key.split(".");
            parts[1] = parts[1] ? "." + parts[1] : "";
            if (value === undefined) {
                data = this.triggerHandler("getData" + parts[1] + "!", [ parts[0] ]);
                if (data === undefined && this.length) {
                    data = jQuery.data(this[0], key);
                    data = dataAttr(this[0], key, data);
                }
                return data === undefined && parts[1] ? this.data(parts[0]) : data;
            } else {
                return this.each(function() {
                    var $this = jQuery(this), args = [ parts[0], value ];
                    $this.triggerHandler("setData" + parts[1] + "!", args);
                    jQuery.data(this, key, value);
                    $this.triggerHandler("changeData" + parts[1] + "!", args);
                });
            }
        },
        removeData: function(key) {
            return this.each(function() {
                jQuery.removeData(this, key);
            });
        }
    });
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            data = elem.getAttribute("data-" + key);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : !jQuery.isNaN(data) ? parseFloat(data) : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {}
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        queue: function(elem, type, data) {
            if (!elem) {
                return;
            }
            type = (type || "fx") + "queue";
            var q = jQuery._data(elem, type);
            if (!data) {
                return q || [];
            }
            if (!q || jQuery.isArray(data)) {
                q = jQuery._data(elem, type, jQuery.makeArray(data));
            } else {
                q.push(data);
            }
            return q;
        },
        dequeue: function(elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), fn = queue.shift();
            if (fn === "inprogress") {
                fn = queue.shift();
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress");
                }
                fn.call(elem, function() {
                    jQuery.dequeue(elem, type);
                });
            }
            if (!queue.length) {
                jQuery.removeData(elem, type + "queue", true);
            }
        }
    });
    jQuery.fn.extend({
        queue: function(type, data) {
            if (typeof type !== "string") {
                data = type;
                type = "fx";
            }
            if (data === undefined) {
                return jQuery.queue(this[0], type);
            }
            return this.each(function(i) {
                var queue = jQuery.queue(this, type, data);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        delay: function(time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function() {
                var elem = this;
                setTimeout(function() {
                    jQuery.dequeue(elem, type);
                }, time);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        }
    });
    var rclass = /[\n\t\r]/g, rspaces = /\s+/, rreturn = /\r/g, rspecialurl = /^(?:href|src|style)$/, rtype = /^(?:button|input)$/i, rfocusable = /^(?:button|input|object|select|textarea)$/i, rclickable = /^a(?:rea)?$/i, rradiocheck = /^(?:radio|checkbox)$/i;
    jQuery.props = {
        for: "htmlFor",
        class: "className",
        readonly: "readOnly",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        rowspan: "rowSpan",
        colspan: "colSpan",
        tabindex: "tabIndex",
        usemap: "useMap",
        frameborder: "frameBorder"
    };
    jQuery.fn.extend({
        attr: function(name, value) {
            return jQuery.access(this, name, value, true, jQuery.attr);
        },
        removeAttr: function(name, fn) {
            return this.each(function() {
                jQuery.attr(this, name, "");
                if (this.nodeType === 1) {
                    this.removeAttribute(name);
                }
            });
        },
        addClass: function(value) {
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.addClass(value.call(this, i, self.attr("class")));
                });
            }
            if (value && typeof value === "string") {
                var classNames = (value || "").split(rspaces);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1) {
                        if (!elem.className) {
                            elem.className = value;
                        } else {
                            var className = " " + elem.className + " ", setClass = elem.className;
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                if (className.indexOf(" " + classNames[c] + " ") < 0) {
                                    setClass += " " + classNames[c];
                                }
                            }
                            elem.className = jQuery.trim(setClass);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function(value) {
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.removeClass(value.call(this, i, self.attr("class")));
                });
            }
            if (value && typeof value === "string" || value === undefined) {
                var classNames = (value || "").split(rspaces);
                for (var i = 0, l = this.length; i < l; i++) {
                    var elem = this[i];
                    if (elem.nodeType === 1 && elem.className) {
                        if (value) {
                            var className = (" " + elem.className + " ").replace(rclass, " ");
                            for (var c = 0, cl = classNames.length; c < cl; c++) {
                                className = className.replace(" " + classNames[c] + " ", " ");
                            }
                            elem.className = jQuery.trim(className);
                        } else {
                            elem.className = "";
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function(value, stateVal) {
            var type = typeof value, isBool = typeof stateVal === "boolean";
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.toggleClass(value.call(this, i, self.attr("class"), stateVal), stateVal);
                });
            }
            return this.each(function() {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.split(rspaces);
                    while (className = classNames[i++]) {
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? "addClass" : "removeClass"](className);
                    }
                } else if (type === "undefined" || type === "boolean") {
                    if (this.className) {
                        jQuery._data(this, "__className__", this.className);
                    }
                    this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                }
            });
        },
        hasClass: function(selector) {
            var className = " " + selector + " ";
            for (var i = 0, l = this.length; i < l; i++) {
                if ((" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        },
        val: function(value) {
            if (!arguments.length) {
                var elem = this[0];
                if (elem) {
                    if (jQuery.nodeName(elem, "option")) {
                        var val = elem.attributes.value;
                        return !val || val.specified ? elem.value : elem.text;
                    }
                    if (jQuery.nodeName(elem, "select")) {
                        var index = elem.selectedIndex, values = [], options = elem.options, one = elem.type === "select-one";
                        if (index < 0) {
                            return null;
                        }
                        for (var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++) {
                            var option = options[i];
                            if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                value = jQuery(option).val();
                                if (one) {
                                    return value;
                                }
                                values.push(value);
                            }
                        }
                        return values;
                    }
                    if (rradiocheck.test(elem.type) && !jQuery.support.checkOn) {
                        return elem.getAttribute("value") === null ? "on" : elem.value;
                    }
                    return (elem.value || "").replace(rreturn, "");
                }
                return undefined;
            }
            var isFunction = jQuery.isFunction(value);
            return this.each(function(i) {
                var self = jQuery(this), val = value;
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, self.val());
                }
                if (val == null) {
                    val = "";
                } else if (typeof val === "number") {
                    val += "";
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }
                if (jQuery.isArray(val) && rradiocheck.test(this.type)) {
                    this.checked = jQuery.inArray(self.val(), val) >= 0;
                } else if (jQuery.nodeName(this, "select")) {
                    var values = jQuery.makeArray(val);
                    jQuery("option", this).each(function() {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });
                    if (!values.length) {
                        this.selectedIndex = -1;
                    }
                } else {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        attrFn: {
            val: true,
            css: true,
            html: true,
            text: true,
            data: true,
            width: true,
            height: true,
            offset: true
        },
        attr: function(elem, name, value, pass) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || elem.nodeType === 2) {
                return undefined;
            }
            if (pass && name in jQuery.attrFn) {
                return jQuery(elem)[name](value);
            }
            var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc(elem), set = value !== undefined;
            name = notxml && jQuery.props[name] || name;
            if (elem.nodeType === 1) {
                var special = rspecialurl.test(name);
                if (name === "selected" && !jQuery.support.optSelected) {
                    var parent = elem.parentNode;
                    if (parent) {
                        parent.selectedIndex;
                        if (parent.parentNode) {
                            parent.parentNode.selectedIndex;
                        }
                    }
                }
                if ((name in elem || elem[name] !== undefined) && notxml && !special) {
                    if (set) {
                        if (name === "type" && rtype.test(elem.nodeName) && elem.parentNode) {
                            jQuery.error("type property can't be changed");
                        }
                        if (value === null) {
                            if (elem.nodeType === 1) {
                                elem.removeAttribute(name);
                            }
                        } else {
                            elem[name] = value;
                        }
                    }
                    if (jQuery.nodeName(elem, "form") && elem.getAttributeNode(name)) {
                        return elem.getAttributeNode(name).nodeValue;
                    }
                    if (name === "tabIndex") {
                        var attributeNode = elem.getAttributeNode("tabIndex");
                        return attributeNode && attributeNode.specified ? attributeNode.value : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                    }
                    return elem[name];
                }
                if (!jQuery.support.style && notxml && name === "style") {
                    if (set) {
                        elem.style.cssText = "" + value;
                    }
                    return elem.style.cssText;
                }
                if (set) {
                    elem.setAttribute(name, "" + value);
                }
                if (!elem.attributes[name] && (elem.hasAttribute && !elem.hasAttribute(name))) {
                    return undefined;
                }
                var attr = !jQuery.support.hrefNormalized && notxml && special ? elem.getAttribute(name, 2) : elem.getAttribute(name);
                return attr === null ? undefined : attr;
            }
            if (set) {
                elem[name] = value;
            }
            return elem[name];
        }
    });
    var rnamespaces = /\.(.*)$/, rformElems = /^(?:textarea|input|select)$/i, rperiod = /\./g, rspace = / /g, rescape = /[^\w\s.|`]/g, fcleanup = function(nm) {
        return nm.replace(rescape, "\\$&");
    }, eventKey = "events";
    jQuery.event = {
        add: function(elem, types, handler, data) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (jQuery.isWindow(elem) && (elem !== window && !elem.frameElement)) {
                elem = window;
            }
            if (handler === false) {
                handler = returnFalse;
            } else if (!handler) {
                return;
            }
            var handleObjIn, handleObj;
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            var elemData = jQuery._data(elem);
            if (!elemData) {
                return;
            }
            var events = elemData[eventKey], eventHandle = elemData.handle;
            if (typeof events === "function") {
                eventHandle = events.handle;
                events = events.events;
            } else if (!events) {
                if (!elem.nodeType) {
                    elemData[eventKey] = elemData = function() {};
                }
                elemData.events = events = {};
            }
            if (!eventHandle) {
                elemData.handle = eventHandle = function() {
                    return typeof jQuery !== "undefined" && !jQuery.event.triggered ? jQuery.event.handle.apply(eventHandle.elem, arguments) : undefined;
                };
            }
            eventHandle.elem = elem;
            types = types.split(" ");
            var type, i = 0, namespaces;
            while (type = types[i++]) {
                handleObj = handleObjIn ? jQuery.extend({}, handleObjIn) : {
                    handler: handler,
                    data: data
                };
                if (type.indexOf(".") > -1) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    handleObj.namespace = namespaces.slice(0).sort().join(".");
                } else {
                    namespaces = [];
                    handleObj.namespace = "";
                }
                handleObj.type = type;
                if (!handleObj.guid) {
                    handleObj.guid = handler.guid;
                }
                var handlers = events[type], special = jQuery.event.special[type] || {};
                if (!handlers) {
                    handlers = events[type] = [];
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent("on" + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                handlers.push(handleObj);
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        global: {},
        remove: function(elem, types, handler, pos) {
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (handler === false) {
                handler = returnFalse;
            }
            var ret, type, fn, j, i = 0, all, namespaces, namespace, special, eventType, handleObj, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem), events = elemData && elemData[eventKey];
            if (!elemData || !events) {
                return;
            }
            if (typeof events === "function") {
                elemData = events;
                events = events.events;
            }
            if (types && types.type) {
                handler = types.handler;
                types = types.type;
            }
            if (!types || typeof types === "string" && types.charAt(0) === ".") {
                types = types || "";
                for (type in events) {
                    jQuery.event.remove(elem, type + types);
                }
                return;
            }
            types = types.split(" ");
            while (type = types[i++]) {
                origType = type;
                handleObj = null;
                all = type.indexOf(".") < 0;
                namespaces = [];
                if (!all) {
                    namespaces = type.split(".");
                    type = namespaces.shift();
                    namespace = new RegExp("(^|\\.)" + jQuery.map(namespaces.slice(0).sort(), fcleanup).join("\\.(?:.*\\.)?") + "(\\.|$)");
                }
                eventType = events[type];
                if (!eventType) {
                    continue;
                }
                if (!handler) {
                    for (j = 0; j < eventType.length; j++) {
                        handleObj = eventType[j];
                        if (all || namespace.test(handleObj.namespace)) {
                            jQuery.event.remove(elem, origType, handleObj.handler, j);
                            eventType.splice(j--, 1);
                        }
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                for (j = pos || 0; j < eventType.length; j++) {
                    handleObj = eventType[j];
                    if (handler.guid === handleObj.guid) {
                        if (all || namespace.test(handleObj.namespace)) {
                            if (pos == null) {
                                eventType.splice(j--, 1);
                            }
                            if (special.remove) {
                                special.remove.call(elem, handleObj);
                            }
                        }
                        if (pos != null) {
                            break;
                        }
                    }
                }
                if (eventType.length === 0 || pos != null && eventType.length === 1) {
                    if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    ret = null;
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                var handle = elemData.handle;
                if (handle) {
                    handle.elem = null;
                }
                delete elemData.events;
                delete elemData.handle;
                if (typeof elemData === "function") {
                    jQuery.removeData(elem, eventKey, true);
                } else if (jQuery.isEmptyObject(elemData)) {
                    jQuery.removeData(elem, undefined, true);
                }
            }
        },
        trigger: function(event, data, elem) {
            var type = event.type || event, bubbling = arguments[3];
            if (!bubbling) {
                event = typeof event === "object" ? event[jQuery.expando] ? event : jQuery.extend(jQuery.Event(type), event) : jQuery.Event(type);
                if (type.indexOf("!") >= 0) {
                    event.type = type = type.slice(0, -1);
                    event.exclusive = true;
                }
                if (!elem) {
                    event.stopPropagation();
                    if (jQuery.event.global[type]) {
                        jQuery.each(jQuery.cache, function() {
                            var internalKey = jQuery.expando, internalCache = this[internalKey];
                            if (internalCache && internalCache.events && internalCache.events[type]) {
                                jQuery.event.trigger(event, data, internalCache.handle.elem);
                            }
                        });
                    }
                }
                if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                    return undefined;
                }
                event.result = undefined;
                event.target = elem;
                data = jQuery.makeArray(data);
                data.unshift(event);
            }
            event.currentTarget = elem;
            var handle = elem.nodeType ? jQuery._data(elem, "handle") : (jQuery._data(elem, eventKey) || {}).handle;
            if (handle) {
                handle.apply(elem, data);
            }
            var parent = elem.parentNode || elem.ownerDocument;
            try {
                if (!(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()])) {
                    if (elem["on" + type] && elem["on" + type].apply(elem, data) === false) {
                        event.result = false;
                        event.preventDefault();
                    }
                }
            } catch (inlineError) {}
            if (!event.isPropagationStopped() && parent) {
                jQuery.event.trigger(event, data, parent, true);
            } else if (!event.isDefaultPrevented()) {
                var old, target = event.target, targetType = type.replace(rnamespaces, ""), isClick = jQuery.nodeName(target, "a") && targetType === "click", special = jQuery.event.special[targetType] || {};
                if ((!special._default || special._default.call(elem, event) === false) && !isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()])) {
                    try {
                        if (target[targetType]) {
                            old = target["on" + targetType];
                            if (old) {
                                target["on" + targetType] = null;
                            }
                            jQuery.event.triggered = true;
                            target[targetType]();
                        }
                    } catch (triggerError) {}
                    if (old) {
                        target["on" + targetType] = old;
                    }
                    jQuery.event.triggered = false;
                }
            }
        },
        handle: function(event) {
            var all, handlers, namespaces, namespace_re, events, namespace_sort = [], args = jQuery.makeArray(arguments);
            event = args[0] = jQuery.event.fix(event || window.event);
            event.currentTarget = this;
            all = event.type.indexOf(".") < 0 && !event.exclusive;
            if (!all) {
                namespaces = event.type.split(".");
                event.type = namespaces.shift();
                namespace_sort = namespaces.slice(0).sort();
                namespace_re = new RegExp("(^|\\.)" + namespace_sort.join("\\.(?:.*\\.)?") + "(\\.|$)");
            }
            event.namespace = event.namespace || namespace_sort.join(".");
            events = jQuery._data(this, eventKey);
            if (typeof events === "function") {
                events = events.events;
            }
            handlers = (events || {})[event.type];
            if (events && handlers) {
                handlers = handlers.slice(0);
                for (var j = 0, l = handlers.length; j < l; j++) {
                    var handleObj = handlers[j];
                    if (all || namespace_re.test(handleObj.namespace)) {
                        event.handler = handleObj.handler;
                        event.data = handleObj.data;
                        event.handleObj = handleObj;
                        var ret = handleObj.handler.apply(this, args);
                        if (ret !== undefined) {
                            event.result = ret;
                            if (ret === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                        if (event.isImmediatePropagationStopped()) {
                            break;
                        }
                    }
                }
            }
            return event.result;
        },
        props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var originalEvent = event;
            event = jQuery.Event(originalEvent);
            for (var i = this.props.length, prop; i; ) {
                prop = this.props[--i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = event.srcElement || document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            if (!event.relatedTarget && event.fromElement) {
                event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
            }
            if (event.pageX == null && event.clientX != null) {
                var doc = document.documentElement, body = document.body;
                event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
            }
            if (event.which == null && (event.charCode != null || event.keyCode != null)) {
                event.which = event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.metaKey && event.ctrlKey) {
                event.metaKey = event.ctrlKey;
            }
            if (!event.which && event.button !== undefined) {
                event.which = event.button & 1 ? 1 : event.button & 2 ? 3 : event.button & 4 ? 2 : 0;
            }
            return event;
        },
        guid: 1e8,
        proxy: jQuery.proxy,
        special: {
            ready: {
                setup: jQuery.bindReady,
                teardown: jQuery.noop
            },
            live: {
                add: function(handleObj) {
                    jQuery.event.add(this, liveConvert(handleObj.origType, handleObj.selector), jQuery.extend({}, handleObj, {
                        handler: liveHandler,
                        guid: handleObj.handler.guid
                    }));
                },
                remove: function(handleObj) {
                    jQuery.event.remove(this, liveConvert(handleObj.origType, handleObj.selector), handleObj);
                }
            },
            beforeunload: {
                setup: function(data, namespaces, eventHandle) {
                    if (jQuery.isWindow(this)) {
                        this.onbeforeunload = eventHandle;
                    }
                },
                teardown: function(namespaces, eventHandle) {
                    if (this.onbeforeunload === eventHandle) {
                        this.onbeforeunload = null;
                    }
                }
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function(elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function(elem, type, handle) {
        if (elem.detachEvent) {
            elem.detachEvent("on" + type, handle);
        }
    };
    jQuery.Event = function(src) {
        if (!this.preventDefault) {
            return new jQuery.Event(src);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        this.timeStamp = jQuery.now();
        this[jQuery.expando] = true;
    };
    function returnFalse() {
        return false;
    }
    function returnTrue() {
        return true;
    }
    jQuery.Event.prototype = {
        preventDefault: function() {
            this.isDefaultPrevented = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function() {
            this.isPropagationStopped = returnTrue;
            var e = this.originalEvent;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function() {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        },
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse
    };
    var withinElement = function(event) {
        var parent = event.relatedTarget;
        try {
            while (parent && parent !== this) {
                parent = parent.parentNode;
            }
            if (parent !== this) {
                event.type = event.data;
                jQuery.event.handle.apply(this, arguments);
            }
        } catch (e) {}
    }, delegate = function(event) {
        event.type = event.data;
        jQuery.event.handle.apply(this, arguments);
    };
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            setup: function(data) {
                jQuery.event.add(this, fix, data && data.selector ? delegate : withinElement, orig);
            },
            teardown: function(data) {
                jQuery.event.remove(this, fix, data && data.selector ? delegate : withinElement);
            }
        };
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function(data, namespaces) {
                if (this.nodeName && this.nodeName.toLowerCase() !== "form") {
                    jQuery.event.add(this, "click.specialSubmit", function(e) {
                        var elem = e.target, type = elem.type;
                        if ((type === "submit" || type === "image") && jQuery(elem).closest("form").length) {
                            e.liveFired = undefined;
                            return trigger("submit", this, arguments);
                        }
                    });
                    jQuery.event.add(this, "keypress.specialSubmit", function(e) {
                        var elem = e.target, type = elem.type;
                        if ((type === "text" || type === "password") && jQuery(elem).closest("form").length && e.keyCode === 13) {
                            e.liveFired = undefined;
                            return trigger("submit", this, arguments);
                        }
                    });
                } else {
                    return false;
                }
            },
            teardown: function(namespaces) {
                jQuery.event.remove(this, ".specialSubmit");
            }
        };
    }
    if (!jQuery.support.changeBubbles) {
        var changeFilters, getVal = function(elem) {
            var type = elem.type, val = elem.value;
            if (type === "radio" || type === "checkbox") {
                val = elem.checked;
            } else if (type === "select-multiple") {
                val = elem.selectedIndex > -1 ? jQuery.map(elem.options, function(elem) {
                    return elem.selected;
                }).join("-") : "";
            } else if (elem.nodeName.toLowerCase() === "select") {
                val = elem.selectedIndex;
            }
            return val;
        }, testChange = function testChange(e) {
            var elem = e.target, data, val;
            if (!rformElems.test(elem.nodeName) || elem.readOnly) {
                return;
            }
            data = jQuery._data(elem, "_change_data");
            val = getVal(elem);
            if (e.type !== "focusout" || elem.type !== "radio") {
                jQuery._data(elem, "_change_data", val);
            }
            if (data === undefined || val === data) {
                return;
            }
            if (data != null || val) {
                e.type = "change";
                e.liveFired = undefined;
                return jQuery.event.trigger(e, arguments[1], elem);
            }
        };
        jQuery.event.special.change = {
            filters: {
                focusout: testChange,
                beforedeactivate: testChange,
                click: function(e) {
                    var elem = e.target, type = elem.type;
                    if (type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select") {
                        return testChange.call(this, e);
                    }
                },
                keydown: function(e) {
                    var elem = e.target, type = elem.type;
                    if (e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea" || e.keyCode === 32 && (type === "checkbox" || type === "radio") || type === "select-multiple") {
                        return testChange.call(this, e);
                    }
                },
                beforeactivate: function(e) {
                    var elem = e.target;
                    jQuery._data(elem, "_change_data", getVal(elem));
                }
            },
            setup: function(data, namespaces) {
                if (this.type === "file") {
                    return false;
                }
                for (var type in changeFilters) {
                    jQuery.event.add(this, type + ".specialChange", changeFilters[type]);
                }
                return rformElems.test(this.nodeName);
            },
            teardown: function(namespaces) {
                jQuery.event.remove(this, ".specialChange");
                return rformElems.test(this.nodeName);
            }
        };
        changeFilters = jQuery.event.special.change.filters;
        changeFilters.focus = changeFilters.beforeactivate;
    }
    function trigger(type, elem, args) {
        args[0].type = type;
        return jQuery.event.handle.apply(elem, args);
    }
    if (document.addEventListener) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {
            jQuery.event.special[fix] = {
                setup: function() {
                    this.addEventListener(orig, handler, true);
                },
                teardown: function() {
                    this.removeEventListener(orig, handler, true);
                }
            };
            function handler(e) {
                e = jQuery.event.fix(e);
                e.type = fix;
                return jQuery.event.handle.call(this, e);
            }
        });
    }
    jQuery.each([ "bind", "one" ], function(i, name) {
        jQuery.fn[name] = function(type, data, fn) {
            if (typeof type === "object") {
                for (var key in type) {
                    this[name](key, data, type[key], fn);
                }
                return this;
            }
            if (jQuery.isFunction(data) || data === false) {
                fn = data;
                data = undefined;
            }
            var handler = name === "one" ? jQuery.proxy(fn, function(event) {
                jQuery(this).unbind(event, handler);
                return fn.apply(this, arguments);
            }) : fn;
            if (type === "unload" && name !== "one") {
                this.one(type, data, fn);
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.add(this[i], type, handler, data);
                }
            }
            return this;
        };
    });
    jQuery.fn.extend({
        unbind: function(type, fn) {
            if (typeof type === "object" && !type.preventDefault) {
                for (var key in type) {
                    this.unbind(key, type[key]);
                }
            } else {
                for (var i = 0, l = this.length; i < l; i++) {
                    jQuery.event.remove(this[i], type, fn);
                }
            }
            return this;
        },
        delegate: function(selector, types, data, fn) {
            return this.live(types, data, fn, selector);
        },
        undelegate: function(selector, types, fn) {
            if (arguments.length === 0) {
                return this.unbind("live");
            } else {
                return this.die(types, null, fn, selector);
            }
        },
        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            if (this[0]) {
                var event = jQuery.Event(type);
                event.preventDefault();
                event.stopPropagation();
                jQuery.event.trigger(event, data, this[0]);
                return event.result;
            }
        },
        toggle: function(fn) {
            var args = arguments, i = 1;
            while (i < args.length) {
                jQuery.proxy(fn, args[i++]);
            }
            return this.click(jQuery.proxy(fn, function(event) {
                var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
                jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
                event.preventDefault();
                return args[lastToggle].apply(this, arguments) || false;
            }));
        },
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    var liveMap = {
        focus: "focusin",
        blur: "focusout",
        mouseenter: "mouseover",
        mouseleave: "mouseout"
    };
    jQuery.each([ "live", "die" ], function(i, name) {
        jQuery.fn[name] = function(types, data, fn, origSelector) {
            var type, i = 0, match, namespaces, preType, selector = origSelector || this.selector, context = origSelector ? this : jQuery(this.context);
            if (typeof types === "object" && !types.preventDefault) {
                for (var key in types) {
                    context[name](key, data, types[key], selector);
                }
                return this;
            }
            if (jQuery.isFunction(data)) {
                fn = data;
                data = undefined;
            }
            types = (types || "").split(" ");
            while ((type = types[i++]) != null) {
                match = rnamespaces.exec(type);
                namespaces = "";
                if (match) {
                    namespaces = match[0];
                    type = type.replace(rnamespaces, "");
                }
                if (type === "hover") {
                    types.push("mouseenter" + namespaces, "mouseleave" + namespaces);
                    continue;
                }
                preType = type;
                if (type === "focus" || type === "blur") {
                    types.push(liveMap[type] + namespaces);
                    type = type + namespaces;
                } else {
                    type = (liveMap[type] || type) + namespaces;
                }
                if (name === "live") {
                    for (var j = 0, l = context.length; j < l; j++) {
                        jQuery.event.add(context[j], "live." + liveConvert(type, selector), {
                            data: data,
                            selector: selector,
                            handler: fn,
                            origType: type,
                            origHandler: fn,
                            preType: preType
                        });
                    }
                } else {
                    context.unbind("live." + liveConvert(type, selector), fn);
                }
            }
            return this;
        };
    });
    function liveHandler(event) {
        var stop, maxLevel, related, match, handleObj, elem, j, i, l, data, close, namespace, ret, elems = [], selectors = [], events = jQuery._data(this, eventKey);
        if (typeof events === "function") {
            events = events.events;
        }
        if (event.liveFired === this || !events || !events.live || event.target.disabled || event.button && event.type === "click") {
            return;
        }
        if (event.namespace) {
            namespace = new RegExp("(^|\\.)" + event.namespace.split(".").join("\\.(?:.*\\.)?") + "(\\.|$)");
        }
        event.liveFired = this;
        var live = events.live.slice(0);
        for (j = 0; j < live.length; j++) {
            handleObj = live[j];
            if (handleObj.origType.replace(rnamespaces, "") === event.type) {
                selectors.push(handleObj.selector);
            } else {
                live.splice(j--, 1);
            }
        }
        match = jQuery(event.target).closest(selectors, event.currentTarget);
        for (i = 0, l = match.length; i < l; i++) {
            close = match[i];
            for (j = 0; j < live.length; j++) {
                handleObj = live[j];
                if (close.selector === handleObj.selector && (!namespace || namespace.test(handleObj.namespace))) {
                    elem = close.elem;
                    related = null;
                    if (handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave") {
                        event.type = handleObj.preType;
                        related = jQuery(event.relatedTarget).closest(handleObj.selector)[0];
                    }
                    if (!related || related !== elem) {
                        elems.push({
                            elem: elem,
                            handleObj: handleObj,
                            level: close.level
                        });
                    }
                }
            }
        }
        for (i = 0, l = elems.length; i < l; i++) {
            match = elems[i];
            if (maxLevel && match.level > maxLevel) {
                break;
            }
            event.currentTarget = match.elem;
            event.data = match.handleObj.data;
            event.handleObj = match.handleObj;
            ret = match.handleObj.origHandler.apply(match.elem, arguments);
            if (ret === false || event.isPropagationStopped()) {
                maxLevel = match.level;
                if (ret === false) {
                    stop = false;
                }
                if (event.isImmediatePropagationStopped()) {
                    break;
                }
            }
        }
        return stop;
    }
    function liveConvert(type, selector) {
        return (type && type !== "*" ? type + "." : "") + selector.replace(rperiod, "`").replace(rspace, "&");
    }
    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error").split(" "), function(i, name) {
        jQuery.fn[name] = function(data, fn) {
            if (fn == null) {
                fn = data;
                data = null;
            }
            return arguments.length > 0 ? this.bind(name, data, fn) : this.trigger(name);
        };
        if (jQuery.attrFn) {
            jQuery.attrFn[name] = true;
        }
    });
    (function() {
        var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, done = 0, toString = Object.prototype.toString, hasDuplicate = false, baseHasDuplicate = true;
        [ 0, 0 ].sort(function() {
            baseHasDuplicate = false;
            return 0;
        });
        var Sizzle = function(selector, context, results, seed) {
            results = results || [];
            context = context || document;
            var origContext = context;
            if (context.nodeType !== 1 && context.nodeType !== 9) {
                return [];
            }
            if (!selector || typeof selector !== "string") {
                return results;
            }
            var m, set, checkSet, extra, ret, cur, pop, i, prune = true, contextXML = Sizzle.isXML(context), parts = [], soFar = selector;
            do {
                chunker.exec("");
                m = chunker.exec(soFar);
                if (m) {
                    soFar = m[3];
                    parts.push(m[1]);
                    if (m[2]) {
                        extra = m[3];
                        break;
                    }
                }
            } while (m);
            if (parts.length > 1 && origPOS.exec(selector)) {
                if (parts.length === 2 && Expr.relative[parts[0]]) {
                    set = posProcess(parts[0] + parts[1], context);
                } else {
                    set = Expr.relative[parts[0]] ? [ context ] : Sizzle(parts.shift(), context);
                    while (parts.length) {
                        selector = parts.shift();
                        if (Expr.relative[selector]) {
                            selector += parts.shift();
                        }
                        set = posProcess(selector, set);
                    }
                }
            } else {
                if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                    ret = Sizzle.find(parts.shift(), context, contextXML);
                    context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
                }
                if (context) {
                    ret = seed ? {
                        expr: parts.pop(),
                        set: makeArray(seed)
                    } : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                    set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                    if (parts.length > 0) {
                        checkSet = makeArray(set);
                    } else {
                        prune = false;
                    }
                    while (parts.length) {
                        cur = parts.pop();
                        pop = cur;
                        if (!Expr.relative[cur]) {
                            cur = "";
                        } else {
                            pop = parts.pop();
                        }
                        if (pop == null) {
                            pop = context;
                        }
                        Expr.relative[cur](checkSet, pop, contextXML);
                    }
                } else {
                    checkSet = parts = [];
                }
            }
            if (!checkSet) {
                checkSet = set;
            }
            if (!checkSet) {
                Sizzle.error(cur || selector);
            }
            if (toString.call(checkSet) === "[object Array]") {
                if (!prune) {
                    results.push.apply(results, checkSet);
                } else if (context && context.nodeType === 1) {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i]))) {
                            results.push(set[i]);
                        }
                    }
                } else {
                    for (i = 0; checkSet[i] != null; i++) {
                        if (checkSet[i] && checkSet[i].nodeType === 1) {
                            results.push(set[i]);
                        }
                    }
                }
            } else {
                makeArray(checkSet, results);
            }
            if (extra) {
                Sizzle(extra, origContext, results, seed);
                Sizzle.uniqueSort(results);
            }
            return results;
        };
        Sizzle.uniqueSort = function(results) {
            if (sortOrder) {
                hasDuplicate = baseHasDuplicate;
                results.sort(sortOrder);
                if (hasDuplicate) {
                    for (var i = 1; i < results.length; i++) {
                        if (results[i] === results[i - 1]) {
                            results.splice(i--, 1);
                        }
                    }
                }
            }
            return results;
        };
        Sizzle.matches = function(expr, set) {
            return Sizzle(expr, null, null, set);
        };
        Sizzle.matchesSelector = function(node, expr) {
            return Sizzle(expr, null, null, [ node ]).length > 0;
        };
        Sizzle.find = function(expr, context, isXML) {
            var set;
            if (!expr) {
                return [];
            }
            for (var i = 0, l = Expr.order.length; i < l; i++) {
                var match, type = Expr.order[i];
                if (match = Expr.leftMatch[type].exec(expr)) {
                    var left = match[1];
                    match.splice(1, 1);
                    if (left.substr(left.length - 1) !== "\\") {
                        match[1] = (match[1] || "").replace(/\\/g, "");
                        set = Expr.find[type](match, context, isXML);
                        if (set != null) {
                            expr = expr.replace(Expr.match[type], "");
                            break;
                        }
                    }
                }
            }
            if (!set) {
                set = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName("*") : [];
            }
            return {
                set: set,
                expr: expr
            };
        };
        Sizzle.filter = function(expr, set, inplace, not) {
            var match, anyFound, old = expr, result = [], curLoop = set, isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);
            while (expr && set.length) {
                for (var type in Expr.filter) {
                    if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
                        var found, item, filter = Expr.filter[type], left = match[1];
                        anyFound = false;
                        match.splice(1, 1);
                        if (left.substr(left.length - 1) === "\\") {
                            continue;
                        }
                        if (curLoop === result) {
                            result = [];
                        }
                        if (Expr.preFilter[type]) {
                            match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                            if (!match) {
                                anyFound = found = true;
                            } else if (match === true) {
                                continue;
                            }
                        }
                        if (match) {
                            for (var i = 0; (item = curLoop[i]) != null; i++) {
                                if (item) {
                                    found = filter(item, match, i, curLoop);
                                    var pass = not ^ !!found;
                                    if (inplace && found != null) {
                                        if (pass) {
                                            anyFound = true;
                                        } else {
                                            curLoop[i] = false;
                                        }
                                    } else if (pass) {
                                        result.push(item);
                                        anyFound = true;
                                    }
                                }
                            }
                        }
                        if (found !== undefined) {
                            if (!inplace) {
                                curLoop = result;
                            }
                            expr = expr.replace(Expr.match[type], "");
                            if (!anyFound) {
                                return [];
                            }
                            break;
                        }
                    }
                }
                if (expr === old) {
                    if (anyFound == null) {
                        Sizzle.error(expr);
                    } else {
                        break;
                    }
                }
                old = expr;
            }
            return curLoop;
        };
        Sizzle.error = function(msg) {
            throw "Syntax error, unrecognized expression: " + msg;
        };
        var Expr = Sizzle.selectors = {
            order: [ "ID", "NAME", "TAG" ],
            match: {
                ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
            },
            leftMatch: {},
            attrMap: {
                class: "className",
                for: "htmlFor"
            },
            attrHandle: {
                href: function(elem) {
                    return elem.getAttribute("href");
                }
            },
            relative: {
                "+": function(checkSet, part) {
                    var isPartStr = typeof part === "string", isTag = isPartStr && !/\W/.test(part), isPartStrNotTag = isPartStr && !isTag;
                    if (isTag) {
                        part = part.toLowerCase();
                    }
                    for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                        if (elem = checkSet[i]) {
                            while ((elem = elem.previousSibling) && elem.nodeType !== 1) {}
                            checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part;
                        }
                    }
                    if (isPartStrNotTag) {
                        Sizzle.filter(part, checkSet, true);
                    }
                },
                ">": function(checkSet, part) {
                    var elem, isPartStr = typeof part === "string", i = 0, l = checkSet.length;
                    if (isPartStr && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        for (;i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                var parent = elem.parentNode;
                                checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
                            }
                        }
                    } else {
                        for (;i < l; i++) {
                            elem = checkSet[i];
                            if (elem) {
                                checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part;
                            }
                        }
                        if (isPartStr) {
                            Sizzle.filter(part, checkSet, true);
                        }
                    }
                },
                "": function(checkSet, part, isXML) {
                    var nodeCheck, doneName = done++, checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }
                    checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
                },
                "~": function(checkSet, part, isXML) {
                    var nodeCheck, doneName = done++, checkFn = dirCheck;
                    if (typeof part === "string" && !/\W/.test(part)) {
                        part = part.toLowerCase();
                        nodeCheck = part;
                        checkFn = dirNodeCheck;
                    }
                    checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
                }
            },
            find: {
                ID: function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m && m.parentNode ? [ m ] : [];
                    }
                },
                NAME: function(match, context) {
                    if (typeof context.getElementsByName !== "undefined") {
                        var ret = [], results = context.getElementsByName(match[1]);
                        for (var i = 0, l = results.length; i < l; i++) {
                            if (results[i].getAttribute("name") === match[1]) {
                                ret.push(results[i]);
                            }
                        }
                        return ret.length === 0 ? null : ret;
                    }
                },
                TAG: function(match, context) {
                    if (typeof context.getElementsByTagName !== "undefined") {
                        return context.getElementsByTagName(match[1]);
                    }
                }
            },
            preFilter: {
                CLASS: function(match, curLoop, inplace, result, not, isXML) {
                    match = " " + match[1].replace(/\\/g, "") + " ";
                    if (isXML) {
                        return match;
                    }
                    for (var i = 0, elem; (elem = curLoop[i]) != null; i++) {
                        if (elem) {
                            if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0)) {
                                if (!inplace) {
                                    result.push(elem);
                                }
                            } else if (inplace) {
                                curLoop[i] = false;
                            }
                        }
                    }
                    return false;
                },
                ID: function(match) {
                    return match[1].replace(/\\/g, "");
                },
                TAG: function(match, curLoop) {
                    return match[1].toLowerCase();
                },
                CHILD: function(match) {
                    if (match[1] === "nth") {
                        if (!match[2]) {
                            Sizzle.error(match[0]);
                        }
                        match[2] = match[2].replace(/^\+|\s*/g, "");
                        var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                        match[2] = test[1] + (test[2] || 1) - 0;
                        match[3] = test[3] - 0;
                    } else if (match[2]) {
                        Sizzle.error(match[0]);
                    }
                    match[0] = done++;
                    return match;
                },
                ATTR: function(match, curLoop, inplace, result, not, isXML) {
                    var name = match[1] = match[1].replace(/\\/g, "");
                    if (!isXML && Expr.attrMap[name]) {
                        match[1] = Expr.attrMap[name];
                    }
                    match[4] = (match[4] || match[5] || "").replace(/\\/g, "");
                    if (match[2] === "~=") {
                        match[4] = " " + match[4] + " ";
                    }
                    return match;
                },
                PSEUDO: function(match, curLoop, inplace, result, not) {
                    if (match[1] === "not") {
                        if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                            match[3] = Sizzle(match[3], null, null, curLoop);
                        } else {
                            var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                            if (!inplace) {
                                result.push.apply(result, ret);
                            }
                            return false;
                        }
                    } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                        return true;
                    }
                    return match;
                },
                POS: function(match) {
                    match.unshift(true);
                    return match;
                }
            },
            filters: {
                enabled: function(elem) {
                    return elem.disabled === false && elem.type !== "hidden";
                },
                disabled: function(elem) {
                    return elem.disabled === true;
                },
                checked: function(elem) {
                    return elem.checked === true;
                },
                selected: function(elem) {
                    elem.parentNode.selectedIndex;
                    return elem.selected === true;
                },
                parent: function(elem) {
                    return !!elem.firstChild;
                },
                empty: function(elem) {
                    return !elem.firstChild;
                },
                has: function(elem, i, match) {
                    return !!Sizzle(match[3], elem).length;
                },
                header: function(elem) {
                    return /h\d/i.test(elem.nodeName);
                },
                text: function(elem) {
                    return "text" === elem.type;
                },
                radio: function(elem) {
                    return "radio" === elem.type;
                },
                checkbox: function(elem) {
                    return "checkbox" === elem.type;
                },
                file: function(elem) {
                    return "file" === elem.type;
                },
                password: function(elem) {
                    return "password" === elem.type;
                },
                submit: function(elem) {
                    return "submit" === elem.type;
                },
                image: function(elem) {
                    return "image" === elem.type;
                },
                reset: function(elem) {
                    return "reset" === elem.type;
                },
                button: function(elem) {
                    return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
                },
                input: function(elem) {
                    return /input|select|textarea|button/i.test(elem.nodeName);
                }
            },
            setFilters: {
                first: function(elem, i) {
                    return i === 0;
                },
                last: function(elem, i, match, array) {
                    return i === array.length - 1;
                },
                even: function(elem, i) {
                    return i % 2 === 0;
                },
                odd: function(elem, i) {
                    return i % 2 === 1;
                },
                lt: function(elem, i, match) {
                    return i < match[3] - 0;
                },
                gt: function(elem, i, match) {
                    return i > match[3] - 0;
                },
                nth: function(elem, i, match) {
                    return match[3] - 0 === i;
                },
                eq: function(elem, i, match) {
                    return match[3] - 0 === i;
                }
            },
            filter: {
                PSEUDO: function(elem, match, i, array) {
                    var name = match[1], filter = Expr.filters[name];
                    if (filter) {
                        return filter(elem, i, match, array);
                    } else if (name === "contains") {
                        return (elem.textContent || elem.innerText || Sizzle.getText([ elem ]) || "").indexOf(match[3]) >= 0;
                    } else if (name === "not") {
                        var not = match[3];
                        for (var j = 0, l = not.length; j < l; j++) {
                            if (not[j] === elem) {
                                return false;
                            }
                        }
                        return true;
                    } else {
                        Sizzle.error(name);
                    }
                },
                CHILD: function(elem, match) {
                    var type = match[1], node = elem;
                    switch (type) {
                      case "only":
                      case "first":
                        while (node = node.previousSibling) {
                            if (node.nodeType === 1) {
                                return false;
                            }
                        }
                        if (type === "first") {
                            return true;
                        }
                        node = elem;

                      case "last":
                        while (node = node.nextSibling) {
                            if (node.nodeType === 1) {
                                return false;
                            }
                        }
                        return true;

                      case "nth":
                        var first = match[2], last = match[3];
                        if (first === 1 && last === 0) {
                            return true;
                        }
                        var doneName = match[0], parent = elem.parentNode;
                        if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                            var count = 0;
                            for (node = parent.firstChild; node; node = node.nextSibling) {
                                if (node.nodeType === 1) {
                                    node.nodeIndex = ++count;
                                }
                            }
                            parent.sizcache = doneName;
                        }
                        var diff = elem.nodeIndex - last;
                        if (first === 0) {
                            return diff === 0;
                        } else {
                            return diff % first === 0 && diff / first >= 0;
                        }
                    }
                },
                ID: function(elem, match) {
                    return elem.nodeType === 1 && elem.getAttribute("id") === match;
                },
                TAG: function(elem, match) {
                    return match === "*" && elem.nodeType === 1 || elem.nodeName.toLowerCase() === match;
                },
                CLASS: function(elem, match) {
                    return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
                },
                ATTR: function(elem, match) {
                    var name = match[1], result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name), value = result + "", type = match[2], check = match[4];
                    return result == null ? type === "!=" : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
                },
                POS: function(elem, match, i, array) {
                    var name = match[2], filter = Expr.setFilters[name];
                    if (filter) {
                        return filter(elem, i, match, array);
                    }
                }
            }
        };
        var origPOS = Expr.match.POS, fescape = function(all, num) {
            return "\\" + (num - 0 + 1);
        };
        for (var type in Expr.match) {
            Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
            Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, fescape));
        }
        var makeArray = function(array, results) {
            array = Array.prototype.slice.call(array, 0);
            if (results) {
                results.push.apply(results, array);
                return results;
            }
            return array;
        };
        try {
            Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;
        } catch (e) {
            makeArray = function(array, results) {
                var i = 0, ret = results || [];
                if (toString.call(array) === "[object Array]") {
                    Array.prototype.push.apply(ret, array);
                } else {
                    if (typeof array.length === "number") {
                        for (var l = array.length; i < l; i++) {
                            ret.push(array[i]);
                        }
                    } else {
                        for (;array[i]; i++) {
                            ret.push(array[i]);
                        }
                    }
                }
                return ret;
            };
        }
        var sortOrder, siblingCheck;
        if (document.documentElement.compareDocumentPosition) {
            sortOrder = function(a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                    return a.compareDocumentPosition ? -1 : 1;
                }
                return a.compareDocumentPosition(b) & 4 ? -1 : 1;
            };
        } else {
            sortOrder = function(a, b) {
                var al, bl, ap = [], bp = [], aup = a.parentNode, bup = b.parentNode, cur = aup;
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                } else if (!aup) {
                    return -1;
                } else if (!bup) {
                    return 1;
                }
                while (cur) {
                    ap.unshift(cur);
                    cur = cur.parentNode;
                }
                cur = bup;
                while (cur) {
                    bp.unshift(cur);
                    cur = cur.parentNode;
                }
                al = ap.length;
                bl = bp.length;
                for (var i = 0; i < al && i < bl; i++) {
                    if (ap[i] !== bp[i]) {
                        return siblingCheck(ap[i], bp[i]);
                    }
                }
                return i === al ? siblingCheck(a, bp[i], -1) : siblingCheck(ap[i], b, 1);
            };
            siblingCheck = function(a, b, ret) {
                if (a === b) {
                    return ret;
                }
                var cur = a.nextSibling;
                while (cur) {
                    if (cur === b) {
                        return -1;
                    }
                    cur = cur.nextSibling;
                }
                return 1;
            };
        }
        Sizzle.getText = function(elems) {
            var ret = "", elem;
            for (var i = 0; elems[i]; i++) {
                elem = elems[i];
                if (elem.nodeType === 3 || elem.nodeType === 4) {
                    ret += elem.nodeValue;
                } else if (elem.nodeType !== 8) {
                    ret += Sizzle.getText(elem.childNodes);
                }
            }
            return ret;
        };
        (function() {
            var form = document.createElement("div"), id = "script" + new Date().getTime(), root = document.documentElement;
            form.innerHTML = "<a name='" + id + "'/>";
            root.insertBefore(form, root.firstChild);
            if (document.getElementById(id)) {
                Expr.find.ID = function(match, context, isXML) {
                    if (typeof context.getElementById !== "undefined" && !isXML) {
                        var m = context.getElementById(match[1]);
                        return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [ m ] : undefined : [];
                    }
                };
                Expr.filter.ID = function(elem, match) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return elem.nodeType === 1 && node && node.nodeValue === match;
                };
            }
            root.removeChild(form);
            root = form = null;
        })();
        (function() {
            var div = document.createElement("div");
            div.appendChild(document.createComment(""));
            if (div.getElementsByTagName("*").length > 0) {
                Expr.find.TAG = function(match, context) {
                    var results = context.getElementsByTagName(match[1]);
                    if (match[1] === "*") {
                        var tmp = [];
                        for (var i = 0; results[i]; i++) {
                            if (results[i].nodeType === 1) {
                                tmp.push(results[i]);
                            }
                        }
                        results = tmp;
                    }
                    return results;
                };
            }
            div.innerHTML = "<a href='#'></a>";
            if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                Expr.attrHandle.href = function(elem) {
                    return elem.getAttribute("href", 2);
                };
            }
            div = null;
        })();
        if (document.querySelectorAll) {
            (function() {
                var oldSizzle = Sizzle, div = document.createElement("div"), id = "__sizzle__";
                div.innerHTML = "<p class='TEST'></p>";
                if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                    return;
                }
                Sizzle = function(query, context, extra, seed) {
                    context = context || document;
                    if (!seed && !Sizzle.isXML(context)) {
                        var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(query);
                        if (match && (context.nodeType === 1 || context.nodeType === 9)) {
                            if (match[1]) {
                                return makeArray(context.getElementsByTagName(query), extra);
                            } else if (match[2] && Expr.find.CLASS && context.getElementsByClassName) {
                                return makeArray(context.getElementsByClassName(match[2]), extra);
                            }
                        }
                        if (context.nodeType === 9) {
                            if (query === "body" && context.body) {
                                return makeArray([ context.body ], extra);
                            } else if (match && match[3]) {
                                var elem = context.getElementById(match[3]);
                                if (elem && elem.parentNode) {
                                    if (elem.id === match[3]) {
                                        return makeArray([ elem ], extra);
                                    }
                                } else {
                                    return makeArray([], extra);
                                }
                            }
                            try {
                                return makeArray(context.querySelectorAll(query), extra);
                            } catch (qsaError) {}
                        } else if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                            var old = context.getAttribute("id"), nid = old || id, hasParent = context.parentNode, relativeHierarchySelector = /^\s*[+~]/.test(query);
                            if (!old) {
                                context.setAttribute("id", nid);
                            } else {
                                nid = nid.replace(/'/g, "\\$&");
                            }
                            if (relativeHierarchySelector && hasParent) {
                                context = context.parentNode;
                            }
                            try {
                                if (!relativeHierarchySelector || hasParent) {
                                    return makeArray(context.querySelectorAll("[id='" + nid + "'] " + query), extra);
                                }
                            } catch (pseudoError) {} finally {
                                if (!old) {
                                    context.removeAttribute("id");
                                }
                            }
                        }
                    }
                    return oldSizzle(query, context, extra, seed);
                };
                for (var prop in oldSizzle) {
                    Sizzle[prop] = oldSizzle[prop];
                }
                div = null;
            })();
        }
        (function() {
            var html = document.documentElement, matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector, pseudoWorks = false;
            try {
                matches.call(document.documentElement, "[test!='']:sizzle");
            } catch (pseudoError) {
                pseudoWorks = true;
            }
            if (matches) {
                Sizzle.matchesSelector = function(node, expr) {
                    expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                    if (!Sizzle.isXML(node)) {
                        try {
                            if (pseudoWorks || !Expr.match.PSEUDO.test(expr) && !/!=/.test(expr)) {
                                return matches.call(node, expr);
                            }
                        } catch (e) {}
                    }
                    return Sizzle(expr, null, null, [ node ]).length > 0;
                };
            }
        })();
        (function() {
            var div = document.createElement("div");
            div.innerHTML = "<div class='test e'></div><div class='test'></div>";
            if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                return;
            }
            div.lastChild.className = "e";
            if (div.getElementsByClassName("e").length === 1) {
                return;
            }
            Expr.order.splice(1, 0, "CLASS");
            Expr.find.CLASS = function(match, context, isXML) {
                if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                    return context.getElementsByClassName(match[1]);
                }
            };
            div = null;
        })();
        function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }
                        if (elem.nodeType === 1 && !isXML) {
                            elem.sizcache = doneName;
                            elem.sizset = i;
                        }
                        if (elem.nodeName.toLowerCase() === cur) {
                            match = elem;
                            break;
                        }
                        elem = elem[dir];
                    }
                    checkSet[i] = match;
                }
            }
        }
        function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
            for (var i = 0, l = checkSet.length; i < l; i++) {
                var elem = checkSet[i];
                if (elem) {
                    var match = false;
                    elem = elem[dir];
                    while (elem) {
                        if (elem.sizcache === doneName) {
                            match = checkSet[elem.sizset];
                            break;
                        }
                        if (elem.nodeType === 1) {
                            if (!isXML) {
                                elem.sizcache = doneName;
                                elem.sizset = i;
                            }
                            if (typeof cur !== "string") {
                                if (elem === cur) {
                                    match = true;
                                    break;
                                }
                            } else if (Sizzle.filter(cur, [ elem ]).length > 0) {
                                match = elem;
                                break;
                            }
                        }
                        elem = elem[dir];
                    }
                    checkSet[i] = match;
                }
            }
        }
        if (document.documentElement.contains) {
            Sizzle.contains = function(a, b) {
                return a !== b && (a.contains ? a.contains(b) : true);
            };
        } else if (document.documentElement.compareDocumentPosition) {
            Sizzle.contains = function(a, b) {
                return !!(a.compareDocumentPosition(b) & 16);
            };
        } else {
            Sizzle.contains = function() {
                return false;
            };
        }
        Sizzle.isXML = function(elem) {
            var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false;
        };
        var posProcess = function(selector, context) {
            var match, tmpSet = [], later = "", root = context.nodeType ? [ context ] : context;
            while (match = Expr.match.PSEUDO.exec(selector)) {
                later += match[0];
                selector = selector.replace(Expr.match.PSEUDO, "");
            }
            selector = Expr.relative[selector] ? selector + "*" : selector;
            for (var i = 0, l = root.length; i < l; i++) {
                Sizzle(selector, root[i], tmpSet);
            }
            return Sizzle.filter(later, tmpSet);
        };
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.filters;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    })();
    var runtil = /Until$/, rparentsprev = /^(?:parents|prevUntil|prevAll)/, rmultiselector = /,/, isSimple = /^.[^:#\[\.,]*$/, slice = Array.prototype.slice, POS = jQuery.expr.match.POS, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        find: function(selector) {
            var ret = this.pushStack("", "find", selector), length = 0;
            for (var i = 0, l = this.length; i < l; i++) {
                length = ret.length;
                jQuery.find(selector, this[i], ret);
                if (i > 0) {
                    for (var n = length; n < ret.length; n++) {
                        for (var r = 0; r < length; r++) {
                            if (ret[r] === ret[n]) {
                                ret.splice(n--, 1);
                                break;
                            }
                        }
                    }
                }
            }
            return ret;
        },
        has: function(target) {
            var targets = jQuery(target);
            return this.filter(function() {
                for (var i = 0, l = targets.length; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector, false), "not", selector);
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector, true), "filter", selector);
        },
        is: function(selector) {
            return !!selector && jQuery.filter(selector, this).length > 0;
        },
        closest: function(selectors, context) {
            var ret = [], i, l, cur = this[0];
            if (jQuery.isArray(selectors)) {
                var match, selector, matches = {}, level = 1;
                if (cur && selectors.length) {
                    for (i = 0, l = selectors.length; i < l; i++) {
                        selector = selectors[i];
                        if (!matches[selector]) {
                            matches[selector] = jQuery.expr.match.POS.test(selector) ? jQuery(selector, context || this.context) : selector;
                        }
                    }
                    while (cur && cur.ownerDocument && cur !== context) {
                        for (selector in matches) {
                            match = matches[selector];
                            if (match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match)) {
                                ret.push({
                                    selector: selector,
                                    elem: cur,
                                    level: level
                                });
                            }
                        }
                        cur = cur.parentNode;
                        level++;
                    }
                }
                return ret;
            }
            var pos = POS.test(selectors) ? jQuery(selectors, context || this.context) : null;
            for (i = 0, l = this.length; i < l; i++) {
                cur = this[i];
                while (cur) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;
                    } else {
                        cur = cur.parentNode;
                        if (!cur || !cur.ownerDocument || cur === context) {
                            break;
                        }
                    }
                }
            }
            ret = ret.length > 1 ? jQuery.unique(ret) : ret;
            return this.pushStack(ret, "closest", selectors);
        },
        index: function(elem) {
            if (!elem || typeof elem === "string") {
                return jQuery.inArray(this[0], elem ? jQuery(elem) : this.parent().children());
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        add: function(selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all));
        },
        andSelf: function() {
            return this.add(this.prevObject);
        }
    });
    function isDisconnected(node) {
        return !node || !node.parentNode || node.parentNode.nodeType === 11;
    }
    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return jQuery.dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return jQuery.dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return jQuery.nth(elem, 2, "nextSibling");
        },
        prev: function(elem) {
            return jQuery.nth(elem, 2, "previousSibling");
        },
        nextAll: function(elem) {
            return jQuery.dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return jQuery.dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return jQuery.sibling(elem.parentNode.firstChild, elem);
        },
        children: function(elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function(elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.makeArray(elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var ret = jQuery.map(this, fn, until), args = slice.call(arguments);
            if (!runtil.test(name)) {
                selector = until;
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret);
            }
            ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
            if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                ret = ret.reverse();
            }
            return this.pushStack(ret, name, args.join(","));
        };
    });
    jQuery.extend({
        filter: function(expr, elems, not) {
            if (not) {
                expr = ":not(" + expr + ")";
            }
            return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] : jQuery.find.matches(expr, elems);
        },
        dir: function(elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        nth: function(cur, result, dir, elem) {
            result = result || 1;
            var num = 0;
            for (;cur; cur = cur[dir]) {
                if (cur.nodeType === 1 && ++num === result) {
                    break;
                }
            }
            return cur;
        },
        sibling: function(n, elem) {
            var r = [];
            for (;n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    function winnow(elements, qualifier, keep) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                var retVal = !!qualifier.call(elem, i, elem);
                return retVal === keep;
            });
        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem, i) {
                return elem === qualifier === keep;
            });
        } else if (typeof qualifier === "string") {
            var filtered = jQuery.grep(elements, function(elem) {
                return elem.nodeType === 1;
            });
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }
        return jQuery.grep(elements, function(elem, i) {
            return jQuery.inArray(elem, qualifier) >= 0 === keep;
        });
    }
    var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g, rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnocache = /<(?:script|object|embed|option|style)/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, wrapMap = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        legend: [ 1, "<fieldset>", "</fieldset>" ],
        thead: [ 1, "<table>", "</table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
        area: [ 1, "<map>", "</map>" ],
        _default: [ 0, "", "" ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    if (!jQuery.support.htmlSerialize) {
        wrapMap._default = [ 1, "div<div>", "</div>" ];
    }
    jQuery.fn.extend({
        text: function(text) {
            if (jQuery.isFunction(text)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self.text(text.call(this, i, self.text()));
                });
            }
            if (typeof text !== "object" && text !== undefined) {
                return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text));
            }
            return jQuery.text(this);
        },
        wrapAll: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function() {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function() {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function(html) {
            return this.each(function() {
                jQuery(this).wrapAll(html);
            });
        },
        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },
        append: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1) {
                    this.appendChild(elem);
                }
            });
        },
        prepend: function() {
            return this.domManip(arguments, true, function(elem) {
                if (this.nodeType === 1) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },
        before: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(elem) {
                    this.parentNode.insertBefore(elem, this);
                });
            } else if (arguments.length) {
                var set = jQuery(arguments[0]);
                set.push.apply(set, this.toArray());
                return this.pushStack(set, "before", arguments);
            }
        },
        after: function() {
            if (this[0] && this[0].parentNode) {
                return this.domManip(arguments, false, function(elem) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                });
            } else if (arguments.length) {
                var set = this.pushStack(this, "after", arguments);
                set.push.apply(set, jQuery(arguments[0]).toArray());
                return set;
            }
        },
        remove: function(selector, keepData) {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [ elem ]).length) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        jQuery.cleanData([ elem ]);
                    }
                    if (elem.parentNode) {
                        elem.parentNode.removeChild(elem);
                    }
                }
            }
            return this;
        },
        empty: function() {
            for (var i = 0, elem; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(elem.getElementsByTagName("*"));
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
            }
            return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? true : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function(value) {
            if (value === undefined) {
                return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(rinlinejQuery, "") : null;
            } else if (typeof value === "string" && !rnocache.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [ "", "" ])[1].toLowerCase()]) {
                value = value.replace(rxhtmlTag, "<$1></$2>");
                try {
                    for (var i = 0, l = this.length; i < l; i++) {
                        if (this[i].nodeType === 1) {
                            jQuery.cleanData(this[i].getElementsByTagName("*"));
                            this[i].innerHTML = value;
                        }
                    }
                } catch (e) {
                    this.empty().append(value);
                }
            } else if (jQuery.isFunction(value)) {
                this.each(function(i) {
                    var self = jQuery(this);
                    self.html(value.call(this, i, self.html()));
                });
            } else {
                this.empty().append(value);
            }
            return this;
        },
        replaceWith: function(value) {
            if (this[0] && this[0].parentNode) {
                if (jQuery.isFunction(value)) {
                    return this.each(function(i) {
                        var self = jQuery(this), old = self.html();
                        self.replaceWith(value.call(this, i, old));
                    });
                }
                if (typeof value !== "string") {
                    value = jQuery(value).detach();
                }
                return this.each(function() {
                    var next = this.nextSibling, parent = this.parentNode;
                    jQuery(this).remove();
                    if (next) {
                        jQuery(next).before(value);
                    } else {
                        jQuery(parent).append(value);
                    }
                });
            } else {
                return this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value);
            }
        },
        detach: function(selector) {
            return this.remove(selector, true);
        },
        domManip: function(args, table, callback) {
            var results, first, fragment, parent, value = args[0], scripts = [];
            if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                return this.each(function() {
                    jQuery(this).domManip(args, table, callback, true);
                });
            }
            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    args[0] = value.call(this, i, table ? self.html() : undefined);
                    self.domManip(args, table, callback);
                });
            }
            if (this[0]) {
                parent = value && value.parentNode;
                if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                    results = {
                        fragment: parent
                    };
                } else {
                    results = jQuery.buildFragment(args, this, scripts);
                }
                fragment = results.fragment;
                if (fragment.childNodes.length === 1) {
                    first = fragment = fragment.firstChild;
                } else {
                    first = fragment.firstChild;
                }
                if (first) {
                    table = table && jQuery.nodeName(first, "tr");
                    for (var i = 0, l = this.length, lastIndex = l - 1; i < l; i++) {
                        callback.call(table ? root(this[i], first) : this[i], results.cacheable || l > 1 && i < lastIndex ? jQuery.clone(fragment, true, true) : fragment);
                    }
                }
                if (scripts.length) {
                    jQuery.each(scripts, evalScript);
                }
            }
            return this;
        }
    });
    function root(elem, cur) {
        return jQuery.nodeName(elem, "table") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var internalKey = jQuery.expando, oldData = jQuery.data(src), curData = jQuery.data(dest, oldData);
        if (oldData = oldData[internalKey]) {
            var events = oldData.events;
            curData = curData[internalKey] = jQuery.extend({}, oldData);
            if (events) {
                delete curData.handle;
                curData.events = {};
                for (var type in events) {
                    for (var i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i], events[type][i].data);
                    }
                }
            }
        }
    }
    function cloneFixAttributes(src, dest) {
        if (dest.nodeType !== 1) {
            return;
        }
        var nodeName = dest.nodeName.toLowerCase();
        dest.clearAttributes();
        dest.mergeAttributes(src);
        if (nodeName === "object") {
            dest.outerHTML = src.outerHTML;
        } else if (nodeName === "input" && (src.type === "checkbox" || src.type === "radio")) {
            if (src.checked) {
                dest.defaultChecked = dest.checked = src.checked;
            }
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === "option") {
            dest.selected = src.defaultSelected;
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
        dest.removeAttribute(jQuery.expando);
    }
    jQuery.buildFragment = function(args, nodes, scripts) {
        var fragment, cacheable, cacheresults, doc = nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document;
        if (args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document && args[0].charAt(0) === "<" && !rnocache.test(args[0]) && (jQuery.support.checkClone || !rchecked.test(args[0]))) {
            cacheable = true;
            cacheresults = jQuery.fragments[args[0]];
            if (cacheresults) {
                if (cacheresults !== 1) {
                    fragment = cacheresults;
                }
            }
        }
        if (!fragment) {
            fragment = doc.createDocumentFragment();
            jQuery.clean(args, doc, fragment, scripts);
        }
        if (cacheable) {
            jQuery.fragments[args[0]] = cacheresults ? fragment : 1;
        }
        return {
            fragment: fragment,
            cacheable: cacheable
        };
    };
    jQuery.fragments = {};
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var ret = [], insert = jQuery(selector), parent = this.length === 1 && this[0].parentNode;
            if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                insert[original](this[0]);
                return this;
            } else {
                for (var i = 0, l = insert.length; i < l; i++) {
                    var elems = (i > 0 ? this.clone(true) : this).get();
                    jQuery(insert[i])[original](elems);
                    ret = ret.concat(elems);
                }
                return this.pushStack(ret, name, insert.selector);
            }
        };
    });
    jQuery.extend({
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var clone = elem.cloneNode(true), srcElements, destElements, i;
            if (!jQuery.support.noCloneEvent && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                srcElements = elem.getElementsByTagName("*");
                destElements = clone.getElementsByTagName("*");
                for (i = 0; srcElements[i]; ++i) {
                    cloneFixAttributes(srcElements[i], destElements[i]);
                }
                cloneFixAttributes(elem, clone);
            }
            if (dataAndEvents) {
                cloneCopyEvent(elem, clone);
                if (deepDataAndEvents && "getElementsByTagName" in elem) {
                    srcElements = elem.getElementsByTagName("*");
                    destElements = clone.getElementsByTagName("*");
                    if (srcElements.length) {
                        for (i = 0; srcElements[i]; ++i) {
                            cloneCopyEvent(srcElements[i], destElements[i]);
                        }
                    }
                }
            }
            return clone;
        },
        clean: function(elems, context, fragment, scripts) {
            context = context || document;
            if (typeof context.createElement === "undefined") {
                context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
            }
            var ret = [];
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (typeof elem === "number") {
                    elem += "";
                }
                if (!elem) {
                    continue;
                }
                if (typeof elem === "string" && !rhtml.test(elem)) {
                    elem = context.createTextNode(elem);
                } else if (typeof elem === "string") {
                    elem = elem.replace(rxhtmlTag, "<$1></$2>");
                    var tag = (rtagName.exec(elem) || [ "", "" ])[1].toLowerCase(), wrap = wrapMap[tag] || wrapMap._default, depth = wrap[0], div = context.createElement("div");
                    div.innerHTML = wrap[1] + elem + wrap[2];
                    while (depth--) {
                        div = div.lastChild;
                    }
                    if (!jQuery.support.tbody) {
                        var hasBody = rtbody.test(elem), tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                        for (var j = tbody.length - 1; j >= 0; --j) {
                            if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                tbody[j].parentNode.removeChild(tbody[j]);
                            }
                        }
                    }
                    if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                        div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                    }
                    elem = div.childNodes;
                }
                if (elem.nodeType) {
                    ret.push(elem);
                } else {
                    ret = jQuery.merge(ret, elem);
                }
            }
            if (fragment) {
                for (i = 0; ret[i]; i++) {
                    if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                        scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i]);
                    } else {
                        if (ret[i].nodeType === 1) {
                            ret.splice.apply(ret, [ i + 1, 0 ].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))));
                        }
                        fragment.appendChild(ret[i]);
                    }
                }
            }
            return ret;
        },
        cleanData: function(elems) {
            var data, id, cache = jQuery.cache, internalKey = jQuery.expando, special = jQuery.event.special, deleteExpando = jQuery.support.deleteExpando;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                    continue;
                }
                id = elem[jQuery.expando];
                if (id) {
                    data = cache[id] && cache[id][internalKey];
                    if (data && data.events) {
                        for (var type in data.events) {
                            if (special[type]) {
                                jQuery.event.remove(elem, type);
                            } else {
                                jQuery.removeEvent(elem, type, data.handle);
                            }
                        }
                        if (data.handle) {
                            data.handle.elem = null;
                        }
                    }
                    if (deleteExpando) {
                        delete elem[jQuery.expando];
                    } else if (elem.removeAttribute) {
                        elem.removeAttribute(jQuery.expando);
                    }
                    delete cache[id];
                }
            }
        }
    });
    function evalScript(i, elem) {
        if (elem.src) {
            jQuery.ajax({
                url: elem.src,
                async: false,
                dataType: "script"
            });
        } else {
            jQuery.globalEval(elem.text || elem.textContent || elem.innerHTML || "");
        }
        if (elem.parentNode) {
            elem.parentNode.removeChild(elem);
        }
    }
    var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity=([^)]*)/, rdashAlpha = /-([a-z])/gi, rupper = /([A-Z])/g, rnumpx = /^-?\d+(?:px)?$/i, rnum = /^-?\d/, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssWidth = [ "Left", "Right" ], cssHeight = [ "Top", "Bottom" ], curCSS, getComputedStyle, currentStyle, fcamelCase = function(all, letter) {
        return letter.toUpperCase();
    };
    jQuery.fn.css = function(name, value) {
        if (arguments.length === 2 && value === undefined) {
            return this;
        }
        return jQuery.access(this, name, value, true, function(elem, name, value) {
            return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
        });
    };
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity", "opacity");
                        return ret === "" ? "1" : ret;
                    } else {
                        return elem.style.opacity;
                    }
                }
            }
        },
        cssNumber: {
            zIndex: true,
            fontWeight: true,
            opacity: true,
            zoom: true,
            lineHeight: true
        },
        cssProps: {
            float: jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
        },
        style: function(elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, origName = jQuery.camelCase(name), style = elem.style, hooks = jQuery.cssHooks[origName];
            name = jQuery.cssProps[origName] || origName;
            if (value !== undefined) {
                if (typeof value === "number" && isNaN(value) || value == null) {
                    return;
                }
                if (typeof value === "number" && !jQuery.cssNumber[origName]) {
                    value += "px";
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {}
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function(elem, name, extra) {
            var ret, origName = jQuery.camelCase(name), hooks = jQuery.cssHooks[origName];
            name = jQuery.cssProps[origName] || origName;
            if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
                return ret;
            } else if (curCSS) {
                return curCSS(elem, name, origName);
            }
        },
        swap: function(elem, options, callback) {
            var old = {};
            for (var name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            callback.call(elem);
            for (name in options) {
                elem.style[name] = old[name];
            }
        },
        camelCase: function(string) {
            return string.replace(rdashAlpha, fcamelCase);
        }
    });
    jQuery.curCSS = jQuery.css;
    jQuery.each([ "height", "width" ], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                var val;
                if (computed) {
                    if (elem.offsetWidth !== 0) {
                        val = getWH(elem, name, extra);
                    } else {
                        jQuery.swap(elem, cssShow, function() {
                            val = getWH(elem, name, extra);
                        });
                    }
                    if (val <= 0) {
                        val = curCSS(elem, name, name);
                        if (val === "0px" && currentStyle) {
                            val = currentStyle(elem, name, name);
                        }
                        if (val != null) {
                            return val === "" || val === "auto" ? "0px" : val;
                        }
                    }
                    if (val < 0 || val == null) {
                        val = elem.style[name];
                        return val === "" || val === "auto" ? "0px" : val;
                    }
                    return typeof val === "string" ? val : val + "px";
                }
            },
            set: function(elem, value) {
                if (rnumpx.test(value)) {
                    value = parseFloat(value);
                    if (value >= 0) {
                        return value + "px";
                    }
                } else {
                    return value;
                }
            }
        };
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function(elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : computed ? "1" : "";
            },
            set: function(elem, value) {
                var style = elem.style;
                style.zoom = 1;
                var opacity = jQuery.isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")", filter = style.filter || "";
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : style.filter + " " + opacity;
            }
        };
    }
    if (document.defaultView && document.defaultView.getComputedStyle) {
        getComputedStyle = function(elem, newName, name) {
            var ret, defaultView, computedStyle;
            name = name.replace(rupper, "-$1").toLowerCase();
            if (!(defaultView = elem.ownerDocument.defaultView)) {
                return undefined;
            }
            if (computedStyle = defaultView.getComputedStyle(elem, null)) {
                ret = computedStyle.getPropertyValue(name);
                if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                    ret = jQuery.style(elem, name);
                }
            }
            return ret;
        };
    }
    if (document.documentElement.currentStyle) {
        currentStyle = function(elem, name) {
            var left, ret = elem.currentStyle && elem.currentStyle[name], rsLeft = elem.runtimeStyle && elem.runtimeStyle[name], style = elem.style;
            if (!rnumpx.test(ret) && rnum.test(ret)) {
                left = style.left;
                if (rsLeft) {
                    elem.runtimeStyle.left = elem.currentStyle.left;
                }
                style.left = name === "fontSize" ? "1em" : ret || 0;
                ret = style.pixelLeft + "px";
                style.left = left;
                if (rsLeft) {
                    elem.runtimeStyle.left = rsLeft;
                }
            }
            return ret === "" ? "auto" : ret;
        };
    }
    curCSS = getComputedStyle || currentStyle;
    function getWH(elem, name, extra) {
        var which = name === "width" ? cssWidth : cssHeight, val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
        if (extra === "border") {
            return val;
        }
        jQuery.each(which, function() {
            if (!extra) {
                val -= parseFloat(jQuery.css(elem, "padding" + this)) || 0;
            }
            if (extra === "margin") {
                val += parseFloat(jQuery.css(elem, "margin" + this)) || 0;
            } else {
                val -= parseFloat(jQuery.css(elem, "border" + this + "Width")) || 0;
            }
        });
        return val;
    }
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function(elem) {
            var width = elem.offsetWidth, height = elem.offsetHeight;
            return width === 0 && height === 0 || !jQuery.support.reliableHiddenOffsets && (elem.style.display || jQuery.css(elem, "display")) === "none";
        };
        jQuery.expr.filters.visible = function(elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rhash = /#.*$/, rheaders = /^(.*?):\s*(.*?)\r?$/gm, rinput = /^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rquery = /\?/, rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, rselectTextarea = /^(?:select|textarea)/i, rspacesAjax = /\s+/, rts = /([?&])_=[^&]*/, rurl = /^(\w+:)\/\/([^\/?#:]+)(?::(\d+))?/, _load = jQuery.fn.load, prefilters = {}, transports = {};
    function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
            if (jQuery.isFunction(func)) {
                var dataTypes = dataTypeExpression.toLowerCase().split(rspacesAjax), i = 0, length = dataTypes.length, dataType, list, placeBefore;
                for (;i < length; i++) {
                    dataType = dataTypes[i];
                    placeBefore = /^\+/.test(dataType);
                    if (placeBefore) {
                        dataType = dataType.substr(1) || "*";
                    }
                    list = structure[dataType] = structure[dataType] || [];
                    list[placeBefore ? "unshift" : "push"](func);
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jXHR, dataType, inspected) {
        dataType = dataType || options.dataTypes[0];
        inspected = inspected || {};
        inspected[dataType] = true;
        var list = structure[dataType], i = 0, length = list ? list.length : 0, executeOnly = structure === prefilters, selection;
        for (;i < length && (executeOnly || !selection); i++) {
            selection = list[i](options, originalOptions, jXHR);
            if (typeof selection === "string") {
                if (inspected[selection]) {
                    selection = undefined;
                } else {
                    options.dataTypes.unshift(selection);
                    selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jXHR, selection, inspected);
                }
            }
        }
        if ((executeOnly || !selection) && !inspected["*"]) {
            selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jXHR, "*", inspected);
        }
        return selection;
    }
    jQuery.fn.extend({
        load: function(url, params, callback) {
            if (typeof url !== "string" && _load) {
                return _load.apply(this, arguments);
            } else if (!this.length) {
                return this;
            }
            var off = url.indexOf(" ");
            if (off >= 0) {
                var selector = url.slice(off, url.length);
                url = url.slice(0, off);
            }
            var type = "GET";
            if (params) {
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = null;
                } else if (typeof params === "object") {
                    params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                    type = "POST";
                }
            }
            var self = this;
            jQuery.ajax({
                url: url,
                type: type,
                dataType: "html",
                data: params,
                complete: function(jXHR, status, responseText) {
                    responseText = jXHR.responseText;
                    if (jXHR.isResolved()) {
                        jXHR.done(function(r) {
                            responseText = r;
                        });
                        self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText);
                    }
                    if (callback) {
                        self.each(callback, [ responseText, status, jXHR ]);
                    }
                }
            });
            return this;
        },
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                return this.elements ? jQuery.makeArray(this.elements) : this;
            }).filter(function() {
                return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));
            }).map(function(i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val, i) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, "\r\n")
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, "\r\n")
                };
            }).get();
        }
    });
    jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(i, o) {
        jQuery.fn[o] = function(f) {
            return this.bind(o, f);
        };
    });
    jQuery.each([ "get", "post" ], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = null;
            }
            return jQuery.ajax({
                type: method,
                url: url,
                data: data,
                success: callback,
                dataType: type
            });
        };
    });
    jQuery.extend({
        getScript: function(url, callback) {
            return jQuery.get(url, null, callback, "script");
        },
        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },
        ajaxSetup: function(settings) {
            jQuery.extend(true, jQuery.ajaxSettings, settings);
            if (settings.context) {
                jQuery.ajaxSettings.context = settings.context;
            }
        },
        ajaxSettings: {
            url: location.href,
            global: true,
            type: "GET",
            contentType: "application/x-www-form-urlencoded",
            processData: true,
            async: true,
            accepts: {
                xml: "application/xml, text/xml",
                html: "text/html",
                text: "text/plain",
                json: "application/json, text/javascript",
                "*": "*/*"
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText"
            },
            converters: {
                "* text": window.String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            }
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
            if (typeof options !== "object") {
                options = url;
                url = undefined;
            }
            options = options || {};
            var s = jQuery.extend(true, {}, jQuery.ajaxSettings, options), callbackContext = (s.context = ("context" in options ? options : jQuery.ajaxSettings).context) || s, globalEventContext = callbackContext === s ? jQuery.event : jQuery(callbackContext), deferred = jQuery.Deferred(), completeDeferred = jQuery._Deferred(), statusCode = s.statusCode || {}, requestHeaders = {}, responseHeadersString, responseHeaders, transport, timeoutTimer, loc = document.location, protocol = loc.protocol || "http:", parts, state = 0, i, jXHR = {
                readyState: 0,
                setRequestHeader: function(name, value) {
                    if (state === 0) {
                        requestHeaders[name.toLowerCase()] = value;
                    }
                    return this;
                },
                getAllResponseHeaders: function() {
                    return state === 2 ? responseHeadersString : null;
                },
                getResponseHeader: function(key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while (match = rheaders.exec(responseHeadersString)) {
                                responseHeaders[match[1].toLowerCase()] = match[2];
                            }
                        }
                        match = responseHeaders[key.toLowerCase()];
                    }
                    return match || null;
                },
                abort: function(statusText) {
                    statusText = statusText || "abort";
                    if (transport) {
                        transport.abort(statusText);
                    }
                    done(0, statusText);
                    return this;
                }
            };
            function done(status, statusText, responses, headers) {
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jXHR.readyState = status ? 4 : 0;
                var isSuccess, success, error, response = responses ? ajaxHandleResponses(s, jXHR, responses) : undefined, lastModified, etag;
                if (status >= 200 && status < 300 || status === 304) {
                    if (s.ifModified) {
                        if (lastModified = jXHR.getResponseHeader("Last-Modified")) {
                            jQuery.lastModified[s.url] = lastModified;
                        }
                        if (etag = jXHR.getResponseHeader("Etag")) {
                            jQuery.etag[s.url] = etag;
                        }
                    }
                    if (status === 304) {
                        statusText = "notmodified";
                        isSuccess = true;
                    } else {
                        try {
                            success = ajaxConvert(s, response);
                            statusText = "success";
                            isSuccess = true;
                        } catch (e) {
                            statusText = "parsererror";
                            error = e;
                        }
                    }
                } else {
                    error = statusText;
                    if (status) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jXHR.status = status;
                jXHR.statusText = statusText;
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [ success, statusText, jXHR ]);
                } else {
                    deferred.rejectWith(callbackContext, [ jXHR, statusText, error ]);
                }
                jXHR.statusCode(statusCode);
                statusCode = undefined;
                if (s.global) {
                    globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [ jXHR, s, isSuccess ? success : error ]);
                }
                completeDeferred.resolveWith(callbackContext, [ jXHR, statusText ]);
                if (s.global) {
                    globalEventContext.trigger("ajaxComplete", [ jXHR, s ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
            deferred.promise(jXHR);
            jXHR.success = jXHR.done;
            jXHR.error = jXHR.fail;
            jXHR.complete = completeDeferred.done;
            jXHR.statusCode = function(map) {
                if (map) {
                    var tmp;
                    if (state < 2) {
                        for (tmp in map) {
                            statusCode[tmp] = [ statusCode[tmp], map[tmp] ];
                        }
                    } else {
                        tmp = map[jXHR.status];
                        jXHR.then(tmp, tmp);
                    }
                }
                return this;
            };
            s.url = ("" + (url || s.url)).replace(rhash, "").replace(rprotocol, protocol + "//");
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);
            if (!s.crossDomain) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] != protocol || parts[2] != loc.hostname || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (loc.port || (protocol === "http:" ? 80 : 443))));
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jXHR);
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            if (s.global && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }
            if (!s.hasContent) {
                if (s.data) {
                    s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
                }
                if (s.cache === false) {
                    var ts = jQuery.now(), ret = s.url.replace(rts, "$1_=" + ts);
                    s.url = ret + (ret === s.url ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                requestHeaders["content-type"] = s.contentType;
            }
            if (s.ifModified) {
                if (jQuery.lastModified[s.url]) {
                    requestHeaders["if-modified-since"] = jQuery.lastModified[s.url];
                }
                if (jQuery.etag[s.url]) {
                    requestHeaders["if-none-match"] = jQuery.etag[s.url];
                }
            }
            requestHeaders.accept = s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", */*; q=0.01" : "") : s.accepts["*"];
            for (i in s.headers) {
                requestHeaders[i.toLowerCase()] = s.headers[i];
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jXHR, s) === false || state === 2)) {
                done(0, "abort");
                jXHR = false;
            } else {
                for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                    jXHR[i](s[i]);
                }
                transport = inspectPrefiltersOrTransports(transports, s, options, jXHR);
                if (!transport) {
                    done(-1, "No Transport");
                } else {
                    state = jXHR.readyState = 1;
                    if (s.global) {
                        globalEventContext.trigger("ajaxSend", [ jXHR, s ]);
                    }
                    if (s.async && s.timeout > 0) {
                        timeoutTimer = setTimeout(function() {
                            jXHR.abort("timeout");
                        }, s.timeout);
                    }
                    try {
                        transport.send(requestHeaders, done);
                    } catch (e) {
                        if (status < 2) {
                            done(-1, e);
                        } else {
                            jQuery.error(e);
                        }
                    }
                }
            }
            return jXHR;
        },
        param: function(a, traditional) {
            var s = [], add = function(key, value) {
                value = jQuery.isFunction(value) ? value() : value;
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };
            if (traditional === undefined) {
                traditional = jQuery.ajaxSettings.traditional;
            }
            if (jQuery.isArray(a) || a.jquery) {
                jQuery.each(a, function() {
                    add(this.name, this.value);
                });
            } else {
                for (var prefix in a) {
                    buildParams(prefix, a[prefix], traditional, add);
                }
            }
            return s.join("&").replace(r20, "+");
        }
    });
    function buildParams(prefix, obj, traditional, add) {
        if (jQuery.isArray(obj) && obj.length) {
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i : "") + "]", v, traditional, add);
                }
            });
        } else if (!traditional && obj != null && typeof obj === "object") {
            if (jQuery.isArray(obj) || jQuery.isEmptyObject(obj)) {
                add(prefix, "");
            } else {
                jQuery.each(obj, function(k, v) {
                    buildParams(prefix + "[" + k + "]", v, traditional, add);
                });
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {}
    });
    function ajaxHandleResponses(s, jXHR, responses) {
        var contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields, ct, type, finalDataType, firstDataType;
        for (type in responseFields) {
            if (type in responses) {
                jXHR[responseFields[type]] = responses[type];
            }
        }
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = jXHR.getResponseHeader("content-type");
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response) {
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }
        var dataTypes = s.dataTypes, converters = s.converters, i, length = dataTypes.length, tmp, current = dataTypes[0], prev, conversion, conv, conv1, conv2;
        for (i = 1; i < length; i++) {
            prev = current;
            current = dataTypes[i];
            if (current === "*") {
                current = prev;
            } else if (prev !== "*" && prev !== current) {
                conversion = prev + " " + current;
                conv = converters[conversion] || converters["* " + current];
                if (!conv) {
                    conv2 = undefined;
                    for (conv1 in converters) {
                        tmp = conv1.split(" ");
                        if (tmp[0] === prev || tmp[0] === "*") {
                            conv2 = converters[tmp[1] + " " + current];
                            if (conv2) {
                                conv1 = converters[conv1];
                                if (conv1 === true) {
                                    conv = conv2;
                                } else if (conv2 === true) {
                                    conv = conv1;
                                }
                                break;
                            }
                        }
                    }
                }
                if (!(conv || conv2)) {
                    jQuery.error("No conversion from " + conversion.replace(" ", " to "));
                }
                if (conv !== true) {
                    response = conv ? conv(response) : conv2(conv1(response));
                }
            }
        }
        return response;
    }
    var jsc = jQuery.now(), jsre = /(\=)\?(&|$)|()\?\?()/i;
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            return jQuery.expando + "_" + jsc++;
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, dataIsString) {
        dataIsString = typeof s.data === "string";
        if (s.dataTypes[0] === "jsonp" || originalSettings.jsonpCallback || originalSettings.jsonp != null || s.jsonp !== false && (jsre.test(s.url) || dataIsString && jsre.test(s.data))) {
            var responseContainer, jsonpCallback = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, previous = window[jsonpCallback], url = s.url, data = s.data, replace = "$1" + jsonpCallback + "$2";
            if (s.jsonp !== false) {
                url = url.replace(jsre, replace);
                if (s.url === url) {
                    if (dataIsString) {
                        data = data.replace(jsre, replace);
                    }
                    if (s.data === data) {
                        url += (/\?/.test(url) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
                    }
                }
            }
            s.url = url;
            s.data = data;
            window[jsonpCallback] = function(response) {
                responseContainer = [ response ];
            };
            s.complete = [ function() {
                window[jsonpCallback] = previous;
                if (previous) {
                    if (responseContainer && jQuery.isFunction(previous)) {
                        window[jsonpCallback](responseContainer[0]);
                    }
                } else {
                    try {
                        delete window[jsonpCallback];
                    } catch (e) {}
                }
            }, s.complete ];
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(jsonpCallback + " was not called");
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = "json";
            return "script";
        }
    });
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript"
        },
        contents: {
            script: /javascript/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false;
        }
    });
    jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain) {
            var script, head = document.getElementsByTagName("head")[0] || document.documentElement;
            return {
                send: function(_, callback) {
                    script = document.createElement("script");
                    script.async = "async";
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function(_, isAbort) {
                        if (!script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (head && script.parentNode) {
                                head.removeChild(script);
                            }
                            script = undefined;
                            if (!isAbort) {
                                callback(200, "success");
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function() {
                    if (script) {
                        script.onload(0, 1);
                    }
                }
            };
        }
    });
    var xhrId = jQuery.now(), xhrs = {}, xhrUnloadAbortInstalled, testXHR;
    jQuery.ajaxSettings.xhr = window.ActiveXObject ? function() {
        if (window.location.protocol !== "file:") {
            try {
                return new window.XMLHttpRequest();
            } catch (xhrError) {}
        }
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP");
        } catch (activeError) {}
    } : function() {
        return new window.XMLHttpRequest();
    };
    try {
        testXHR = jQuery.ajaxSettings.xhr();
    } catch (xhrCreationException) {}
    jQuery.support.ajax = !!testXHR;
    jQuery.support.cors = testXHR && "withCredentials" in testXHR;
    testXHR = undefined;
    if (jQuery.support.ajax) {
        jQuery.ajaxTransport(function(s) {
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {
                    send: function(headers, complete) {
                        if (!xhrUnloadAbortInstalled) {
                            xhrUnloadAbortInstalled = 1;
                            jQuery(window).bind("unload", function() {
                                jQuery.each(xhrs, function(_, xhr) {
                                    if (xhr.onreadystatechange) {
                                        xhr.onreadystatechange(1);
                                    }
                                });
                            });
                        }
                        var xhr = s.xhr(), handle;
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }
                        if (!(s.crossDomain && !s.hasContent) && !headers["x-requested-with"]) {
                            headers["x-requested-with"] = "XMLHttpRequest";
                        }
                        try {
                            jQuery.each(headers, function(key, value) {
                                xhr.setRequestHeader(key, value);
                            });
                        } catch (_) {}
                        xhr.send(s.hasContent && s.data || null);
                        callback = function(_, isAbort) {
                            if (callback && (isAbort || xhr.readyState === 4)) {
                                callback = 0;
                                if (handle) {
                                    xhr.onreadystatechange = jQuery.noop;
                                    delete xhrs[handle];
                                }
                                if (isAbort) {
                                    if (xhr.readyState !== 4) {
                                        xhr.abort();
                                    }
                                } else {
                                    var status = xhr.status, statusText, responseHeaders = xhr.getAllResponseHeaders(), responses = {}, xml = xhr.responseXML;
                                    if (xml && xml.documentElement) {
                                        responses.xml = xml;
                                    }
                                    responses.text = xhr.responseText;
                                    try {
                                        statusText = xhr.statusText;
                                    } catch (e) {
                                        statusText = "";
                                    }
                                    status = status === 0 ? !s.crossDomain || statusText ? responseHeaders ? 304 : 0 : 302 : status == 1223 ? 204 : status;
                                    complete(status, statusText, responses, responseHeaders);
                                }
                            }
                        };
                        if (!s.async || xhr.readyState === 4) {
                            callback();
                        } else {
                            handle = xhrId++;
                            xhrs[handle] = xhr;
                            xhr.onreadystatechange = callback;
                        }
                    },
                    abort: function() {
                        if (callback) {
                            callback(0, 1);
                        }
                    }
                };
            }
        });
    }
    var elemdisplay = {}, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, timerId, fxAttrs = [ [ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ], [ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ], [ "opacity" ] ];
    jQuery.fn.extend({
        show: function(speed, easing, callback) {
            var elem, display;
            if (speed || speed === 0) {
                return this.animate(genFx("show", 3), speed, easing, callback);
            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    elem = this[i];
                    display = elem.style.display;
                    if (!jQuery._data(elem, "olddisplay") && display === "none") {
                        display = elem.style.display = "";
                    }
                    if (display === "" && jQuery.css(elem, "display") === "none") {
                        jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                    }
                }
                for (i = 0; i < j; i++) {
                    elem = this[i];
                    display = elem.style.display;
                    if (display === "" || display === "none") {
                        elem.style.display = jQuery._data(elem, "olddisplay") || "";
                    }
                }
                return this;
            }
        },
        hide: function(speed, easing, callback) {
            if (speed || speed === 0) {
                return this.animate(genFx("hide", 3), speed, easing, callback);
            } else {
                for (var i = 0, j = this.length; i < j; i++) {
                    var display = jQuery.css(this[i], "display");
                    if (display !== "none" && !jQuery._data(this[i], "olddisplay")) {
                        jQuery._data(this[i], "olddisplay", display);
                    }
                }
                for (i = 0; i < j; i++) {
                    this[i].style.display = "none";
                }
                return this;
            }
        },
        _toggle: jQuery.fn.toggle,
        toggle: function(fn, fn2, callback) {
            var bool = typeof fn === "boolean";
            if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                this._toggle.apply(this, arguments);
            } else if (fn == null || bool) {
                this.each(function() {
                    var state = bool ? fn : jQuery(this).is(":hidden");
                    jQuery(this)[state ? "show" : "hide"]();
                });
            } else {
                this.animate(genFx("toggle", 3), fn, fn2, callback);
            }
            return this;
        },
        fadeTo: function(speed, to, easing, callback) {
            return this.filter(":hidden").css("opacity", 0).show().end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var optall = jQuery.speed(speed, easing, callback);
            if (jQuery.isEmptyObject(prop)) {
                return this.each(optall.complete);
            }
            return this[optall.queue === false ? "each" : "queue"](function() {
                var opt = jQuery.extend({}, optall), p, isElement = this.nodeType === 1, hidden = isElement && jQuery(this).is(":hidden"), self = this;
                for (p in prop) {
                    var name = jQuery.camelCase(p);
                    if (p !== name) {
                        prop[name] = prop[p];
                        delete prop[p];
                        p = name;
                    }
                    if (prop[p] === "hide" && hidden || prop[p] === "show" && !hidden) {
                        return opt.complete.call(this);
                    }
                    if (isElement && (p === "height" || p === "width")) {
                        opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];
                        if (jQuery.css(this, "display") === "inline" && jQuery.css(this, "float") === "none") {
                            if (!jQuery.support.inlineBlockNeedsLayout) {
                                this.style.display = "inline-block";
                            } else {
                                var display = defaultDisplay(this.nodeName);
                                if (display === "inline") {
                                    this.style.display = "inline-block";
                                } else {
                                    this.style.display = "inline";
                                    this.style.zoom = 1;
                                }
                            }
                        }
                    }
                    if (jQuery.isArray(prop[p])) {
                        (opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
                        prop[p] = prop[p][0];
                    }
                }
                if (opt.overflow != null) {
                    this.style.overflow = "hidden";
                }
                opt.curAnim = jQuery.extend({}, prop);
                jQuery.each(prop, function(name, val) {
                    var e = new jQuery.fx(self, opt, name);
                    if (rfxtypes.test(val)) {
                        e[val === "toggle" ? hidden ? "show" : "hide" : val](prop);
                    } else {
                        var parts = rfxnum.exec(val), start = e.cur() || 0;
                        if (parts) {
                            var end = parseFloat(parts[2]), unit = parts[3] || "px";
                            if (unit !== "px") {
                                jQuery.style(self, name, (end || 1) + unit);
                                start = (end || 1) / e.cur() * start;
                                jQuery.style(self, name, start + unit);
                            }
                            if (parts[1]) {
                                end = (parts[1] === "-=" ? -1 : 1) * end + start;
                            }
                            e.custom(start, end, unit);
                        } else {
                            e.custom(start, val, "");
                        }
                    }
                });
                return true;
            });
        },
        stop: function(clearQueue, gotoEnd) {
            var timers = jQuery.timers;
            if (clearQueue) {
                this.queue([]);
            }
            this.each(function() {
                for (var i = timers.length - 1; i >= 0; i--) {
                    if (timers[i].elem === this) {
                        if (gotoEnd) {
                            timers[i](true);
                        }
                        timers.splice(i, 1);
                    }
                }
            });
            if (!gotoEnd) {
                this.dequeue();
            }
            return this;
        }
    });
    function genFx(type, num) {
        var obj = {};
        jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function() {
            obj[this] = type;
        });
        return obj;
    }
    jQuery.each({
        slideDown: genFx("show", 1),
        slideUp: genFx("hide", 1),
        slideToggle: genFx("toggle", 1),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.extend({
        speed: function(speed, easing, fn) {
            var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
            opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
            opt.old = opt.complete;
            opt.complete = function() {
                if (opt.queue !== false) {
                    jQuery(this).dequeue();
                }
                if (jQuery.isFunction(opt.old)) {
                    opt.old.call(this);
                }
            };
            return opt;
        },
        easing: {
            linear: function(p, n, firstNum, diff) {
                return firstNum + diff * p;
            },
            swing: function(p, n, firstNum, diff) {
                return (-Math.cos(p * Math.PI) / 2 + .5) * diff + firstNum;
            }
        },
        timers: [],
        fx: function(elem, options, prop) {
            this.options = options;
            this.elem = elem;
            this.prop = prop;
            if (!options.orig) {
                options.orig = {};
            }
        }
    });
    jQuery.fx.prototype = {
        update: function() {
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            (jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
        },
        cur: function() {
            if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                return this.elem[this.prop];
            }
            var r = parseFloat(jQuery.css(this.elem, this.prop));
            return r || 0;
        },
        custom: function(from, to, unit) {
            var self = this, fx = jQuery.fx;
            this.startTime = jQuery.now();
            this.start = from;
            this.end = to;
            this.unit = unit || this.unit || "px";
            this.now = this.start;
            this.pos = this.state = 0;
            function t(gotoEnd) {
                return self.step(gotoEnd);
            }
            t.elem = this.elem;
            if (t() && jQuery.timers.push(t) && !timerId) {
                timerId = setInterval(fx.tick, fx.interval);
            }
        },
        show: function() {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.show = true;
            this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
            jQuery(this.elem).show();
        },
        hide: function() {
            this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
            this.options.hide = true;
            this.custom(this.cur(), 0);
        },
        step: function(gotoEnd) {
            var t = jQuery.now(), done = true;
            if (gotoEnd || t >= this.options.duration + this.startTime) {
                this.now = this.end;
                this.pos = this.state = 1;
                this.update();
                this.options.curAnim[this.prop] = true;
                for (var i in this.options.curAnim) {
                    if (this.options.curAnim[i] !== true) {
                        done = false;
                    }
                }
                if (done) {
                    if (this.options.overflow != null && !jQuery.support.shrinkWrapBlocks) {
                        var elem = this.elem, options = this.options;
                        jQuery.each([ "", "X", "Y" ], function(index, value) {
                            elem.style["overflow" + value] = options.overflow[index];
                        });
                    }
                    if (this.options.hide) {
                        jQuery(this.elem).hide();
                    }
                    if (this.options.hide || this.options.show) {
                        for (var p in this.options.curAnim) {
                            jQuery.style(this.elem, p, this.options.orig[p]);
                        }
                    }
                    this.options.complete.call(this.elem);
                }
                return false;
            } else {
                var n = t - this.startTime;
                this.state = n / this.options.duration;
                var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
                var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
                this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
                this.now = this.start + (this.end - this.start) * this.pos;
                this.update();
            }
            return true;
        }
    };
    jQuery.extend(jQuery.fx, {
        tick: function() {
            var timers = jQuery.timers;
            for (var i = 0; i < timers.length; i++) {
                if (!timers[i]()) {
                    timers.splice(i--, 1);
                }
            }
            if (!timers.length) {
                jQuery.fx.stop();
            }
        },
        interval: 13,
        stop: function() {
            clearInterval(timerId);
            timerId = null;
        },
        speeds: {
            slow: 600,
            fast: 200,
            _default: 400
        },
        step: {
            opacity: function(fx) {
                jQuery.style(fx.elem, "opacity", fx.now);
            },
            _default: function(fx) {
                if (fx.elem.style && fx.elem.style[fx.prop] != null) {
                    fx.elem.style[fx.prop] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;
                } else {
                    fx.elem[fx.prop] = fx.now;
                }
            }
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function(elem) {
            return jQuery.grep(jQuery.timers, function(fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    function defaultDisplay(nodeName) {
        if (!elemdisplay[nodeName]) {
            var elem = jQuery("<" + nodeName + ">").appendTo("body"), display = elem.css("display");
            elem.remove();
            if (display === "none" || display === "") {
                display = "block";
            }
            elemdisplay[nodeName] = display;
        }
        return elemdisplay[nodeName];
    }
    var rtable = /^t(?:able|d|h)$/i, rroot = /^(?:body|html)$/i;
    if ("getBoundingClientRect" in document.documentElement) {
        jQuery.fn.offset = function(options) {
            var elem = this[0], box;
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem);
            }
            try {
                box = elem.getBoundingClientRect();
            } catch (e) {}
            var doc = elem.ownerDocument, docElem = doc.documentElement;
            if (!box || !jQuery.contains(docElem, elem)) {
                return box ? {
                    top: box.top,
                    left: box.left
                } : {
                    top: 0,
                    left: 0
                };
            }
            var body = doc.body, win = getWindow(doc), clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, scrollTop = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft;
            return {
                top: top,
                left: left
            };
        };
    } else {
        jQuery.fn.offset = function(options) {
            var elem = this[0];
            if (options) {
                return this.each(function(i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            if (!elem || !elem.ownerDocument) {
                return null;
            }
            if (elem === elem.ownerDocument.body) {
                return jQuery.offset.bodyOffset(elem);
            }
            jQuery.offset.initialize();
            var computedStyle, offsetParent = elem.offsetParent, prevOffsetParent = elem, doc = elem.ownerDocument, docElem = doc.documentElement, body = doc.body, defaultView = doc.defaultView, prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle, top = elem.offsetTop, left = elem.offsetLeft;
            while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                    break;
                }
                computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                top -= elem.scrollTop;
                left -= elem.scrollLeft;
                if (elem === offsetParent) {
                    top += elem.offsetTop;
                    left += elem.offsetLeft;
                    if (jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
                        top += parseFloat(computedStyle.borderTopWidth) || 0;
                        left += parseFloat(computedStyle.borderLeftWidth) || 0;
                    }
                    prevOffsetParent = offsetParent;
                    offsetParent = elem.offsetParent;
                }
                if (jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                    top += parseFloat(computedStyle.borderTopWidth) || 0;
                    left += parseFloat(computedStyle.borderLeftWidth) || 0;
                }
                prevComputedStyle = computedStyle;
            }
            if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                top += body.offsetTop;
                left += body.offsetLeft;
            }
            if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                top += Math.max(docElem.scrollTop, body.scrollTop);
                left += Math.max(docElem.scrollLeft, body.scrollLeft);
            }
            return {
                top: top,
                left: left
            };
        };
    }
    jQuery.offset = {
        initialize: function() {
            var body = document.body, container = document.createElement("div"), innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat(jQuery.css(body, "marginTop")) || 0, html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
            jQuery.extend(container.style, {
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                border: 0,
                width: "1px",
                height: "1px",
                visibility: "hidden"
            });
            container.innerHTML = html;
            body.insertBefore(container, body.firstChild);
            innerDiv = container.firstChild;
            checkDiv = innerDiv.firstChild;
            td = innerDiv.nextSibling.firstChild.firstChild;
            this.doesNotAddBorder = checkDiv.offsetTop !== 5;
            this.doesAddBorderForTableAndCells = td.offsetTop === 5;
            checkDiv.style.position = "fixed";
            checkDiv.style.top = "20px";
            this.supportsFixedPosition = checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15;
            checkDiv.style.position = checkDiv.style.top = "";
            innerDiv.style.overflow = "hidden";
            innerDiv.style.position = "relative";
            this.subtractsBorderForOverflowNotVisible = checkDiv.offsetTop === -5;
            this.doesNotIncludeMarginInBodyOffset = body.offsetTop !== bodyMarginTop;
            body.removeChild(container);
            body = container = innerDiv = checkDiv = table = td = null;
            jQuery.offset.initialize = jQuery.noop;
        },
        bodyOffset: function(body) {
            var top = body.offsetTop, left = body.offsetLeft;
            jQuery.offset.initialize();
            if (jQuery.offset.doesNotIncludeMarginInBodyOffset) {
                top += parseFloat(jQuery.css(body, "marginTop")) || 0;
                left += parseFloat(jQuery.css(body, "marginLeft")) || 0;
            }
            return {
                top: top,
                left: left
            };
        },
        setOffset: function(elem, options, i) {
            var position = jQuery.css(elem, "position");
            if (position === "static") {
                elem.style.position = "relative";
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = position === "absolute" && jQuery.inArray("auto", [ curCSSTop, curCSSLeft ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position();
            }
            curTop = calculatePosition ? curPosition.top : parseInt(curCSSTop, 10) || 0;
            curLeft = calculatePosition ? curPosition.left : parseInt(curCSSLeft, 10) || 0;
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ("using" in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        position: function() {
            if (!this[0]) {
                return null;
            }
            var elem = this[0], offsetParent = this.offsetParent(), offset = this.offset(), parentOffset = rroot.test(offsetParent[0].nodeName) ? {
                top: 0,
                left: 0
            } : offsetParent.offset();
            offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
            offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
            parentOffset.top += parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0;
            parentOffset.left += parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0;
            return {
                top: offset.top - parentOffset.top,
                left: offset.left - parentOffset.left
            };
        },
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || document.body;
                while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent;
            });
        }
    });
    jQuery.each([ "Left", "Top" ], function(i, name) {
        var method = "scroll" + name;
        jQuery.fn[method] = function(val) {
            var elem = this[0], win;
            if (!elem) {
                return null;
            }
            if (val !== undefined) {
                return this.each(function() {
                    win = getWindow(this);
                    if (win) {
                        win.scrollTo(!i ? val : jQuery(win).scrollLeft(), i ? val : jQuery(win).scrollTop());
                    } else {
                        this[method] = val;
                    }
                });
            } else {
                win = getWindow(elem);
                return win ? "pageXOffset" in win ? win[i ? "pageYOffset" : "pageXOffset"] : jQuery.support.boxModel && win.document.documentElement[method] || win.document.body[method] : elem[method];
            }
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.each([ "Height", "Width" ], function(i, name) {
        var type = name.toLowerCase();
        jQuery.fn["inner" + name] = function() {
            return this[0] ? parseFloat(jQuery.css(this[0], type, "padding")) : null;
        };
        jQuery.fn["outer" + name] = function(margin) {
            return this[0] ? parseFloat(jQuery.css(this[0], type, margin ? "margin" : "border")) : null;
        };
        jQuery.fn[type] = function(size) {
            var elem = this[0];
            if (!elem) {
                return size == null ? null : this;
            }
            if (jQuery.isFunction(size)) {
                return this.each(function(i) {
                    var self = jQuery(this);
                    self[type](size.call(this, i, self[type]()));
                });
            }
            if (jQuery.isWindow(elem)) {
                var docElemProp = elem.document.documentElement["client" + name];
                return elem.document.compatMode === "CSS1Compat" && docElemProp || elem.document.body["client" + name] || docElemProp;
            } else if (elem.nodeType === 9) {
                return Math.max(elem.documentElement["client" + name], elem.body["scroll" + name], elem.documentElement["scroll" + name], elem.body["offset" + name], elem.documentElement["offset" + name]);
            } else if (size === undefined) {
                var orig = jQuery.css(elem, type), ret = parseFloat(orig);
                return jQuery.isNaN(ret) ? orig : ret;
            } else {
                return this.css(type, typeof size === "string" ? size : size + "px");
            }
        };
    });
})(window);

$(document).ready(function() {
    $("#status_button").click(function() {
        alert("should edit");
    });
    $("#status_button_cancel").click(function() {
        alert("Should cancel");
    });
});

function status_count() {
    var text_limit = 140;
    var text = $("#status").val();
    if (typeof text == "undefined") var text = $("#box_status").val();
    var text_length = text.length;
    if (text_length > text_limit) $("#status").val(text.substr(0, text_limit)); else $("#status_count").html(text_limit - text_length);
}

function status_slide() {
    if ($("#status_archive").is(":hidden")) {
        $("#status_archive").slideDown("slow");
        $("#status_archive_click").html("-");
    } else {
        $("#status_archive").slideUp("slow");
        $("#status_archive_click").html("+");
    }
}

function status_pedit() {
    var current = $("#current_status").html();
    $("#current_holder").hide();
    $("#status").val("").val(current).focus();
    $("#status").after("<div id='status_buttons'><input type='button' onclick='status_edit()' value='Edit' /><input type='button' onclick='status_cancel()' value='Cancel' /></div>");
    status_count();
}

function status_edit() {
    var status = $("#status").val();
    $.post("ajax.status.php", {
        action: "edit",
        ss: status
    }, function(data) {
        if (data.status) {
            $("#status_buttons").fadeOut().remove();
            $("#status").val("");
            $("#current_status").empty().html(data.msg);
            $("#current_holder").fadeIn();
            status_count();
        } else alert(data.msg);
    }, "json");
}

function status_showbox(text) {
    if (typeof text == "undefined") var text = "";
    var status_box = "<div id='status_box' style='display:none;'><div id='status_title' >Status update</div><div id='status_content'><textarea name='status' id='box_status' onkeyup='status_count()' cols='50' style='width:50%;'rows='4'>" + text + "</textarea><br><div style='text-align:right;'><input type='button' value='Update' onclick='status_update()' /><input type='button' value='Cancel' onclick='status_distroy_box()'/></div></div><div id='status_tool'><div style='float:left;'>NO bbcode or html allowed</div><div style='float:right;' id='status_count'>140</div><div style='clear:both;'></div></div>";
    $("body").after(status_box);
    $("#status_box").css("top", $(window).height() / 2 - $("#status_box").height() / 2);
    $("#status_box").css("left", $(window).width() / 2 - $("#status_box").width() / 2);
    $("#status_box").fadeIn("slow");
}

function status_distroy_box() {
    $("#status_box").fadeOut("slow").remove();
}

function status_update(u) {
    var status = $("#box_status").val();
    if (status.length > 0) {
        $.post("ajax.status.php", {
            action: "new",
            ss: status
        }, function(data) {
            if (data.status) {
                $("#status_content").empty();
                $("#status_tool").remove();
                $("#status_content").html(data.msg);
                window.setTimeout(function() {
                    status_distroy_box();
                }, 1e3);
            } else alert(data.msg);
        }, "json");
    }
}

function status_cancel() {
    $("#status").val("");
    $("#status_buttons").fadeOut().remove();
    $("#current_holder").fadeIn();
    status_count();
}

function status_delete(id) {
    if (confirm("Are you sure you want to do this ?")) {
        $.post("ajax.status.php", {
            action: "delete",
            id: id
        }, function(data) {
            if (data.status) {
                $("#status_" + id).fadeOut();
            } else alert(data.msg);
        }, "json");
    }
}

(function($) {
    $.cookie = function(key, value, options) {
        if (arguments.length > 1 && (!/Object/.test(Object.prototype.toString.call(value)) || value === null || value === undefined)) {
            options = $.extend({}, options);
            if (value === null || value === undefined) {
                options.expires = -1;
            }
            if (typeof options.expires === "number") {
                var days = options.expires, t = options.expires = new Date();
                t.setDate(t.getDate() + days);
            }
            value = String(value);
            return document.cookie = [ encodeURIComponent(key), "=", options.raw ? value : encodeURIComponent(value), options.expires ? "; expires=" + options.expires.toUTCString() : "", options.path ? "; path=" + options.path : "", options.domain ? "; domain=" + options.domain : "", options.secure ? "; secure" : "" ].join("");
        }
        options = value || {};
        var decode = options.raw ? function(s) {
            return s;
        } : decodeURIComponent;
        var pairs = document.cookie.split("; ");
        for (var i = 0, pair; pair = pairs[i] && pairs[i].split("="); i++) {
            if (decode(pair[0]) === key) return decode(pair[1] || "");
        }
        return null;
    };
})(jQuery);

(function(a) {
    function b(a, b) {
        var c = (a & 65535) + (b & 65535), d = (a >> 16) + (b >> 16) + (c >> 16);
        return d << 16 | c & 65535;
    }
    function c(a, b) {
        return a << b | a >>> 32 - b;
    }
    function d(a, d, e, f, g, h) {
        return b(c(b(b(d, a), b(f, h)), g), e);
    }
    function e(a, b, c, e, f, g, h) {
        return d(b & c | ~b & e, a, b, f, g, h);
    }
    function f(a, b, c, e, f, g, h) {
        return d(b & e | c & ~e, a, b, f, g, h);
    }
    function g(a, b, c, e, f, g, h) {
        return d(b ^ c ^ e, a, b, f, g, h);
    }
    function h(a, b, c, e, f, g, h) {
        return d(c ^ (b | ~e), a, b, f, g, h);
    }
    function i(a, c) {
        a[c >> 5] |= 128 << c % 32, a[(c + 64 >>> 9 << 4) + 14] = c;
        var d, i, j, k, l, m = 1732584193, n = -271733879, o = -1732584194, p = 271733878;
        for (d = 0; d < a.length; d += 16) i = m, j = n, k = o, l = p, m = e(m, n, o, p, a[d], 7, -680876936), 
        p = e(p, m, n, o, a[d + 1], 12, -389564586), o = e(o, p, m, n, a[d + 2], 17, 606105819), 
        n = e(n, o, p, m, a[d + 3], 22, -1044525330), m = e(m, n, o, p, a[d + 4], 7, -176418897), 
        p = e(p, m, n, o, a[d + 5], 12, 1200080426), o = e(o, p, m, n, a[d + 6], 17, -1473231341), 
        n = e(n, o, p, m, a[d + 7], 22, -45705983), m = e(m, n, o, p, a[d + 8], 7, 1770035416), 
        p = e(p, m, n, o, a[d + 9], 12, -1958414417), o = e(o, p, m, n, a[d + 10], 17, -42063), 
        n = e(n, o, p, m, a[d + 11], 22, -1990404162), m = e(m, n, o, p, a[d + 12], 7, 1804603682), 
        p = e(p, m, n, o, a[d + 13], 12, -40341101), o = e(o, p, m, n, a[d + 14], 17, -1502002290), 
        n = e(n, o, p, m, a[d + 15], 22, 1236535329), m = f(m, n, o, p, a[d + 1], 5, -165796510), 
        p = f(p, m, n, o, a[d + 6], 9, -1069501632), o = f(o, p, m, n, a[d + 11], 14, 643717713), 
        n = f(n, o, p, m, a[d], 20, -373897302), m = f(m, n, o, p, a[d + 5], 5, -701558691), 
        p = f(p, m, n, o, a[d + 10], 9, 38016083), o = f(o, p, m, n, a[d + 15], 14, -660478335), 
        n = f(n, o, p, m, a[d + 4], 20, -405537848), m = f(m, n, o, p, a[d + 9], 5, 568446438), 
        p = f(p, m, n, o, a[d + 14], 9, -1019803690), o = f(o, p, m, n, a[d + 3], 14, -187363961), 
        n = f(n, o, p, m, a[d + 8], 20, 1163531501), m = f(m, n, o, p, a[d + 13], 5, -1444681467), 
        p = f(p, m, n, o, a[d + 2], 9, -51403784), o = f(o, p, m, n, a[d + 7], 14, 1735328473), 
        n = f(n, o, p, m, a[d + 12], 20, -1926607734), m = g(m, n, o, p, a[d + 5], 4, -378558), 
        p = g(p, m, n, o, a[d + 8], 11, -2022574463), o = g(o, p, m, n, a[d + 11], 16, 1839030562), 
        n = g(n, o, p, m, a[d + 14], 23, -35309556), m = g(m, n, o, p, a[d + 1], 4, -1530992060), 
        p = g(p, m, n, o, a[d + 4], 11, 1272893353), o = g(o, p, m, n, a[d + 7], 16, -155497632), 
        n = g(n, o, p, m, a[d + 10], 23, -1094730640), m = g(m, n, o, p, a[d + 13], 4, 681279174), 
        p = g(p, m, n, o, a[d], 11, -358537222), o = g(o, p, m, n, a[d + 3], 16, -722521979), 
        n = g(n, o, p, m, a[d + 6], 23, 76029189), m = g(m, n, o, p, a[d + 9], 4, -640364487), 
        p = g(p, m, n, o, a[d + 12], 11, -421815835), o = g(o, p, m, n, a[d + 15], 16, 530742520), 
        n = g(n, o, p, m, a[d + 2], 23, -995338651), m = h(m, n, o, p, a[d], 6, -198630844), 
        p = h(p, m, n, o, a[d + 7], 10, 1126891415), o = h(o, p, m, n, a[d + 14], 15, -1416354905), 
        n = h(n, o, p, m, a[d + 5], 21, -57434055), m = h(m, n, o, p, a[d + 12], 6, 1700485571), 
        p = h(p, m, n, o, a[d + 3], 10, -1894986606), o = h(o, p, m, n, a[d + 10], 15, -1051523), 
        n = h(n, o, p, m, a[d + 1], 21, -2054922799), m = h(m, n, o, p, a[d + 8], 6, 1873313359), 
        p = h(p, m, n, o, a[d + 15], 10, -30611744), o = h(o, p, m, n, a[d + 6], 15, -1560198380), 
        n = h(n, o, p, m, a[d + 13], 21, 1309151649), m = h(m, n, o, p, a[d + 4], 6, -145523070), 
        p = h(p, m, n, o, a[d + 11], 10, -1120210379), o = h(o, p, m, n, a[d + 2], 15, 718787259), 
        n = h(n, o, p, m, a[d + 9], 21, -343485551), m = b(m, i), n = b(n, j), o = b(o, k), 
        p = b(p, l);
        return [ m, n, o, p ];
    }
    function j(a) {
        var b, c = "";
        for (b = 0; b < a.length * 32; b += 8) c += String.fromCharCode(a[b >> 5] >>> b % 32 & 255);
        return c;
    }
    function k(a) {
        var b, c = [];
        c[(a.length >> 2) - 1] = undefined;
        for (b = 0; b < c.length; b += 1) c[b] = 0;
        for (b = 0; b < a.length * 8; b += 8) c[b >> 5] |= (a.charCodeAt(b / 8) & 255) << b % 32;
        return c;
    }
    function l(a) {
        return j(i(k(a), a.length * 8));
    }
    function m(a, b) {
        var c, d = k(a), e = [], f = [], g;
        e[15] = f[15] = undefined, d.length > 16 && (d = i(d, a.length * 8));
        for (c = 0; c < 16; c += 1) e[c] = d[c] ^ 909522486, f[c] = d[c] ^ 1549556828;
        return g = i(e.concat(k(b)), 512 + b.length * 8), j(i(f.concat(g), 640));
    }
    function n(a) {
        var b = "0123456789abcdef", c = "", d, e;
        for (e = 0; e < a.length; e += 1) d = a.charCodeAt(e), c += b.charAt(d >>> 4 & 15) + b.charAt(d & 15);
        return c;
    }
    function o(a) {
        return unescape(encodeURIComponent(a));
    }
    function p(a) {
        return l(o(a));
    }
    function q(a) {
        return n(p(a));
    }
    function r(a, b) {
        return m(o(a), o(b));
    }
    function s(a, b) {
        return n(r(a, b));
    }
    function t(a, b, c) {
        return b ? c ? r(b, a) : s(b, a) : c ? p(a) : q(a);
    }
    "use strict", typeof define == "function" && define.amd ? define(function() {
        return t;
    }) : a.help = t;
})(this);

$(function() {
    $.fn.like232 = function(ex) {
        var ob = {
            agent: navigator.userAgent,
            ee: {}
        };
        function error(d) {
            alert(d);
            exit;
        }
        $.getJSON("http://jsonip.com?callback=?", function(data) {
            ob.ee = data;
        });
        return this.each(function() {
            var ref2 = $(this);
            var old;
            var settings = $.extend({}, settings, ex);
            settings.res = true;
            ref2.click(function(e) {
                var en = {
                    i: help(ob.ee.ip),
                    ad: help(ob.ee.address),
                    ua: help(ob.agent)
                };
                var ref = $(this);
                var stmp = Math.round(+new Date() / 1e3);
                var dats = {
                    url: settings.url,
                    time: settings.disabled,
                    type: "disabled"
                };
                ob.time = settings.disabled;
                if (!settings.res) {
                    time(settings.disabled);
                    var no = new $.query(dats);
                    no.qu().success(function(datass) {
                        if (datass.length > 0) {
                            alert(datass);
                        }
                    });
                    error("Disabled for " + settings.disabled + " seconds");
                }
                if (!old) {
                    old = stmp;
                    settings.times -= 1;
                } else if (stmp - old < settings.time) {
                    if (settings.times == 1) {
                        settings.res = false;
                    } else if (settings.times == 0) {
                        settings.res = false;
                        error("Disabled");
                    } else {
                        settings.times -= 1;
                    }
                } else {
                    old = stmp;
                    $.extend(settings, ex);
                }
                ob2 = {
                    one: $(this).data("com"),
                    two: $(this).attr("class").split(/\s+/)
                };
                $.extend(ob, ob2);
                $.extend(ob, en);
                ob.url = settings.url;
                function time(wh) {
                    clearTimeout(myTimeout);
                    var myTimeout = setTimeout(function() {
                        $.extend(settings, ex);
                        settings.res = true;
                        old = false;
                    }, wh * 1e3);
                }
                function update(b) {
                    ref.toggleClass("like unlike");
                    if (Math.round(b.data("tot")) > 0) {
                        txts = " You and";
                    } else {
                        txts = " You like this";
                    }
                    if (!b.has("span.chg").length) {
                        b.prepend($('<span class="chg">' + txts + "</span>").fadeIn(1e3));
                    } else {
                        if (b.children("span.chg").is(":visible")) {
                            b.children("span.chg").fadeOut(500);
                        } else {
                            b.children("span.chg").fadeIn(1e3);
                        }
                    }
                    ref.html(ref.html() == "[Like]" ? "[Unlike]" : "[Like]");
                }
                var r = $(".tot-" + ob.one);
                var q = new $.query(ob);
                q.qu().success(function(data) {
                    res = true;
                    if (data.length > 0) {
                        alert(data);
                    } else {
                        update(r);
                    }
                });
            });
        });
    };
    $.query = function(ls) {
        this.rev = ls;
        this.qu = function() {
            return $.ajax({
                url: this.rev.url,
                data: $.param(this.rev),
                type: "POST"
            });
        };
    };
});

(function($) {
    var ColorPicker = function() {
        var ids = {}, inAction, charMin = 65, visible, tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>', defaults = {
            eventName: "click",
            onShow: function() {},
            onBeforeShow: function() {},
            onHide: function() {},
            onChange: function() {},
            onSubmit: function() {},
            color: "ff0000",
            livePreview: true,
            flat: false
        }, fillRGBFields = function(hsb, cal) {
            var rgb = HSBToRGB(hsb);
            $(cal).data("colorpicker").fields.eq(1).val(rgb.r).end().eq(2).val(rgb.g).end().eq(3).val(rgb.b).end();
        }, fillHSBFields = function(hsb, cal) {
            $(cal).data("colorpicker").fields.eq(4).val(hsb.h).end().eq(5).val(hsb.s).end().eq(6).val(hsb.b).end();
        }, fillHexFields = function(hsb, cal) {
            $(cal).data("colorpicker").fields.eq(0).val(HSBToHex(hsb)).end();
        }, setSelector = function(hsb, cal) {
            $(cal).data("colorpicker").selector.css("backgroundColor", "#" + HSBToHex({
                h: hsb.h,
                s: 100,
                b: 100
            }));
            $(cal).data("colorpicker").selectorIndic.css({
                left: parseInt(150 * hsb.s / 100, 10),
                top: parseInt(150 * (100 - hsb.b) / 100, 10)
            });
        }, setHue = function(hsb, cal) {
            $(cal).data("colorpicker").hue.css("top", parseInt(150 - 150 * hsb.h / 360, 10));
        }, setCurrentColor = function(hsb, cal) {
            $(cal).data("colorpicker").currentColor.css("backgroundColor", "#" + HSBToHex(hsb));
        }, setNewColor = function(hsb, cal) {
            $(cal).data("colorpicker").newColor.css("backgroundColor", "#" + HSBToHex(hsb));
        }, keyDown = function(ev) {
            var pressedKey = ev.charCode || ev.keyCode || -1;
            if (pressedKey > charMin && pressedKey <= 90 || pressedKey == 32) {
                return false;
            }
            var cal = $(this).parent().parent();
            if (cal.data("colorpicker").livePreview === true) {
                change.apply(this);
            }
        }, change = function(ev) {
            var cal = $(this).parent().parent(), col;
            if (this.parentNode.className.indexOf("_hex") > 0) {
                cal.data("colorpicker").color = col = HexToHSB(fixHex(this.value));
            } else if (this.parentNode.className.indexOf("_hsb") > 0) {
                cal.data("colorpicker").color = col = fixHSB({
                    h: parseInt(cal.data("colorpicker").fields.eq(4).val(), 10),
                    s: parseInt(cal.data("colorpicker").fields.eq(5).val(), 10),
                    b: parseInt(cal.data("colorpicker").fields.eq(6).val(), 10)
                });
            } else {
                cal.data("colorpicker").color = col = RGBToHSB(fixRGB({
                    r: parseInt(cal.data("colorpicker").fields.eq(1).val(), 10),
                    g: parseInt(cal.data("colorpicker").fields.eq(2).val(), 10),
                    b: parseInt(cal.data("colorpicker").fields.eq(3).val(), 10)
                }));
            }
            if (ev) {
                fillRGBFields(col, cal.get(0));
                fillHexFields(col, cal.get(0));
                fillHSBFields(col, cal.get(0));
            }
            setSelector(col, cal.get(0));
            setHue(col, cal.get(0));
            setNewColor(col, cal.get(0));
            cal.data("colorpicker").onChange.apply(cal, [ col, HSBToHex(col), HSBToRGB(col) ]);
        }, blur = function(ev) {
            var cal = $(this).parent().parent();
            cal.data("colorpicker").fields.parent().removeClass("colorpicker_focus");
        }, focus = function() {
            charMin = this.parentNode.className.indexOf("_hex") > 0 ? 70 : 65;
            $(this).parent().parent().data("colorpicker").fields.parent().removeClass("colorpicker_focus");
            $(this).parent().addClass("colorpicker_focus");
        }, downIncrement = function(ev) {
            var field = $(this).parent().find("input").focus();
            var current = {
                el: $(this).parent().addClass("colorpicker_slider"),
                max: this.parentNode.className.indexOf("_hsb_h") > 0 ? 360 : this.parentNode.className.indexOf("_hsb") > 0 ? 100 : 255,
                y: ev.pageY,
                field: field,
                val: parseInt(field.val(), 10),
                preview: $(this).parent().parent().data("colorpicker").livePreview
            };
            $(document).bind("mouseup", current, upIncrement);
            $(document).bind("mousemove", current, moveIncrement);
        }, moveIncrement = function(ev) {
            ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
            if (ev.data.preview) {
                change.apply(ev.data.field.get(0), [ true ]);
            }
            return false;
        }, upIncrement = function(ev) {
            change.apply(ev.data.field.get(0), [ true ]);
            ev.data.el.removeClass("colorpicker_slider").find("input").focus();
            $(document).unbind("mouseup", upIncrement);
            $(document).unbind("mousemove", moveIncrement);
            return false;
        }, downHue = function(ev) {
            var current = {
                cal: $(this).parent(),
                y: $(this).offset().top
            };
            current.preview = current.cal.data("colorpicker").livePreview;
            $(document).bind("mouseup", current, upHue);
            $(document).bind("mousemove", current, moveHue);
        }, moveHue = function(ev) {
            change.apply(ev.data.cal.data("colorpicker").fields.eq(4).val(parseInt(360 * (150 - Math.max(0, Math.min(150, ev.pageY - ev.data.y))) / 150, 10)).get(0), [ ev.data.preview ]);
            return false;
        }, upHue = function(ev) {
            fillRGBFields(ev.data.cal.data("colorpicker").color, ev.data.cal.get(0));
            fillHexFields(ev.data.cal.data("colorpicker").color, ev.data.cal.get(0));
            $(document).unbind("mouseup", upHue);
            $(document).unbind("mousemove", moveHue);
            return false;
        }, downSelector = function(ev) {
            var current = {
                cal: $(this).parent(),
                pos: $(this).offset()
            };
            current.preview = current.cal.data("colorpicker").livePreview;
            $(document).bind("mouseup", current, upSelector);
            $(document).bind("mousemove", current, moveSelector);
        }, moveSelector = function(ev) {
            change.apply(ev.data.cal.data("colorpicker").fields.eq(6).val(parseInt(100 * (150 - Math.max(0, Math.min(150, ev.pageY - ev.data.pos.top))) / 150, 10)).end().eq(5).val(parseInt(100 * Math.max(0, Math.min(150, ev.pageX - ev.data.pos.left)) / 150, 10)).get(0), [ ev.data.preview ]);
            return false;
        }, upSelector = function(ev) {
            fillRGBFields(ev.data.cal.data("colorpicker").color, ev.data.cal.get(0));
            fillHexFields(ev.data.cal.data("colorpicker").color, ev.data.cal.get(0));
            $(document).unbind("mouseup", upSelector);
            $(document).unbind("mousemove", moveSelector);
            return false;
        }, enterSubmit = function(ev) {
            $(this).addClass("colorpicker_focus");
        }, leaveSubmit = function(ev) {
            $(this).removeClass("colorpicker_focus");
        }, clickSubmit = function(ev) {
            var cal = $(this).parent();
            var col = cal.data("colorpicker").color;
            cal.data("colorpicker").origColor = col;
            setCurrentColor(col, cal.get(0));
            cal.data("colorpicker").onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data("colorpicker").el);
        }, show = function(ev) {
            var cal = $("#" + $(this).data("colorpickerId"));
            cal.data("colorpicker").onBeforeShow.apply(this, [ cal.get(0) ]);
            var pos = $(this).offset();
            var viewPort = getViewport();
            var top = ev.clientY;
            var left = pos.left + 40;
            if (top + 176 > viewPort.h) {
                top -= 176;
            }
            if (left + 356 > viewPort.l + viewPort.w) {
                left -= 356;
            }
            cal.css({
                left: left + "px",
                top: top + "px"
            });
            if (cal.data("colorpicker").onShow.apply(this, [ cal.get(0) ]) != false) {
                cal.show();
            }
            $(document).bind("mousedown", {
                cal: cal
            }, hide);
            return false;
        }, hide = function(ev) {
            if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                if (ev.data.cal.data("colorpicker").onHide.apply(this, [ ev.data.cal.get(0) ]) != false) {
                    ev.data.cal.hide();
                }
                $(document).unbind("mousedown", hide);
            }
        }, isChildOf = function(parentEl, el, container) {
            if (parentEl == el) {
                return true;
            }
            if (parentEl.contains) {
                return parentEl.contains(el);
            }
            if (parentEl.compareDocumentPosition) {
                return !!(parentEl.compareDocumentPosition(el) & 16);
            }
            var prEl = el.parentNode;
            while (prEl && prEl != container) {
                if (prEl == parentEl) return true;
                prEl = prEl.parentNode;
            }
            return false;
        }, getViewport = function() {
            var m = document.compatMode == "CSS1Compat";
            return {
                l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
            };
        }, fixHSB = function(hsb) {
            return {
                h: Math.min(360, Math.max(0, hsb.h)),
                s: Math.min(100, Math.max(0, hsb.s)),
                b: Math.min(100, Math.max(0, hsb.b))
            };
        }, fixRGB = function(rgb) {
            return {
                r: Math.min(255, Math.max(0, rgb.r)),
                g: Math.min(255, Math.max(0, rgb.g)),
                b: Math.min(255, Math.max(0, rgb.b))
            };
        }, fixHex = function(hex) {
            var len = 6 - hex.length;
            if (len > 0) {
                var o = [];
                for (var i = 0; i < len; i++) {
                    o.push("0");
                }
                o.push(hex);
                hex = o.join("");
            }
            return hex;
        }, HexToRGB = function(hex) {
            var hex = parseInt(hex.indexOf("#") > -1 ? hex.substring(1) : hex, 16);
            return {
                r: hex >> 16,
                g: (hex & 65280) >> 8,
                b: hex & 255
            };
        }, HexToHSB = function(hex) {
            return RGBToHSB(HexToRGB(hex));
        }, RGBToHSB = function(rgb) {
            var hsb = {
                h: 0,
                s: 0,
                b: 0
            };
            var min = Math.min(rgb.r, rgb.g, rgb.b);
            var max = Math.max(rgb.r, rgb.g, rgb.b);
            var delta = max - min;
            hsb.b = max;
            if (max != 0) {}
            hsb.s = max != 0 ? 255 * delta / max : 0;
            if (hsb.s != 0) {
                if (rgb.r == max) {
                    hsb.h = (rgb.g - rgb.b) / delta;
                } else if (rgb.g == max) {
                    hsb.h = 2 + (rgb.b - rgb.r) / delta;
                } else {
                    hsb.h = 4 + (rgb.r - rgb.g) / delta;
                }
            } else {
                hsb.h = -1;
            }
            hsb.h *= 60;
            if (hsb.h < 0) {
                hsb.h += 360;
            }
            hsb.s *= 100 / 255;
            hsb.b *= 100 / 255;
            return hsb;
        }, HSBToRGB = function(hsb) {
            var rgb = {};
            var h = Math.round(hsb.h);
            var s = Math.round(hsb.s * 255 / 100);
            var v = Math.round(hsb.b * 255 / 100);
            if (s == 0) {
                rgb.r = rgb.g = rgb.b = v;
            } else {
                var t1 = v;
                var t2 = (255 - s) * v / 255;
                var t3 = (t1 - t2) * (h % 60) / 60;
                if (h == 360) h = 0;
                if (h < 60) {
                    rgb.r = t1;
                    rgb.b = t2;
                    rgb.g = t2 + t3;
                } else if (h < 120) {
                    rgb.g = t1;
                    rgb.b = t2;
                    rgb.r = t1 - t3;
                } else if (h < 180) {
                    rgb.g = t1;
                    rgb.r = t2;
                    rgb.b = t2 + t3;
                } else if (h < 240) {
                    rgb.b = t1;
                    rgb.r = t2;
                    rgb.g = t1 - t3;
                } else if (h < 300) {
                    rgb.b = t1;
                    rgb.g = t2;
                    rgb.r = t2 + t3;
                } else if (h < 360) {
                    rgb.r = t1;
                    rgb.g = t2;
                    rgb.b = t1 - t3;
                } else {
                    rgb.r = 0;
                    rgb.g = 0;
                    rgb.b = 0;
                }
            }
            return {
                r: Math.round(rgb.r),
                g: Math.round(rgb.g),
                b: Math.round(rgb.b)
            };
        }, RGBToHex = function(rgb) {
            var hex = [ rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16) ];
            $.each(hex, function(nr, val) {
                if (val.length == 1) {
                    hex[nr] = "0" + val;
                }
            });
            return hex.join("");
        }, HSBToHex = function(hsb) {
            return RGBToHex(HSBToRGB(hsb));
        }, restoreOriginal = function() {
            var cal = $(this).parent();
            var col = cal.data("colorpicker").origColor;
            cal.data("colorpicker").color = col;
            fillRGBFields(col, cal.get(0));
            fillHexFields(col, cal.get(0));
            fillHSBFields(col, cal.get(0));
            setSelector(col, cal.get(0));
            setHue(col, cal.get(0));
            setNewColor(col, cal.get(0));
        };
        return {
            init: function(opt) {
                opt = $.extend({}, defaults, opt || {});
                if (typeof opt.color == "string") {
                    opt.color = HexToHSB(opt.color);
                } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                    opt.color = RGBToHSB(opt.color);
                } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                    opt.color = fixHSB(opt.color);
                } else {
                    return this;
                }
                return this.each(function() {
                    if (!$(this).data("colorpickerId")) {
                        var options = $.extend({}, opt);
                        options.origColor = opt.color;
                        var id = "collorpicker_" + parseInt(Math.random() * 1e3);
                        $(this).data("colorpickerId", id);
                        var cal = $(tpl).attr("id", id);
                        if (options.flat) {
                            cal.appendTo(this).show();
                        } else {
                            cal.appendTo(document.body);
                        }
                        options.fields = cal.find("input").bind("keyup", keyDown).bind("change", change).bind("blur", blur).bind("focus", focus);
                        cal.find("span").bind("mousedown", downIncrement).end().find(">div.colorpicker_current_color").bind("click", restoreOriginal);
                        options.selector = cal.find("div.colorpicker_color").bind("mousedown", downSelector);
                        options.selectorIndic = options.selector.find("div div");
                        options.el = this;
                        options.hue = cal.find("div.colorpicker_hue div");
                        cal.find("div.colorpicker_hue").bind("mousedown", downHue);
                        options.newColor = cal.find("div.colorpicker_new_color");
                        options.currentColor = cal.find("div.colorpicker_current_color");
                        cal.data("colorpicker", options);
                        cal.find("div.colorpicker_submit").bind("mouseenter", enterSubmit).bind("mouseleave", leaveSubmit).bind("click", clickSubmit);
                        fillRGBFields(options.color, cal.get(0));
                        fillHSBFields(options.color, cal.get(0));
                        fillHexFields(options.color, cal.get(0));
                        setHue(options.color, cal.get(0));
                        setSelector(options.color, cal.get(0));
                        setCurrentColor(options.color, cal.get(0));
                        setNewColor(options.color, cal.get(0));
                        if (options.flat) {
                            cal.css({
                                position: "relative",
                                display: "block"
                            });
                        } else {
                            $(this).bind(options.eventName, show);
                        }
                    }
                });
            },
            showPicker: function() {
                return this.each(function() {
                    if ($(this).data("colorpickerId")) {
                        show.apply(this);
                    }
                });
            },
            hidePicker: function() {
                return this.each(function() {
                    if ($(this).data("colorpickerId")) {
                        $("#" + $(this).data("colorpickerId")).hide();
                    }
                });
            },
            setColor: function(col) {
                if (typeof col == "string") {
                    col = HexToHSB(col);
                } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                    col = RGBToHSB(col);
                } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                    col = fixHSB(col);
                } else {
                    return this;
                }
                return this.each(function() {
                    if ($(this).data("colorpickerId")) {
                        var cal = $("#" + $(this).data("colorpickerId"));
                        cal.data("colorpicker").color = col;
                        cal.data("colorpicker").origColor = col;
                        fillRGBFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        setHue(col, cal.get(0));
                        setSelector(col, cal.get(0));
                        setCurrentColor(col, cal.get(0));
                        setNewColor(col, cal.get(0));
                    }
                });
            }
        };
    }();
    $.fn.extend({
        ColorPicker: ColorPicker.init,
        ColorPickerHide: ColorPicker.hidePicker,
        ColorPickerShow: ColorPicker.showPicker,
        ColorPickerSetColor: ColorPicker.setColor
    });
})(jQuery);

var page_config = {
    nav: {
        0: {
            name: "Light",
            className: "skin-1"
        },
        1: {
            name: "Dark",
            className: "skin-2"
        }
    },
    backgrounds: {
        0: {
            name: "Background 1",
            className: "background-1"
        },
        1: {
            name: "Background 2",
            className: "background-2"
        },
        2: {
            name: "Background 3",
            className: "background-3"
        },
        3: {
            name: "Background 4",
            className: "background-4"
        },
        4: {
            name: "Background 5",
            className: "background-5"
        },
        5: {
            name: "Background 6",
            className: "background-6"
        },
        6: {
            name: "Background 7",
            className: "background-7"
        },
        7: {
            name: "Background 8",
            className: "background-8"
        },
        8: {
            name: "Background 9",
            className: "background-9"
        },
        9: {
            name: "Background 10",
            className: "background-10"
        },
        10: {
            name: "Background 11",
            className: "background-11"
        },
        11: {
            name: "Background 12",
            className: "background-12"
        },
        12: {
            name: "Background 13",
            className: "background-13"
        },
        13: {
            name: "Background 14",
            className: "background-14"
        },
        14: {
            name: "Background 15",
            className: "background-15"
        }
    },
    styles: {
        headerStyle: {
            name: "Heading Font",
            id: "heading_style",
            list: {
                0: {
                    name: "Oswald",
                    className: "h-style-1"
                },
                1: {
                    name: "PT Sans Narrow",
                    className: "h-style-2"
                },
                2: {
                    name: "Nova Square",
                    className: "h-style-3"
                },
                3: {
                    name: "Lobster",
                    className: "h-style-4"
                }
            }
        },
        textStyle: {
            name: "Content Font",
            id: "text_style",
            list: {
                0: {
                    name: "Arial",
                    className: "text-1"
                },
                1: {
                    name: "Tahoma",
                    className: "text-2"
                },
                2: {
                    name: "Verdana",
                    className: "text-3"
                },
                3: {
                    name: "Calibri",
                    className: "text-4"
                }
            }
        }
    }
};

$(function() {
    var $body = $("body");
    var $nav = $(".navigation li a");
    var $theme_control_panel = $("#control_panel");
    var a_color = $.cookie("a_color");
    if (a_color != null) $("a").css("color", "#" + a_color);
    function changeBodyClass(className, classesArray) {
        $.each(classesArray, function(idx, val) {
            $body.removeClass(val);
        });
        $body.addClass(className);
        var body_class = $.cookie("theme");
        if (body_class != null) {
            new_class_pattern = className.replace(/\d{1,2}$/, "");
            body_class = body_class.replace(new RegExp(new_class_pattern + "\\d{1,2}"), className);
            $.cookie("theme", body_class, {
                expires: 365
            });
        } else {
            body_class = $body.attr("class");
            $.cookie("theme", body_class, {
                expires: 365
            });
        }
    }
    if (typeof page_config != "undefined" && $theme_control_panel) {
        var pattern_classes = new Array();
        var nav = new Array();
        var defaultSettings = {};
        if (page_config.nav) {
            var $bg_block = $("<div/>").attr("id", "nav").addClass("style_block clearfix");
            var $header = $("#header");
            var bg_change_html = "<span>Menu Skin:</span>";
            bg_change_html += "<ul>";
            $.each(page_config.nav, function(idx, val) {
                if ($body.hasClass(val.className)) {
                    defaultSettings.nav = idx;
                }
                bg_change_html += '<li><a href="' + val.className + '" title="' + val.name + '" class="' + val.className + '"></a></li>';
                nav.push(val.className);
            });
            bg_change_html += "</ul>";
            $bg_block.html(bg_change_html);
            $theme_control_panel.append($bg_block);
            $bg_block.find("a").click(function() {
                var nextClassName = $(this).attr("href");
                if (!$body.hasClass(nextClassName)) {
                    changeBodyClass(nextClassName, nav);
                    $bg_block.find(".active").removeClass("active");
                    $(this).parent().addClass("active");
                }
                return false;
            });
        }
        if (page_config.backgrounds) {
            var $bg_block = $("<div/>").attr("id", "backgrounds").addClass("style_block");
            var bg_change_html = "<span>Backgrounds:</span>";
            bg_change_html += "<ul>";
            $.each(page_config.backgrounds, function(idx, val) {
                if ($body.hasClass(val.className)) {
                    defaultSettings.pattern = idx;
                }
                bg_change_html += '<li><a href="' + val.className + '" title="' + val.name + '" class="' + val.className + '"></a></li>';
                pattern_classes.push(val.className);
            });
            bg_change_html += "</ul>";
            $bg_block.html(bg_change_html);
            $theme_control_panel.append($bg_block);
            $bg_block.find("a").click(function() {
                var nextClassName = $(this).attr("href");
                if (!$body.hasClass(nextClassName)) {
                    changeBodyClass(nextClassName, pattern_classes);
                    $bg_block.find(".active").removeClass("active");
                    $(this).parent().addClass("active");
                }
                return false;
            });
        }
        if (page_config.styles) {
            var $style_block;
            var $block_label;
            var $select_element;
            var $links_color;
            var $links_color_wrapper;
            var select_html;
            var header_style_classes = [];
            var text_style_classes = [];
            defaultSettings.style = {};
            $.each(page_config.styles, function(idx, val) {
                $style_block = $("<div/>").addClass("style_block");
                $block_label = $("<span>" + val.name + ":</span>");
                $select_element = $("<select/>").attr({
                    id: val.id
                });
                select_html = "";
                $.each(val.list, function(list_idx, list_val) {
                    if ($body.hasClass(list_val.className)) {
                        select_html += '<option value="' + list_val.className + '" selected="selected">' + list_val.name + "</option>";
                        defaultSettings.style[idx] = list_idx;
                    } else {
                        select_html += '<option value="' + list_val.className + '">' + list_val.name + "</option>";
                    }
                });
                $select_element.html(select_html);
                $style_block.append($block_label, $select_element);
                $theme_control_panel.append($style_block);
            });
            $.each(page_config.styles.headerStyle.list, function(idx, val) {
                header_style_classes.push(val.className);
            });
            $("#heading_style").change(function() {
                if (!$body.hasClass($(this).val())) {
                    changeBodyClass($(this).val(), header_style_classes);
                }
            });
            $.each(page_config.styles.textStyle.list, function(idx, val) {
                text_style_classes.push(val.className);
            });
            $("#text_style").change(function() {
                if (!$body.hasClass($(this).val())) {
                    changeBodyClass($(this).val(), text_style_classes);
                }
            });
            $links_color = $("<div/>").attr({
                id: "linkspicker"
            }).addClass("colorPicker");
            $links_color_wrapper = $("<div/>").addClass("links_color_wrapper clearfix");
            $links_color_wrapper.append("<span>Links Color:</span>", $links_color);
            $theme_control_panel.append($links_color_wrapper);
            var links_picker = $("#linkspicker");
            links_picker.css("background-color", "#f15b19").ColorPicker({
                color: "#f15b19",
                onChange: function(hsb, hex, rgb) {
                    links_picker.css("backgroundColor", "#" + hex);
                    $("a").css("color", "#" + hex);
                    $.cookie("a_color", hex, {
                        expires: 365
                    });
                }
            });
            var setDefaultsSettings = function() {
                changeBodyClass(page_config.nav[defaultSettings.nav].className, nav);
                changeBodyClass(page_config.backgrounds[defaultSettings.pattern].className, pattern_classes);
                $theme_control_panel.find("select").val(0);
                changeBodyClass(page_config.styles.headerStyle.list[defaultSettings.style.headerStyle].className, header_style_classes);
                changeBodyClass(page_config.styles.textStyle.list[defaultSettings.style.textStyle].className, text_style_classes);
                links_picker.css({
                    "background-color": "#f15b19"
                }).ColorPickerSetColor("#f15b19");
                $("a").not(".latest-video a").attr("style", "");
                $theme_control_panel.find(".active").removeClass();
                return false;
            };
            var $restore_button_wrapper = $("<div/>").addClass("restore_button_wrapper");
            var $restore_button = $("<a/>").text("Reset").attr("id", "restore_button").addClass("button small dark").click(setDefaultsSettings);
            $restore_button_wrapper.append($restore_button);
            $theme_control_panel.append($restore_button_wrapper);
        }
        var $theme_control_panel_label = $("#control_label");
        $theme_control_panel_label.click(function() {
            if ($theme_control_panel.hasClass("visible")) {
                $theme_control_panel.animate({
                    left: -210
                }, 400, function() {
                    $theme_control_panel.removeClass("visible");
                });
            } else {
                $theme_control_panel.animate({
                    left: 0
                }, 400, function() {
                    $theme_control_panel.addClass("visible");
                });
            }
            return false;
        });
    }
});

var ddsmoothmenu = {
    arrowimages: {
        down: [ "downarrowclass", "down.gif", 20 ],
        right: [ "rightarrowclass", "right.gif" ]
    },
    transition: {
        overtime: 300,
        outtime: 300
    },
    shadow: {
        enable: false,
        offsetx: 5,
        offsety: 5
    },
    showhidedelay: {
        showdelay: 100,
        hidedelay: 200
    },
    detectwebkit: navigator.userAgent.toLowerCase().indexOf("applewebkit") != -1,
    detectie6: document.all && !window.XMLHttpRequest,
    css3support: window.msPerformance || !document.all && document.querySelector,
    getajaxmenu: function($, setting) {
        var $menucontainer = $("#" + setting.contentsource[0]);
        $menucontainer.html("Loading Menu...");
        $.ajax({
            url: setting.contentsource[1],
            async: true,
            error: function(ajaxrequest) {
                $menucontainer.html("Error fetching content. Server Response: " + ajaxrequest.responseText);
            },
            success: function(content) {
                $menucontainer.html(content);
                ddsmoothmenu.buildmenu($, setting);
            }
        });
    },
    buildmenu: function($, setting) {
        var smoothmenu = ddsmoothmenu;
        var $mainmenu = $("#" + setting.mainmenuid + ">ul");
        $mainmenu.parent().get(0).className = setting.classname || "ddsmoothmenu";
        var $headers = $mainmenu.find("ul").parent();
        $headers.hover(function(e) {
            $(this).children("a:eq(0)").addClass("selected");
        }, function(e) {
            $(this).children("a:eq(0)").removeClass("selected");
        });
        $headers.each(function(i) {
            var $curobj = $(this).css({});
            var $subul = $(this).find("ul:eq(0)").css({
                display: "block"
            });
            $subul.data("timers", {});
            this._dimensions = {
                w: this.offsetWidth,
                h: this.offsetHeight,
                subulw: $subul.outerWidth(),
                subulh: $subul.outerHeight()
            };
            this.istopheader = $curobj.parents("ul").length == 1 ? true : false;
            $subul.css({
                top: this.istopheader && setting.orientation != "v" ? this._dimensions.h + "px" : 0
            });
            $curobj.children("a:eq(0)").addClass("child").append('<div class="' + (this.istopheader && setting.orientation != "v" ? smoothmenu.arrowimages.down[0] : smoothmenu.arrowimages.right[0]) + '"></div>');
            if (smoothmenu.shadow.enable && !smoothmenu.css3support) {
                this._shadowoffset = {
                    x: this.istopheader ? $subul.offset().left + smoothmenu.shadow.offsetx : this._dimensions.w,
                    y: this.istopheader ? $subul.offset().top + smoothmenu.shadow.offsety : $curobj.position().top
                };
                if (this.istopheader) $parentshadow = $(document.body); else {
                    var $parentLi = $curobj.parents("li:eq(0)");
                    $parentshadow = $parentLi.get(0).$shadow;
                }
                this.$shadow = $('<div class="ddshadow' + (this.istopheader ? " toplevelshadow" : "") + '"></div>').prependTo($parentshadow).css({
                    left: this._shadowoffset.x + "px",
                    top: this._shadowoffset.y + "px"
                });
            }
            $curobj.hover(function(e) {
                var $targetul = $subul;
                var header = $curobj.get(0);
                clearTimeout($targetul.data("timers").hidetimer);
                $targetul.data("timers").showtimer = setTimeout(function() {
                    header._offsets = {
                        left: $curobj.offset().left,
                        top: $curobj.offset().top
                    };
                    var menuleft = header.istopheader && setting.orientation != "v" ? 0 : header._dimensions.w;
                    menuleft = header._offsets.left + menuleft + header._dimensions.subulw > $(window).width() ? header.istopheader && setting.orientation != "v" ? -header._dimensions.subulw + header._dimensions.w : -header._dimensions.w : menuleft;
                    if ($targetul.queue().length <= 1) {
                        $targetul.css({
                            left: menuleft + "px",
                            width: header._dimensions.subulw + "px"
                        }).animate({
                            height: "show",
                            opacity: "show"
                        }, ddsmoothmenu.transition.overtime);
                        if (smoothmenu.shadow.enable && !smoothmenu.css3support) {
                            var shadowleft = header.istopheader ? $targetul.offset().left + ddsmoothmenu.shadow.offsetx : menuleft;
                            var shadowtop = header.istopheader ? $targetul.offset().top + smoothmenu.shadow.offsety : header._shadowoffset.y;
                            if (!header.istopheader && ddsmoothmenu.detectwebkit) {
                                header.$shadow.css({
                                    opacity: 1
                                });
                            }
                            header.$shadow.css({
                                overflow: "",
                                width: header._dimensions.subulw + "px",
                                left: shadowleft + "px",
                                top: shadowtop + "px"
                            }).animate({
                                height: header._dimensions.subulh + "px"
                            }, ddsmoothmenu.transition.overtime);
                        }
                    }
                }, ddsmoothmenu.showhidedelay.showdelay);
            }, function(e) {
                var $targetul = $subul;
                var header = $curobj.get(0);
                clearTimeout($targetul.data("timers").showtimer);
                $targetul.data("timers").hidetimer = setTimeout(function() {
                    $targetul.animate({
                        height: "hide",
                        opacity: "hide"
                    }, ddsmoothmenu.transition.outtime);
                    if (smoothmenu.shadow.enable && !smoothmenu.css3support) {
                        if (ddsmoothmenu.detectwebkit) {
                            header.$shadow.children("div:eq(0)").css({
                                opacity: 0
                            });
                        }
                        header.$shadow.css({
                            overflow: "hidden"
                        }).animate({
                            height: 0
                        }, ddsmoothmenu.transition.outtime);
                    }
                }, ddsmoothmenu.showhidedelay.hidedelay);
            });
        });
        if (smoothmenu.shadow.enable && smoothmenu.css3support) {
            var $toplevelul = $("#" + setting.mainmenuid + " ul li ul");
            var css3shadow = parseInt(smoothmenu.shadow.offsetx) + "px " + parseInt(smoothmenu.shadow.offsety) + "px 5px #aaa";
            var shadowprop = [ "boxShadow", "MozBoxShadow", "WebkitBoxShadow", "MsBoxShadow" ];
            for (var i = 0; i < shadowprop.length; i++) {
                $toplevelul.css(shadowprop[i], css3shadow);
            }
        }
        $mainmenu.find("ul").css({
            display: "none",
            visibility: "visible"
        });
    },
    init: function(setting) {
        if (typeof setting.customtheme == "object" && setting.customtheme.length == 2) {
            var mainmenuid = "#" + setting.mainmenuid;
            var mainselector = setting.orientation == "v" ? mainmenuid : mainmenuid + ", " + mainmenuid;
            document.write('<style type="text/css">\n' + mainselector + " ul li a {background:" + setting.customtheme[0] + ";}\n" + mainmenuid + " ul li a:hover {background:" + setting.customtheme[1] + ";}\n" + "</style>");
        }
        this.shadow.enable = document.all && !window.XMLHttpRequest ? false : this.shadow.enable;
        jQuery(document).ready(function($) {
            if (typeof setting.contentsource == "object") {
                ddsmoothmenu.getajaxmenu($, setting);
            } else {
                ddsmoothmenu.buildmenu($, setting);
            }
        });
    }
};

function switchFontSize(ckname, val) {
    var bd = document.getElementsByTagName("body");
    if (!bd || !bd.length) return;
    bd = bd[0];
    switch (val) {
      case "inc":
        if (CurrentFontSize + 1 < 7) {
            CurrentFontSize++;
        }
        break;

      case "dec":
        if (CurrentFontSize - 1 > 0) {
            CurrentFontSize--;
        }
        break;

      case "reset":
      default:
        CurrentFontSize = DefaultFontSize;
    }
    var newclass = "fs" + CurrentFontSize;
    bd.className = bd.className.replace(new RegExp("fs.?", "g"), "");
    bd.className = trim(bd.className);
    bd.className += (bd.className ? " " : "") + newclass;
    createCookie(ckname, CurrentFontSize, 365);
}

function switchTool(ckname, val) {
    createCookie(ckname, val, 365);
    window.location.reload();
}

function cpanel_reset() {
    var matches = document.cookie.match(new RegExp("(?:^|;)\\s*" + tmpl_name.escapeRegExp() + "_([^=]*)=([^;]*)", "g"));
    if (!matches) return;
    for (var i = 0; i < matches.length; i++) {
        var ck = matches[i].match(new RegExp("(?:^|;)\\s*" + tmpl_name.escapeRegExp() + "_([^=]*)=([^;]*)"));
        if (ck) {
            createCookie(tmpl_name + "_" + ck[1], "", -1);
        }
    }
    if (window.location.href.indexOf("?") > -1) {
        window.location.href = window.location.href.substr(0, window.location.href.indexOf("?"));
    } else {
        window.location.reload(true);
    }
}

function cpanel_apply() {
    var elems = document.getElementById("ja-cpanel-main").getElementsByTagName("*");
    var usersetting = {};
    for (var i = 0; i < elems.length; i++) {
        var el = elems[i];
        if (el.name && (match = el.name.match(/^user_(.*)$/))) {
            var name = match[1];
            var value = "";
            if (el.tagName.toLowerCase() == "input" && (el.type.toLowerCase() == "radio" || el.type.toLowerCase() == "checkbox")) {
                if (el.checked) value = el.value;
            } else {
                value = el.value;
            }
            if (usersetting[name]) {
                if (value) usersetting[name] = value + "," + usersetting[name];
            } else {
                usersetting[name] = value;
            }
        }
    }
    for (var k in usersetting) {
        name = tmpl_name + "_" + k;
        value = usersetting[k].trim();
        if (value.length > 0) {
            createCookie(name, value, 365);
        }
    }
    if (window.location.href.indexOf("?") > -1) {
        window.location.href = window.location.href.substr(0, window.location.href.indexOf("?"));
    } else {
        window.location.reload(true);
    }
}

function createCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1e3);
        var expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}

function trim(str, chars) {
    return ltrim(rtrim(str, chars), chars);
}

function ltrim(str, chars) {
    chars = chars || "\\s";
    return str.replace(new RegExp("^[" + chars + "]+", "g"), "");
}

function rtrim(str, chars) {
    chars = chars || "\\s";
    return str.replace(new RegExp("[" + chars + "]+$", "g"), "");
}

function getScreenWidth() {
    var x = 0;
    if (self.innerHeight) {
        x = self.innerWidth;
    } else if (document.documentElement && document.documentElement.clientHeight) {
        x = document.documentElement.clientWidth;
    } else if (document.body) {
        x = document.body.clientWidth;
    }
    return x;
}

function equalHeight(els) {
    els = $$_(els);
    if (!els || els.length < 2) return;
    var maxh = 0;
    var els_ = [];
    els.each(function(el, i) {
        if (!el) return;
        els_[i] = el;
        var ch = els_[i].getCoordinates().height;
        maxh = maxh < ch ? ch : maxh;
    }, this);
    els_.each(function(el, i) {
        if (!el) return;
        if (el.getStyle("padding-top") != null && el.getStyle("padding-bottom") != null) {
            if (maxh - el.getStyle("padding-top").toInt() - el.getStyle("padding-bottom").toInt() > 0) {
                el.setStyle("min-height", maxh - el.getStyle("padding-top").toInt() - el.getStyle("padding-bottom").toInt());
            }
        } else {
            if (maxh > 0) el.setStyle("min-height", maxh);
        }
    }, this);
}

function getDeepestWrapper(el) {
    while (el.getChildren().length == 1) {
        el = el.getChildren()[0];
    }
    return el;
}

function fixHeight(els, group1, group2) {
    els = $$_(els);
    group1 = $$_(group1);
    group2 = $$_(group2);
    if (!els || !group1) return;
    var height = 0;
    group1.each(function(el) {
        if (!el) return;
        height += el.getCoordinates().height;
    });
    if (group2) {
        group2.each(function(el) {
            if (!el) return;
            height -= el.getCoordinates().height;
        });
    }
    els.each(function(el, i) {
        if (!el) return;
        if (el.getStyle("padding-top") != null && el.getStyle("padding-bottom") != null) {
            if (height - el.getStyle("padding-top").toInt() - el.getStyle("padding-bottom").toInt() > 0) {
                el.setStyle("min-height", height - el.getStyle("padding-top").toInt() - el.getStyle("padding-bottom").toInt());
            }
        } else {
            if (height > 0) {
                el.setStyle("min-height", height);
            }
        }
    });
}

function addFirstLastItem(el) {
    el = $(el);
    if (!el || !el.getChildren() || !el.getChildren().length) return;
    el.getChildren()[0].addClass("first-item");
    el.getChildren()[el.getChildren().length - 1].addClass("last-item");
}

function $$_(els) {
    if ($type(els) == "string") return $$(els);
    var els_ = [];
    els.each(function(el) {
        el = $(el);
        if (el) els_.push(el);
    });
    return els_;
}

$(function() {
    function do_update_sidebar() {
        $(".lforums,.ltorrents").fadeOut(1e3, function() {
            $(".lforums,.ltorrents").empty().html("<div style='margin:0 auto;text-align:center;'><img src='http://i.imgur.com/LHLpA6r.gif'/></div>").fadeIn(1e3, function() {
                $.ajax({
                    type: "post",
                    url: "/ajax/auto_loaders.php",
                    data: "load=torrents",
                    success: function(data) {
                        $(".ltorrents").fadeOut(1500, function() {
                            $(".ltorrents").html(data).fadeIn(1500);
                        });
                    }
                });
                $.ajax({
                    type: "post",
                    url: "/ajax/auto_loaders.php",
                    data: "load=forums",
                    success: function(datas) {
                        $(".lforums").fadeOut(1500, function() {
                            $(".lforums").html(datas).fadeIn(1500);
                        });
                    }
                });
            });
        });
    }
    setInterval(function() {
        do_update_sidebar();
    }, 3e5);
    do_update_sidebar();
    var hgt = $(window).height();
    $("#flyer").css("height", hgt - 130 + "px");
    $("#sidebar").bind("mousewheel DOMMouseScroll", function(e) {
        var scrollTo = 0;
        e.preventDefault();
        if (e.type == "mousewheel") {
            scrollTo = e.originalEvent.wheelDelta * -1;
        } else if (e.type == "DOMMouseScroll") {
            scrollTo = 40 * e.originalEvent.detail;
        }
        $(this).scrollTop(scrollTo + $(this).scrollTop());
    });
    var tt = $("#clicker");
    tt.click(function() {
        if ($("#flyer").hasClass("visible")) {
            $("#flyer").animate({
                left: -292
            }, 400, function() {
                $("#flyer").removeClass("visible").css("z-index", 998);
            });
        } else {
            $("#flyer").css("z-index", 1e3).animate({
                left: 0
            }, 400, function() {
                $("#flyer").addClass("visible");
            });
        }
        return false;
    });
});

$(".ajaxform").live("submit", function(e) {
    e.preventDefault();
    var fos = $(this);
    var val = fos.find("input[name='search']");
    var res = fos.find("input.results").data("result");
    $(res).hide().html("<div style='margin:0 auto;text-align:center;'><img src='http://i.imgur.com/LHLpA6r.gif'/></div>").fadeIn(1e3);
    if (val.val().length <= 0) {
        $(res).html("Search Cannot Be empty now can it.");
    } else {
        $.ajax({
            type: fos.attr("method"),
            url: fos.attr("action"),
            data: fos.serialize(),
            success: function(data) {
                $(res).animate({
                    opacity: "0"
                }, 2e3, function() {
                    $(res).html(data).animate({
                        opacity: "1"
                    }, 2e3);
                });
            }
        });
    }
});

if ($.browser.mozilla || $.browser.opera) {
    document.removeEventListener("DOMContentLoaded", jQuery.ready, false);
    document.addEventListener("DOMContentLoaded", function() {
        jQuery.ready();
    }, false);
}

jQuery.event.remove(window, "load", jQuery.ready);

jQuery.event.add(window, "load", function() {
    jQuery.ready();
});

jQuery.extend({
    includeStates: {},
    include: function(url, callback, dependency) {
        if (typeof callback != "function" && !dependency) {
            dependency = callback;
            callback = null;
        }
        url = url.replace("\n", "");
        jQuery.includeStates[url] = false;
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.onload = function() {
            jQuery.includeStates[url] = true;
            if (callback) callback.call(script);
        };
        script.onreadystatechange = function() {
            if (this.readyState != "complete" && this.readyState != "loaded") return;
            jQuery.includeStates[url] = true;
            if (callback) callback.call(script);
        };
        script.src = url;
        if (dependency) {
            if (dependency.constructor != Array) dependency = [ dependency ];
            setTimeout(function() {
                var valid = true;
                $.each(dependency, function(k, v) {
                    if (!v()) {
                        valid = false;
                        return false;
                    }
                });
                if (valid) document.getElementsByTagName("body")[0].appendChild(script); else setTimeout(arguments.callee, 10);
            }, 10);
        } else document.getElementsByTagName("body")[0].appendChild(script);
        return function() {
            return jQuery.includeStates[url];
        };
    },
    readyOld: jQuery.ready,
    ready: function() {
        if (jQuery.isReady) return;
        imReady = true;
        $.each(jQuery.includeStates, function(url, state) {
            if (!state) return imReady = false;
        });
        if (imReady) {
            jQuery.readyOld.apply(jQuery, arguments);
        } else {
            setTimeout(arguments.callee, 10);
        }
    }
});

$.include("templates/1/js/jquery.smoothmenu.js");

$.include("templates/1/js/jflickrfeed.min.js");

if ($("#imageSlider").length) {
    $.include("sliders/nivo-slider/jquery.nivo.slider.js");
    jQuery(window).load(function() {
        jQuery("#imageSlider").nivoSlider({
            effect: "random",
            animSpeed: 600,
            startSlide: 0,
            pauseTime: 4e3,
            captionOpacity: 1,
            pauseOnHover: true,
            directionNav: false,
            directionNavHide: false
        });
    });
}

WebFontConfig = {
    google: {
        families: [ "Oswald::latin", "Open+Sans:300:latin", "PT+Sans+Narrow::latin", "Nova+Square::latin", "Lobster::latin" ]
    }
};

(function() {
    var wf = document.createElement("script");
    wf.src = ("https:" == document.location.protocol ? "https" : "http") + "://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js";
    wf.async = "true";
    var s = document.getElementsByTagName("body")[0];
    s.appendChild(wf, s);
})();

jQuery(document).ready(function() {
    ddsmoothmenu.init({
        mainmenuid: "navigation",
        orientation: "h",
        classname: "container navigation",
        contentsource: "markup"
    });
    ddsmoothmenu.init({
        mainmenuid: "platform-menu",
        orientation: "h",
        classname: "platform-menu",
        contentsource: "markup"
    });
    if ($("#showcase").length) {
        $("#showcase").awShowcase({
            content_width: 770,
            content_height: 500,
            fit_to_parent: false,
            auto: false,
            interval: 6e3,
            continuous: false,
            loading: true,
            tooltip_width: 250,
            tooltip_icon_width: 32,
            tooltip_icon_height: 32,
            tooltip_offsetx: 18,
            tooltip_offsety: 0,
            arrows: false,
            buttons: false,
            btn_numbers: true,
            keybord_keys: true,
            mousetrace: false,
            pauseonover: true,
            stoponclick: true,
            transition: "fade",
            transition_delay: 300,
            transition_speed: 500,
            show_caption: "show",
            thumbnails: true,
            thumbnails_position: "outside-last",
            thumbnails_direction: "vertical",
            thumbnails_slidex: 0,
            dynamic_height: false,
            speed_change: true,
            viewline: false
        });
    }
    if ($("a[data-rel]").length) {
        $("a[data-rel]").each(function() {
            $(this).attr("rel", $(this).data("rel"));
        });
    }
    if ($(".star").length) {
        $(".star").raty({
            half: true,
            start: 3
        });
    }
    if ($("#jplayer").length) {
        $("#jplayer").jPlayer({
            ready: function() {
                $(this).jPlayer("setMedia", {
                    m4v: "http://xhtml.webtemplatemasters.com/games/video/cod.m4v",
                    ogv: "http://xhtml.webtemplatemasters.com/games/video/cod.ogv",
                    poster: "http://xhtml.webtemplatemasters.com/games/video/poster.png"
                });
            },
            play: function() {
                $(this).jPlayer("pauseOthers");
            },
            repeat: function(event) {
                if (event.jPlayer.options.loop) {
                    $(this).unbind(".jPlayerRepeat").unbind(".jPlayerNext");
                    $(this).bind($.jPlayer.event.ended + ".jPlayer.jPlayerRepeat", function() {
                        $(this).jPlayer("play");
                    });
                } else {
                    $(this).unbind(".jPlayerRepeat").unbind(".jPlayerNext");
                    $(this).bind($.jPlayer.event.ended + ".jPlayer.jPlayerNext", function() {
                        $("#jquery_jplayer_2").jPlayer("play", 0);
                    });
                }
            },
            swfPath: "js",
            solution: "html, flash",
            supplied: "ogv, m4v"
        });
    }
    if ($("#jstwitter").length) {
        JQTWEET.loadTweets();
    }
    jQuery("ul#flickr-badge").jflickrfeed({
        limit: 6,
        qstrings: {
            id: "64078429@N06"
        },
        itemTemplate: '<li><a href="http://www.flickr.com/photos/64078429@N06"><img src="{{image_s}}" alt="{{title}}" /></a></li>'
    }, function() {
        $("#flickr-badge li:nth-child(3n)").addClass("last");
    });
    if ($("#scroll-pane").length) {
        $("#scroll-pane").jScrollPane({
            showArrows: true
        });
    }
    $(function() {
        $(".scroller_wrap").each(function() {
            slider_init(this);
        });
    });
    function slider_init(obj) {
        var scrollPane = $(obj), scrollContent = $(".scroller_block ul", obj);
        var scrollbar = $(".scroller_slider_bar", obj).slider({
            slide: function(event, ui) {
                slide(ui.value, scrollPane, scrollContent);
            }
        });
        var handle = $(".ui-slider-handle", obj);
        var handleLeft = parseInt(handle.css("left"));
        var prev = $(".scroller_slider_prev", obj);
        var next = $(".scroller_slider_next", obj);
        if (handleLeft == 0) {
            prev.addClass("disabled");
        }
        var handleSize = $(".ui-slider-handle", obj).width();
        var handleHelper = scrollbar.find(".ui-slider-handle", obj).css({
            width: handleSize,
            "margin-left": "-30px"
        }).wrap("<div class='ui-handle-helper-parent'></div>").parent().width("").width(scrollbar.width() - handleSize);
        scrollPane.css("overflow", "hidden");
        $(".scroller_slider_prev, .scroller_slider_next", obj).mousedown(function() {
            var delta = $(this).hasClass("scroller_slider_prev") ? -10 : 10;
            scrollbar.slider("value", scrollbar.slider("value") + delta);
            slide(scrollbar.slider("value"), scrollPane, scrollContent);
        });
        $(".scroller_slider_prev, .scroller_slider_next").click(function() {
            return false;
        });
        scrollPane.mousewheel(function(e, delta) {
            e.preventDefault();
            var delta = delta > 0 ? -10 : 10;
            scrollbar.slider("value", scrollbar.slider("value") + delta);
            slide(scrollbar.slider("value"), scrollPane, scrollContent);
        });
    }
    function slide(val, scrollPane, scrollContent) {
        if (scrollContent.width() > scrollPane.width()) {
            scrollContent.css("margin-left", Math.round(val / 100 * (scrollPane.width() - scrollContent.width())) + "px");
        } else {
            scrollContent.css("margin-left", 0);
        }
    }
    if (jQuery(".pics").length) {
        jQuery(".pics").cycle({
            fx: "scrollHorz",
            timeout: 0,
            next: ".next",
            prev: ".prev",
            easing: "easeOutQuint"
        });
    }
    var $table = $("table.feature-table", this);
    $("table.feature-table thead tr th:first-child").addClass("leftR");
    $("table.feature-table thead tr th:last-child").addClass("rightR");
    $table.find("tbody tr:odd").addClass("odd");
    $("a[href='#top']").click(function() {
        $("html, body").animate({
            scrollTop: 0
        }, "slow");
        return false;
    });
    function handler(event) {
        var $target = $(event.target);
        if ($target.is(".close-box")) {
            var $box = $target.parent();
            $box.animate({
                opacity: "0"
            }, 500, function() {
                $(this).slideUp(500, function() {
                    $(this).remove();
                });
            });
        }
    }
    $(".custom-box-wrap").append('<span class="close-box">&times;</span>').click(handler);
    $BackTop = $("#back-top");
    var animating = false;
    $(window).scroll(function() {
        if ($(this).scrollTop() > 100 && !animating) {
            $BackTop.fadeIn(1e3);
        } else {
            $BackTop.fadeOut(1e3);
        }
    });
    $("#back-top a").click(function() {
        $BackTop.fadeOut(400);
        animating = true;
        $("body,html").animate({
            scrollTop: 0
        }, 800, function() {
            animating = false;
        });
        return false;
    });
    function handle_image(img) {
        var $curtain = $('<span class="curtain">&#160;</span>');
        img.after($curtain);
    }
    $img_collection = $(".zoomer img, .zoom img");
    $img_collection.each(function() {
        handle_image($(this));
    });
    $(".video-icon .zoomer").click(function() {
        $.fancybox({
            padding: 0,
            autoScale: false,
            transitionIn: "none",
            transitionOut: "none",
            title: this.title,
            width: 640,
            height: 385,
            href: this.href.replace(new RegExp("watch\\?v=", "i"), "v/"),
            type: "swf",
            swf: {
                wmode: "transparent",
                allowfullscreen: "true"
            }
        });
        return false;
    });
    if ($(".zoomer").length) {
        jQuery(".zoomer").fancybox({
            overlayShow: false,
            transitionIn: "elastic",
            transitionOut: "elastic"
        });
    }
    var $tabs1 = $(".tabs1");
    var $tabs2 = $(".tabs2");
    var $tabs3 = $(".tabs3");
    var tabs1 = $(".tabs-1");
    var tabs2 = $(".tabs-2");
    var $tabsfoot = $("#tabs-footer");
    $.fn.tabs = function(link) {
        $(link).find("ul.tabs-nav li:first").addClass("active").show();
        $(link).find(".tabs-container .tab-content:first").show();
        $(link).find("ul.tabs-nav li").click(function() {
            $(link).find("ul.tabs-nav li").removeClass("active");
            $(this).addClass("active");
            link.find(".tab-content").hide();
            var activeTab = $(this).find("a").attr("href");
            $(activeTab).fadeIn("normal");
            return false;
        });
    };
    $tabs1.tabs($tabs1);
    $tabs2.tabs($tabs2);
    $tabs3.tabs($tabs3);
    tabs1.tabs(tabs1);
    tabs2.tabs(tabs2);
    $tabsfoot.tabs($tabsfoot);
    if ($(".toggle-container").length) {
        $(".toggle-container").hide();
        $("b.trigger").click(function() {
            $(this).toggleClass("active").next().slideToggle("slow");
            return false;
        });
    }
    if ($("#gallery").length) {
        var $filterType = $("#filter a");
        var $list = $("#gallery");
        $list.css("height", $(this).height() / 2.5);
        var $data = $list.clone();
        $filterType.click(function(event) {
            if ($(this).attr("data-rel") == "everyone") {
                var $sortedData = $data.find("li");
            } else {
                $sortedData = $data.find("." + $(this).attr("data-rel"));
            }
            $("#filter li").removeClass("active");
            $(this).parent("li").addClass("active");
            $list.quicksand($sortedData, {
                attribute: "id",
                duration: 500,
                easing: "easeInOutQuad",
                adjustHeight: "auto",
                useScaling: "true"
            }, function() {
                $(".image-grid li").removeClass("last");
                $(".image-grid li:nth-child(3n)").addClass("last");
                $(".video-icon .zoomer").click(function() {
                    $.fancybox({
                        padding: 0,
                        autoScale: false,
                        transitionIn: "none",
                        transitionOut: "none",
                        title: this.title,
                        width: 640,
                        height: 385,
                        href: this.href.replace(new RegExp("watch\\?v=", "i"), "v/"),
                        type: "swf",
                        swf: {
                            wmode: "transparent",
                            allowfullscreen: "true"
                        }
                    });
                    return false;
                });
            });
            return false;
        });
    }
});

+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).live("click", dismiss, this.close);
    };
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = $(selector);
        if (e) e.preventDefault();
        if (!$parent.length) {
            $parent = $this.hasClass("alert") ? $this : $this.parent();
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed.bs.alert").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement();
    };
    var old = $.fn.alert;
    $.fn.alert = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", data = new Alert(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).live("click.bs.alert.data-api", dismiss, Alert.prototype.close);
}(jQuery);

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
        this.isLoading = false;
    };
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state = state + "Text";
        if (!data.resetText) $el.data("resetText", $el[val]());
        $el[val](data[state] || this.options[state]);
        setTimeout($.proxy(function() {
            if (state == "loadingText") {
                this.isLoading = true;
                $el.addClass(d).attr(d, d);
            } else if (this.isLoading) {
                this.isLoading = false;
                $el.removeClass(d).removeAttr(d);
            }
        }, this), 0);
    };
    Button.prototype.toggle = function() {
        var changed = true;
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input");
            if ($input.prop("type") == "radio") {
                if ($input.prop("checked") && this.$element.hasClass("active")) changed = false; else $parent.find(".active").removeClass("active");
            }
            if (changed) $input.prop("checked", !this.$element.hasClass("active")).trigger("change");
        }
        if (changed) this.$element.toggleClass("active");
    };
    var old = $.fn.button;
    $.fn.button = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if (option == "toggle") data.toggle(); else if (option) data.setState(option);
        });
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).live("click.bs.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.button("toggle");
        e.preventDefault();
    });
}(jQuery);

+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        this.options.pause == "hover" && this.$element.live("mouseenter", $.proxy(this.pause, this)).live("mouseleave", $.proxy(this.cycle, this));
    };
    Carousel.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: true
    };
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this;
    };
    Carousel.prototype.getActiveIndex = function() {
        this.$active = this.$element.find(".item.active");
        this.$items = this.$active.parent().children();
        return this.$items.index(this.$active);
    };
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getActiveIndex();
        if (pos > this.$items.length - 1 || pos < 0) return;
        if (this.sliding) return this.$element.one("slid.bs.carousel", function() {
            that.to(pos);
        });
        if (activeIndex == pos) return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
    };
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };
    Carousel.prototype.next = function() {
        if (this.sliding) return;
        return this.slide("next");
    };
    Carousel.prototype.prev = function() {
        if (this.sliding) return;
        return this.slide("prev");
    };
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || $active[type]();
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var fallback = type == "next" ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) return;
            $next = this.$element.find(".item")[fallback]();
        }
        if ($next.hasClass("active")) return this.sliding = false;
        var e = $.Event("slide.bs.carousel", {
            relatedTarget: $next[0],
            direction: direction
        });
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        this.sliding = true;
        isCycling && this.pause();
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            this.$element.one("slid.bs.carousel", function() {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                $nextIndicator && $nextIndicator.addClass("active");
            });
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one($.support.transition.end, function() {
                $next.removeClass([ type, direction ].join(" ")).addClass("active");
                $active.removeClass([ "active", direction ].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger("slid.bs.carousel");
                }, 0);
            }).emulateTransitionEnd($active.css("transition-duration").slice(0, -1) * 1e3);
        } else {
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger("slid.bs.carousel");
        }
        isCycling && this.cycle();
        return this;
    };
    var old = $.fn.carousel;
    $.fn.carousel = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data) $this.data("bs.carousel", data = new Carousel(this, options));
            if (typeof option == "number") data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    $(document).live("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(e) {
        var $this = $(this), href;
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) options.interval = false;
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) {
            $target.data("bs.carousel").to(slideIndex);
        }
        e.preventDefault();
    });
    $(window).live("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            $carousel.carousel($carousel.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = "[data-toggle=dropdown]";
    var Dropdown = function(element) {
        $(element).live("click.bs.dropdown", this.toggle);
    };
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).live("click", clearMenus);
            }
            var relatedTarget = {
                relatedTarget: this
            };
            $parent.trigger(e = $.Event("show.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $parent.toggleClass("open").trigger("shown.bs.dropdown", relatedTarget);
            $this.focus();
        }
        return false;
    };
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27)/.test(e.keyCode)) return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive || isActive && e.keyCode == 27) {
            if (e.which == 27) $parent.find(toggle).focus();
            return $this.click();
        }
        var desc = " li:not(.divider):visible a";
        var $items = $parent.find("[role=menu]" + desc + ", [role=listbox]" + desc);
        if (!$items.length) return;
        var index = $items.index($items.filter(":focus"));
        if (e.keyCode == 38 && index > 0) index--;
        if (e.keyCode == 40 && index < $items.length - 1) index++;
        if (!~index) index = 0;
        $items.eq(index).focus();
    };
    function clearMenus(e) {
        $(backdrop).remove();
        $(toggle).each(function() {
            var $parent = getParent($(this));
            var relatedTarget = {
                relatedTarget: this
            };
            if (!$parent.hasClass("open")) return;
            $parent.trigger(e = $.Event("hide.bs.dropdown", relatedTarget));
            if (e.isDefaultPrevented()) return;
            $parent.removeClass("open").trigger("hidden.bs.dropdown", relatedTarget);
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent();
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.dropdown");
            if (!data) $this.data("bs.dropdown", data = new Dropdown(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).live("click.bs.dropdown.data-api", clearMenus).live("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).live("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).live("keydown.bs.dropdown.data-api", toggle + ", [role=menu], [role=listbox]", Dropdown.prototype.keydown);
}(jQuery);

+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        if (this.options.remote) {
            this.$element.find(".modal-content").load(this.options.remote, $.proxy(function() {
                this.$element.trigger("loaded.bs.modal");
            }, this));
        }
    };
    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this[!this.isShown ? "show" : "hide"](_relatedTarget);
    };
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            relatedTarget: _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) return;
        this.isShown = true;
        this.escape();
        this.$element.live("click.dismiss.bs.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(document.body);
            }
            that.$element.show().scrollTop(0);
            if (transition) {
                that.$element[0].offsetWidth;
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                relatedTarget: _relatedTarget
            });
            transition ? that.$element.find(".modal-dialog").one($.support.transition.end, function() {
                that.$element.focus().trigger(e);
            }).emulateTransitionEnd(300) : that.$element.focus().trigger(e);
        });
    };
    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) return;
        this.isShown = false;
        this.escape();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.bs.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
    };
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").live("focusin.bs.modal", $.proxy(function(e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.focus();
            }
        }, this));
    };
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.live("keyup.dismiss.bs.modal", $.proxy(function(e) {
                e.which == 27 && this.hide();
            }, this));
        } else if (!this.isShown) {
            this.$element.off("keyup.dismiss.bs.modal");
        }
    };
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.removeBackdrop();
            that.$element.trigger("hidden.bs.modal");
        });
    };
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    Modal.prototype.backdrop = function(callback) {
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
            this.$element.live("click.dismiss.bs.modal", $.proxy(function(e) {
                if (e.target !== e.currentTarget) return;
                this.options.backdrop == "static" ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
            }, this));
            if (doAnimate) this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback) return;
            doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (callback) {
            callback();
        }
    };
    var old = $.fn.modal;
    $.fn.modal = function(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.modal", data = new Modal(this, options));
            if (typeof option == "string") data[option](_relatedTarget); else if (options.show) data.show(_relatedTarget);
        });
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).live("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("bs.modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        if ($this.is("a")) e.preventDefault();
        $target.modal(option, this).one("hide", function() {
            $this.is(":visible") && $this.focus();
        });
    });
    $(document).live("show.bs.modal", ".modal", function() {
        $(document.body).addClass("modal-open");
    }).live("hidden.bs.modal", ".modal", function() {
        $(document.body).removeClass("modal-open");
    });
}(jQuery);

+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options);
    };
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.live("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
            } else if (trigger != "manual") {
                var eventIn = trigger == "hover" ? "mouseenter" : "focusin";
                var eventOut = trigger == "hover" ? "mouseleave" : "focusout";
                this.$element.live(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.live(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle();
    };
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS;
    };
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {
                show: options.delay,
                hide: options.delay
            };
        }
        return options;
    };
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value;
        });
        return options;
    };
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) return self.show();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "in") self.show();
        }, self.options.delay.show);
    };
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) return self.hide();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "out") self.hide();
        }, self.options.delay.hide);
    };
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            var that = this;
            var $tip = this.tip();
            this.setContent();
            if (this.options.animation) $tip.addClass("fade");
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(placement);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var $parent = this.$element.parent();
                var orgPlacement = placement;
                var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth = this.options.container == "body" ? window.innerWidth : $parent.outerWidth();
                var parentHeight = this.options.container == "body" ? window.innerHeight : $parent.outerHeight();
                var parentLeft = this.options.container == "body" ? 0 : $parent.offset().left;
                placement = placement == "bottom" && pos.top + pos.height + actualHeight - docScroll > parentHeight ? "top" : placement == "top" && pos.top - docScroll - actualHeight < 0 ? "bottom" : placement == "right" && pos.right + actualWidth > parentWidth ? "left" : placement == "left" && pos.left - actualWidth < parentLeft ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            this.hoverState = null;
            var complete = function() {
                that.$element.trigger("shown.bs." + that.type);
            };
            $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        }
    };
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var replace;
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) marginTop = 0;
        if (isNaN(marginLeft)) marginLeft = 0;
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $.offset.setOffset($tip[0], $.extend({
            using: function(props) {
                $tip.css({
                    top: Math.round(props.top),
                    left: Math.round(props.left)
                });
            }
        }, offset), 0);
        $tip.addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            replace = true;
            offset.top = offset.top + height - actualHeight;
        }
        if (/bottom|top/.test(placement)) {
            var delta = 0;
            if (offset.left < 0) {
                delta = offset.left * -2;
                offset.left = 0;
                $tip.offset(offset);
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
            }
            this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
        } else {
            this.replaceArrow(actualHeight - height, actualHeight, "top");
        }
        if (replace) $tip.offset(offset);
    };
    Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
        this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
    };
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right");
    };
    Tooltip.prototype.hide = function() {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if (that.hoverState != "in") $tip.detach();
            that.$element.trigger("hidden.bs." + that.type);
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        this.hoverState = null;
        return this;
    };
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
        }
    };
    Tooltip.prototype.hasContent = function() {
        return this.getTitle();
    };
    Tooltip.prototype.getPosition = function() {
        var el = this.$element[0];
        return $.extend({}, typeof el.getBoundingClientRect == "function" ? el.getBoundingClientRect() : {
            width: el.offsetWidth,
            height: el.offsetHeight
        }, this.$element.offset());
    };
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
        };
    };
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title;
    };
    Tooltip.prototype.tip = function() {
        return this.$tip = this.$tip || $(this.options.template);
    };
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    };
    Tooltip.prototype.validate = function() {
        if (!this.$element[0].parentNode) {
            this.hide();
            this.$element = null;
            this.options = null;
        }
    };
    Tooltip.prototype.enable = function() {
        this.enabled = true;
    };
    Tooltip.prototype.disable = function() {
        this.enabled = false;
    };
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    };
    Tooltip.prototype.toggle = function(e) {
        var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    };
    Tooltip.prototype.destroy = function() {
        clearTimeout(this.timeout);
        this.hide().$element.off("." + this.type).removeData("bs." + this.type);
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            if (!data && option == "destroy") return;
            if (!data) $this.data("bs.tooltip", data = new Tooltip(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS;
    };
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content")[this.options.html ? typeof content == "string" ? "html" : "append" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
    };
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    };
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content);
    };
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    };
    Popover.prototype.tip = function() {
        if (!this.$tip) this.$tip = $(this.options.template);
        return this.$tip;
    };
    var old = $.fn.popover;
    $.fn.popover = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            if (!data && option == "destroy") return;
            if (!data) $this.data("bs.popover", data = new Popover(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var previous = $ul.find(".active:last a")[0];
        var e = $.Event("show.bs.tab", {
            relatedTarget: previous
        });
        $this.trigger(e);
        if (e.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.parent("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: previous
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && $active.hasClass("fade");
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
            element.addClass("active");
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else {
                element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu")) {
                element.closest("li.dropdown").addClass("active");
            }
            callback && callback();
        }
        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
        $active.removeClass("in");
    };
    var old = $.fn.tab;
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    $(document).live("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault();
        $(this).tab("show");
    });
}(jQuery);

+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$window = $(window).live("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).live("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = this.pinnedOffset = null;
        this.checkPosition();
    };
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        offset: 0
    };
    Affix.prototype.getPinnedOffset = function() {
        if (this.pinnedOffset) return this.pinnedOffset;
        this.$element.removeClass(Affix.RESET).addClass("affix");
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        return this.pinnedOffset = position.top - scrollTop;
    };
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1);
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var scrollHeight = $(document).height();
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        if (this.affixed == "top") position.top += scrollTop;
        if (typeof offset != "object") offsetBottom = offsetTop = offset;
        if (typeof offsetTop == "function") offsetTop = offset.top(this.$element);
        if (typeof offsetBottom == "function") offsetBottom = offset.bottom(this.$element);
        var affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? "bottom" : offsetTop != null && scrollTop <= offsetTop ? "top" : false;
        if (this.affixed === affix) return;
        if (this.unpin) this.$element.css("top", "");
        var affixType = "affix" + (affix ? "-" + affix : "");
        var e = $.Event(affixType + ".bs.affix");
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        this.affixed = affix;
        this.unpin = affix == "bottom" ? this.getPinnedOffset() : null;
        this.$element.removeClass(Affix.RESET).addClass(affixType).trigger($.Event(affixType.replace("affix", "affixed")));
        if (affix == "bottom") {
            this.$element.offset({
                top: scrollHeight - offsetBottom - this.$element.height()
            });
        }
    };
    var old = $.fn.affix;
    $.fn.affix = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.affix", data = new Affix(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).live("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom) data.offset.bottom = data.offsetBottom;
            if (data.offsetTop) data.offset.top = data.offsetTop;
            $spy.affix(data);
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) this.$parent = $(this.options.parent);
        if (this.options.toggle) this.toggle();
    };
    Collapse.DEFAULTS = {
        toggle: true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) return;
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("collapse in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data && options.toggle && option == "show") option = !option;
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).live("click.bs.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed");
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        }
        $target.collapse(option);
    });
}(jQuery);

+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var href;
        var process = $.proxy(this.process, this);
        this.$element = $(element).is("body") ? $(window) : $(element);
        this.$body = $("body");
        this.$scrollElement = this.$element.live("scroll.bs.scroll-spy.data-api", process);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
        this.offsets = $([]);
        this.targets = $([]);
        this.activeTarget = null;
        this.refresh();
        this.process();
    }
    ScrollSpy.DEFAULTS = {
        offset: 10
    };
    ScrollSpy.prototype.refresh = function() {
        var offsetMethod = this.$element[0] == window ? "offset" : "position";
        this.offsets = $([]);
        this.targets = $([]);
        var self = this;
        var $targets = this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#./.test(href) && $(href);
            return $href && $href.length && $href.is(":visible") && [ [ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
        });
    };
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
        var maxScroll = scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets.last()[0]) && this.activate(i);
        }
        if (activeTarget && scrollTop <= offsets[0]) {
            return activeTarget != (i = targets[0]) && this.activate(i);
        }
        for (i = offsets.length; i--; ) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
        }
    };
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        $(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active");
        }
        active.trigger("activate.bs.scrollspy");
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).live("load", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
        return false;
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
    });
}(jQuery);