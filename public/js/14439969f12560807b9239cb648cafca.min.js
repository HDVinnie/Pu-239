(function($) {
    $.fn.lightBox = function(settings) {
        settings = jQuery.extend({
            overlayBgColor: "#000",
            overlayOpacity: .8,
            fixedNavigation: false,
            imageLoading: "images/lightbox-ico-loading.gif",
            imageBtnPrev: "images/lightbox-btn-prev.gif",
            imageBtnNext: "images/lightbox-btn-next.gif",
            imageBtnClose: "images/lightbox-btn-close.gif",
            imageBlank: "images/lightbox-blank.gif",
            containerBorderSize: 10,
            containerResizeSpeed: 400,
            txtImage: "Image",
            txtOf: "of",
            keyToClose: "c",
            keyToPrev: "p",
            keyToNext: "n",
            imageArray: [],
            activeImage: 0
        }, settings);
        var jQueryMatchedObj = this;
        function _initialize() {
            _start(this, jQueryMatchedObj);
            return false;
        }
        function _start(objClicked, jQueryMatchedObj) {
            $("embed, object, select").css({
                visibility: "hidden"
            });
            _set_interface();
            settings.imageArray.length = 0;
            settings.activeImage = 0;
            if (jQueryMatchedObj.length == 1) {
                settings.imageArray.push(new Array(objClicked.getAttribute("href"), objClicked.getAttribute("title")));
            } else {
                for (var i = 0; i < jQueryMatchedObj.length; i++) {
                    settings.imageArray.push(new Array(jQueryMatchedObj[i].getAttribute("href"), jQueryMatchedObj[i].getAttribute("title")));
                }
            }
            while (settings.imageArray[settings.activeImage][0] != objClicked.getAttribute("href")) {
                settings.activeImage++;
            }
            _set_image_to_view();
        }
        function _set_interface() {
            $("body").append('<div id="jquery-overlay"></div><div id="jquery-lightbox"><div id="lightbox-container-image-box"><div id="lightbox-container-image"><img id="lightbox-image"><div style="" id="lightbox-nav"><a href="#" id="lightbox-nav-btnPrev"></a><a href="#" id="lightbox-nav-btnNext"></a></div><div id="lightbox-loading"><a href="#" id="lightbox-loading-link"><img src="' + settings.imageLoading + '"></a></div></div></div><div id="lightbox-container-image-data-box"><div id="lightbox-container-image-data"><div id="lightbox-image-details"><span id="lightbox-image-details-caption"></span><span id="lightbox-image-details-currentNumber"></span></div><div id="lightbox-secNav"><a href="#" id="lightbox-secNav-btnClose"><img src="' + settings.imageBtnClose + '"></a></div></div></div></div>');
            var arrPageSizes = ___getPageSize();
            $("#jquery-overlay").css({
                backgroundColor: settings.overlayBgColor,
                opacity: settings.overlayOpacity,
                width: arrPageSizes[0],
                height: arrPageSizes[1]
            }).fadeIn();
            var arrPageScroll = ___getPageScroll();
            $("#jquery-lightbox").css({
                top: arrPageScroll[1] + arrPageSizes[3] / 10,
                left: arrPageScroll[0]
            }).show();
            $("#jquery-overlay,#jquery-lightbox").click(function() {
                _finish();
            });
            $("#lightbox-loading-link,#lightbox-secNav-btnClose").click(function() {
                _finish();
                return false;
            });
            $(window).resize(function() {
                var arrPageSizes = ___getPageSize();
                $("#jquery-overlay").css({
                    width: arrPageSizes[0],
                    height: arrPageSizes[1]
                });
                var arrPageScroll = ___getPageScroll();
                $("#jquery-lightbox").css({
                    top: arrPageScroll[1] + arrPageSizes[3] / 10,
                    left: arrPageScroll[0]
                });
            });
        }
        function _set_image_to_view() {
            $("#lightbox-loading").show();
            if (settings.fixedNavigation) {
                $("#lightbox-image,#lightbox-container-image-data-box,#lightbox-image-details-currentNumber").hide();
            } else {
                $("#lightbox-image,#lightbox-nav,#lightbox-nav-btnPrev,#lightbox-nav-btnNext,#lightbox-container-image-data-box,#lightbox-image-details-currentNumber").hide();
            }
            var objImagePreloader = new Image();
            objImagePreloader.onload = function() {
                $("#lightbox-image").attr("src", settings.imageArray[settings.activeImage][0]);
                _resize_container_image_box(objImagePreloader.width, objImagePreloader.height);
                objImagePreloader.onload = function() {};
            };
            objImagePreloader.src = settings.imageArray[settings.activeImage][0];
        }
        function _resize_container_image_box(intImageWidth, intImageHeight) {
            var intCurrentWidth = $("#lightbox-container-image-box").width();
            var intCurrentHeight = $("#lightbox-container-image-box").height();
            var intWidth = intImageWidth + settings.containerBorderSize * 2;
            var intHeight = intImageHeight + settings.containerBorderSize * 2;
            var intDiffW = intCurrentWidth - intWidth;
            var intDiffH = intCurrentHeight - intHeight;
            $("#lightbox-container-image-box").animate({
                width: intWidth,
                height: intHeight
            }, settings.containerResizeSpeed, function() {
                _show_image();
            });
            if (intDiffW == 0 && intDiffH == 0) {
                var uA = navigator.userAgent.toLowerCase();
                if (uA.indexOf("msie") != -1) {
                    ___pause(250);
                } else {
                    ___pause(100);
                }
            }
            $("#lightbox-container-image-data-box").css({
                width: intImageWidth
            });
            $("#lightbox-nav-btnPrev,#lightbox-nav-btnNext").css({
                height: intImageHeight + settings.containerBorderSize * 2
            });
        }
        function _show_image() {
            $("#lightbox-loading").hide();
            $("#lightbox-image").fadeIn(function() {
                _show_image_data();
                _set_navigation();
            });
            _preload_neighbor_images();
        }
        function _show_image_data() {
            $("#lightbox-container-image-data-box").slideDown("fast");
            $("#lightbox-image-details-caption").hide();
            if (settings.imageArray[settings.activeImage][1]) {
                $("#lightbox-image-details-caption").html(settings.imageArray[settings.activeImage][1]).show();
            }
            if (settings.imageArray.length > 1) {
                $("#lightbox-image-details-currentNumber").html(settings.txtImage + " " + (settings.activeImage + 1) + " " + settings.txtOf + " " + settings.imageArray.length).show();
            }
        }
        function _set_navigation() {
            $("#lightbox-nav").show();
            $("#lightbox-nav-btnPrev,#lightbox-nav-btnNext").css({
                background: "transparent url(" + settings.imageBlank + ") no-repeat"
            });
            if (settings.activeImage != 0) {
                if (settings.fixedNavigation) {
                    $("#lightbox-nav-btnPrev").css({
                        background: "url(" + settings.imageBtnPrev + ") left 15% no-repeat"
                    }).unbind().bind("click", function() {
                        settings.activeImage = settings.activeImage - 1;
                        _set_image_to_view();
                        return false;
                    });
                } else {
                    $("#lightbox-nav-btnPrev").unbind().hover(function() {
                        $(this).css({
                            background: "url(" + settings.imageBtnPrev + ") left 15% no-repeat"
                        });
                    }, function() {
                        $(this).css({
                            background: "transparent url(" + settings.imageBlank + ") no-repeat"
                        });
                    }).show().bind("click", function() {
                        settings.activeImage = settings.activeImage - 1;
                        _set_image_to_view();
                        return false;
                    });
                }
            }
            if (settings.activeImage != settings.imageArray.length - 1) {
                if (settings.fixedNavigation) {
                    $("#lightbox-nav-btnNext").css({
                        background: "url(" + settings.imageBtnNext + ") right 15% no-repeat"
                    }).unbind().bind("click", function() {
                        settings.activeImage = settings.activeImage + 1;
                        _set_image_to_view();
                        return false;
                    });
                } else {
                    $("#lightbox-nav-btnNext").unbind().hover(function() {
                        $(this).css({
                            background: "url(" + settings.imageBtnNext + ") right 15% no-repeat"
                        });
                    }, function() {
                        $(this).css({
                            background: "transparent url(" + settings.imageBlank + ") no-repeat"
                        });
                    }).show().bind("click", function() {
                        settings.activeImage = settings.activeImage + 1;
                        _set_image_to_view();
                        return false;
                    });
                }
            }
            _enable_keyboard_navigation();
        }
        function _enable_keyboard_navigation() {
            $(document).keydown(function(objEvent) {
                _keyboard_action(objEvent);
            });
        }
        function _disable_keyboard_navigation() {
            $(document).unbind();
        }
        function _keyboard_action(objEvent) {
            if (objEvent == null) {
                keycode = event.keyCode;
                escapeKey = 27;
            } else {
                keycode = objEvent.keyCode;
                escapeKey = objEvent.DOM_VK_ESCAPE;
            }
            key = String.fromCharCode(keycode).toLowerCase();
            if (key == settings.keyToClose || key == "x" || keycode == escapeKey) {
                _finish();
            }
            if (key == settings.keyToPrev || keycode == 37) {
                if (settings.activeImage != 0) {
                    settings.activeImage = settings.activeImage - 1;
                    _set_image_to_view();
                    _disable_keyboard_navigation();
                }
            }
            if (key == settings.keyToNext || keycode == 39) {
                if (settings.activeImage != settings.imageArray.length - 1) {
                    settings.activeImage = settings.activeImage + 1;
                    _set_image_to_view();
                    _disable_keyboard_navigation();
                }
            }
        }
        function _preload_neighbor_images() {
            if (settings.imageArray.length - 1 > settings.activeImage) {
                objNext = new Image();
                objNext.src = settings.imageArray[settings.activeImage + 1][0];
            }
            if (settings.activeImage > 0) {
                objPrev = new Image();
                objPrev.src = settings.imageArray[settings.activeImage - 1][0];
            }
        }
        function _finish() {
            $("#jquery-lightbox").remove();
            $("#jquery-overlay").fadeOut(function() {
                $("#jquery-overlay").remove();
            });
            $("embed, object, select").css({
                visibility: "visible"
            });
        }
        function ___getPageSize() {
            var xScroll, yScroll;
            if (window.innerHeight && window.scrollMaxY) {
                xScroll = window.innerWidth + window.scrollMaxX;
                yScroll = window.innerHeight + window.scrollMaxY;
            } else if (document.body.scrollHeight > document.body.offsetHeight) {
                xScroll = document.body.scrollWidth;
                yScroll = document.body.scrollHeight;
            } else {
                xScroll = document.body.offsetWidth;
                yScroll = document.body.offsetHeight;
            }
            var windowWidth, windowHeight;
            if (self.innerHeight) {
                if (document.documentElement.clientWidth) {
                    windowWidth = document.documentElement.clientWidth;
                } else {
                    windowWidth = self.innerWidth;
                }
                windowHeight = self.innerHeight;
            } else if (document.documentElement && document.documentElement.clientHeight) {
                windowWidth = document.documentElement.clientWidth;
                windowHeight = document.documentElement.clientHeight;
            } else if (document.body) {
                windowWidth = document.body.clientWidth;
                windowHeight = document.body.clientHeight;
            }
            if (yScroll < windowHeight) {
                pageHeight = windowHeight;
            } else {
                pageHeight = yScroll;
            }
            if (xScroll < windowWidth) {
                pageWidth = xScroll;
            } else {
                pageWidth = windowWidth;
            }
            arrayPageSize = new Array(pageWidth, pageHeight, windowWidth, windowHeight);
            return arrayPageSize;
        }
        function ___getPageScroll() {
            var xScroll, yScroll;
            if (self.pageYOffset) {
                yScroll = self.pageYOffset;
                xScroll = self.pageXOffset;
            } else if (document.documentElement && document.documentElement.scrollTop) {
                yScroll = document.documentElement.scrollTop;
                xScroll = document.documentElement.scrollLeft;
            } else if (document.body) {
                yScroll = document.body.scrollTop;
                xScroll = document.body.scrollLeft;
            }
            arrayPageScroll = new Array(xScroll, yScroll);
            return arrayPageScroll;
        }
        function ___pause(ms) {
            var date = new Date();
            curDate = null;
            do {
                var curDate = new Date();
            } while (curDate - date < ms);
        }
        return this.unbind("click").click(_initialize);
    };
})(jQuery);

$("document").ready(function() {
    $("a[rel='lightbox']").lightBox();
});

var form = "checkme";

function SetChecked(val, chkName) {
    dml = document.forms[form];
    len = dml.elements.length;
    var i = 0;
    for (i = 0; i < len; i++) {
        if (dml.elements[i].name == chkName) {
            dml.elements[i].checked = val;
        }
    }
}

jQuery.fn.trilemma = function(options) {
    var options = options || {};
    var cbfs = this;
    var cbs = this.find("input:checkbox");
    var maxnum = options.max ? options.max : 2;
    cbs.each(function() {
        $(this).bind("click", function() {
            if ($(this).is(":checked")) {
                if (cbs.filter(":checked").length == maxnum) {
                    cbs.not(":checked").each(function() {
                        $(this).attr("disabled", "true");
                        if (options.disablelabels) {
                            var thisid = $(this).attr("id");
                            $('label[for="' + thisid + '"]').addClass("disabled");
                        }
                    });
                }
            } else {
                cbs.removeAttr("disabled");
                if (options.disablelabels) {
                    cbfs.find("label.disabled").removeClass("disabled");
                }
            }
        });
    });
    return this;
};

$(function() {
    $(".poll_select").trilemma({
        max: " . $multi_options . ",
        disablelabels: true
    });
});

$(document).ready(function() {
    $("#tool_open").click(function() {
        $("#tools").slideToggle("slow", function() {});
    });
    $("#toggle_voters").click(function() {
        $("#voters").slideToggle("slow", function() {});
    });
    $("#toggle_voters").click(function() {
        $("#voters").slideToggle("slow", function() {});
    });
});

$("#pm_open").click(function() {
    $("#pm").slideToggle("slow", function() {});
});

(function($) {
    $.fn.markItUp = function(settings, extraSettings) {
        var method, params, options, ctrlKey, shiftKey, altKey;
        ctrlKey = shiftKey = altKey = false;
        var initHeight = $(".emos").outerHeight();
        if (typeof settings == "string") {
            method = settings;
            params = extraSettings;
        }
        options = {
            id: "",
            nameSpace: "",
            root: "",
            previewHandler: false,
            previewInWindow: "",
            previewInElement: "",
            previewAutoRefresh: true,
            previewPosition: "after",
            previewTemplatePath: "~/templates/preview.html",
            previewParser: false,
            previewParserPath: "",
            previewParserVar: "data",
            previewParserAjaxType: "POST",
            resizeHandle: true,
            beforeInsert: "",
            afterInsert: "",
            onEnter: {},
            onShiftEnter: {},
            onCtrlEnter: {},
            onTab: {},
            markupSet: [ {} ]
        };
        $.extend(options, settings, extraSettings);
        if (!options.root) {
            $("script").each(function(a, tag) {
                miuScript = $(tag).get(0).src.match(/(.*)jquery\.markitup(\.pack)?\.js$/);
                if (miuScript !== null) {
                    options.root = miuScript[1];
                }
            });
        }
        var uaMatch = function(ua) {
            ua = ua.toLowerCase();
            var match = /(chrome)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
            return {
                browser: match[1] || "",
                version: match[2] || "0"
            };
        };
        var matched = uaMatch(navigator.userAgent);
        var browser = {};
        if (matched.browser) {
            browser[matched.browser] = true;
            browser.version = matched.version;
        }
        if (browser.chrome) {
            browser.webkit = true;
        } else if (browser.webkit) {
            browser.safari = true;
        }
        return this.each(function() {
            var $$, textarea, levels, scrollPosition, caretPosition, caretOffset, clicked, hash, header, footer, previewWindow, template, iFrame, abort;
            $$ = $(this);
            textarea = this;
            levels = [];
            abort = false;
            scrollPosition = caretPosition = 0;
            caretOffset = -1;
            options.previewParserPath = localize(options.previewParserPath);
            options.previewTemplatePath = localize(options.previewTemplatePath);
            if (method) {
                switch (method) {
                  case "remove":
                    remove();
                    break;

                  case "insert":
                    markup(params);
                    break;

                  default:
                    $.error("Method " + method + " does not exist on jQuery.markItUp");
                }
                return;
            }
            function localize(data, inText) {
                if (inText) {
                    return data.replace(/("|')~\//g, "$1" + options.root);
                }
                return data.replace(/^~\//, options.root);
            }
            function init() {
                id = "";
                nameSpace = "";
                if (options.id) {
                    id = 'id="' + options.id + '"';
                } else if ($$.attr("id")) {
                    id = 'id="markItUp' + $$.attr("id").substr(0, 1).toUpperCase() + $$.attr("id").substr(1) + '"';
                }
                if (options.nameSpace) {
                    nameSpace = 'div="' + options.nameSpace + '" class="' + options.nameSpace + '"';
                }
                $$.wrap("<div " + nameSpace + "></div>");
                $$.wrap("<div " + id + ' class="markItUp"></div>');
                $$.wrap('<div class="markItUpContainer"></div>');
                $$.addClass("markItUpEditor");
                header = $('<div class="markItUpHeader"></div>').insertBefore($$);
                $(dropMenus(options.markupSet)).appendTo(header);
                footer = $('<div class="markItUpFooter"></div>').insertAfter($$);
                if (options.resizeHandle === true && browser.safari !== true) {
                    resizeHandle = $('<div class="markItUpResizeHandle"></div>').insertAfter($$).bind("mousedown.markItUp", function(e) {
                        var h = $$.height(), y = e.clientY, mouseMove, mouseUp;
                        mouseMove = function(e) {
                            $$.css("height", Math.max(20, e.clientY + h - y) + "px");
                            return false;
                        };
                        mouseUp = function(e) {
                            $("html").unbind("mousemove.markItUp", mouseMove).unbind("mouseup.markItUp", mouseUp);
                            return false;
                        };
                        $("html").bind("mousemove.markItUp", mouseMove).bind("mouseup.markItUp", mouseUp);
                    });
                    footer.append(resizeHandle);
                }
                $$.bind("keydown.markItUp", keyPressed).bind("keyup", keyPressed);
                $$.bind("insertion.markItUp", function(e, settings) {
                    if (settings.target !== false) {
                        get();
                    }
                    if (textarea === $.markItUp.focused) {
                        markup(settings);
                    }
                });
                $$.bind("focus.markItUp", function() {
                    $.markItUp.focused = this;
                });
                if (options.previewInElement) {
                    refreshPreview();
                }
            }
            function dropMenus(markupSet) {
                var ul = $("<ul></ul>"), i = 0;
                $("li:hover > ul", ul).css("display", "block");
                $.each(markupSet, function() {
                    var button = this, t = "", title, li, j;
                    button.title ? title = button.key ? (button.title || "") + " [Ctrl+" + button.key + "]" : button.title || "" : title = button.key ? (button.name || "") + " [Ctrl+" + button.key + "]" : button.name || "";
                    key = button.key ? 'accesskey="' + button.key + '"' : "";
                    if (button.separator) {
                        li = $('<li class="markItUpSeparator">' + (button.separator || "") + "</li>").appendTo(ul);
                    } else {
                        i++;
                        for (j = levels.length - 1; j >= 0; j--) {
                            t += levels[j] + "-";
                        }
                        li = $('<li class="markItUpButton markItUpButton' + t + i + " " + (button.className || "") + '" title="' + title + '"><a href="#" ' + key + ">" + (button.name || "") + "</a></li>").bind("contextmenu.markItUp", function() {
                            return false;
                        }).bind("click.markItUp", function(e) {
                            e.preventDefault();
                        }).bind("focusin.markItUp", function() {
                            $$.focus();
                        }).bind("mouseup", function(e) {
                            if (button.call) {
                                eval(button.call)(e);
                            }
                            setTimeout(function() {
                                markup(button);
                            }, 1);
                            return false;
                        }).bind("mouseenter.markItUp", function() {
                            $("> ul", this).show();
                            $(document).one("click", function() {
                                $("ul ul", header).hide();
                            });
                        }).bind("mouseleave.markItUp", function() {
                            $("> ul", this).hide();
                        }).appendTo(ul);
                        if (button.dropMenu) {
                            levels.push(i);
                            $(li).addClass("markItUpDropMenu").append(dropMenus(button.dropMenu));
                        }
                    }
                });
                levels.pop();
                return ul;
            }
            function magicMarkups(string) {
                if (string) {
                    string = string.toString();
                    string = string.replace(/\(\!\(([\s\S]*?)\)\!\)/g, function(x, a) {
                        var b = a.split("|!|");
                        if (altKey === true) {
                            return b[1] !== undefined ? b[1] : b[0];
                        } else {
                            return b[1] === undefined ? "" : b[0];
                        }
                    });
                    string = string.replace(/\[\!\[([\s\S]*?)\]\!\]/g, function(x, a) {
                        var b = a.split(":!:");
                        if (abort === true) {
                            return false;
                        }
                        value = prompt(b[0], b[1] ? b[1] : "");
                        if (value === null) {
                            abort = true;
                        }
                        return value;
                    });
                    return string;
                }
                return "";
            }
            function prepare(action) {
                if ($.isFunction(action)) {
                    action = action(hash);
                }
                return magicMarkups(action);
            }
            function build(string) {
                var openWith = prepare(clicked.openWith);
                var placeHolder = prepare(clicked.placeHolder);
                var replaceWith = prepare(clicked.replaceWith);
                var closeWith = prepare(clicked.closeWith);
                var openBlockWith = prepare(clicked.openBlockWith);
                var closeBlockWith = prepare(clicked.closeBlockWith);
                var multiline = clicked.multiline;
                if (replaceWith !== "") {
                    block = openWith + replaceWith + closeWith;
                } else if (selection === "" && placeHolder !== "") {
                    block = openWith + placeHolder + closeWith;
                } else {
                    string = string || selection;
                    var lines = [ string ], blocks = [];
                    if (multiline === true) {
                        lines = string.split(/\r?\n/);
                    }
                    for (var l = 0; l < lines.length; l++) {
                        line = lines[l];
                        var trailingSpaces;
                        if (trailingSpaces = line.match(/ *$/)) {
                            blocks.push(openWith + line.replace(/ *$/g, "") + closeWith + trailingSpaces);
                        } else {
                            blocks.push(openWith + line + closeWith);
                        }
                    }
                    block = blocks.join("\n");
                }
                block = openBlockWith + block + closeBlockWith;
                return {
                    block: block,
                    openBlockWith: openBlockWith,
                    openWith: openWith,
                    replaceWith: replaceWith,
                    placeHolder: placeHolder,
                    closeWith: closeWith,
                    closeBlockWith: closeBlockWith
                };
            }
            function markup(button) {
                var len, j, n, i;
                hash = clicked = button;
                get();
                $.extend(hash, {
                    line: "",
                    root: options.root,
                    textarea: textarea,
                    selection: selection || "",
                    caretPosition: caretPosition,
                    ctrlKey: ctrlKey,
                    shiftKey: shiftKey,
                    altKey: altKey
                });
                prepare(options.beforeInsert);
                prepare(clicked.beforeInsert);
                if (ctrlKey === true && shiftKey === true || button.multiline === true) {
                    prepare(clicked.beforeMultiInsert);
                }
                $.extend(hash, {
                    line: 1
                });
                if (ctrlKey === true && shiftKey === true) {
                    lines = selection.split(/\r?\n/);
                    for (j = 0, n = lines.length, i = 0; i < n; i++) {
                        if ($.trim(lines[i]) !== "") {
                            $.extend(hash, {
                                line: ++j,
                                selection: lines[i]
                            });
                            lines[i] = build(lines[i]).block;
                        } else {
                            lines[i] = "";
                        }
                    }
                    string = {
                        block: lines.join("\n")
                    };
                    start = caretPosition;
                    len = string.block.length + (browser.opera ? n - 1 : 0);
                } else if (ctrlKey === true) {
                    string = build(selection);
                    start = caretPosition + string.openWith.length;
                    len = string.block.length - string.openWith.length - string.closeWith.length;
                    len = len - (string.block.match(/ $/) ? 1 : 0);
                    len -= fixIeBug(string.block);
                } else if (shiftKey === true) {
                    string = build(selection);
                    start = caretPosition;
                    len = string.block.length;
                    len -= fixIeBug(string.block);
                } else {
                    string = build(selection);
                    start = caretPosition + string.block.length;
                    len = 0;
                    start -= fixIeBug(string.block);
                }
                if (selection === "" && string.replaceWith === "") {
                    caretOffset += fixOperaBug(string.block);
                    start = caretPosition + string.openBlockWith.length + string.openWith.length;
                    len = string.block.length - string.openBlockWith.length - string.openWith.length - string.closeWith.length - string.closeBlockWith.length;
                    caretOffset = $$.val().substring(caretPosition, $$.val().length).length;
                    caretOffset -= fixOperaBug($$.val().substring(0, caretPosition));
                }
                $.extend(hash, {
                    caretPosition: caretPosition,
                    scrollPosition: scrollPosition
                });
                if (string.block !== selection && abort === false) {
                    insert(string.block);
                    set(start, len);
                } else {
                    caretOffset = -1;
                }
                get();
                $.extend(hash, {
                    line: "",
                    selection: selection
                });
                if (ctrlKey === true && shiftKey === true || button.multiline === true) {
                    prepare(clicked.afterMultiInsert);
                }
                prepare(clicked.afterInsert);
                prepare(options.afterInsert);
                if (previewWindow && options.previewAutoRefresh) {
                    refreshPreview();
                }
                shiftKey = altKey = ctrlKey = abort = false;
            }
            function fixOperaBug(string) {
                if (browser.opera) {
                    return string.length - string.replace(/\n*/g, "").length;
                }
                return 0;
            }
            function fixIeBug(string) {
                if (browser.msie) {
                    return string.length - string.replace(/\r*/g, "").length;
                }
                return 0;
            }
            function insert(block) {
                if (document.selection) {
                    var newSelection = document.selection.createRange();
                    newSelection.text = block;
                } else {
                    textarea.value = textarea.value.substring(0, caretPosition) + block + textarea.value.substring(caretPosition + selection.length, textarea.value.length);
                }
            }
            function set(start, len) {
                if (textarea.createTextRange) {
                    if (browser.opera && browser.version >= 9.5 && len == 0) {
                        return false;
                    }
                    range = textarea.createTextRange();
                    range.collapse(true);
                    range.moveStart("character", start);
                    range.moveEnd("character", len);
                    range.select();
                } else if (textarea.setSelectionRange) {
                    textarea.setSelectionRange(start, start + len);
                }
                textarea.scrollTop = scrollPosition;
                textarea.focus();
            }
            function get() {
                textarea.focus();
                scrollPosition = textarea.scrollTop;
                if (document.selection) {
                    selection = document.selection.createRange().text;
                    if (browser.msie) {
                        var range = document.selection.createRange(), rangeCopy = range.duplicate();
                        rangeCopy.moveToElementText(textarea);
                        caretPosition = -1;
                        while (rangeCopy.inRange(range)) {
                            rangeCopy.moveStart("character");
                            caretPosition++;
                        }
                    } else {
                        caretPosition = textarea.selectionStart;
                    }
                } else {
                    caretPosition = textarea.selectionStart;
                    selection = textarea.value.substring(caretPosition, textarea.selectionEnd);
                }
                return selection;
            }
            function preview() {
                if (typeof options.previewHandler === "function") {
                    console.log("options");
                    previewWindow = true;
                } else if (options.previewInElement) {
                    previewWindow = $(options.previewInElement);
                    var parent = $("#" + options.previewInElement).parent().parent().attr("id");
                    if ($("#" + parent).is(":visible")) {
                        console.log("visible");
                        $("#" + parent).slideToggle(1e3);
                        $(".emos").css({
                            "margin-top": ""
                        });
                        $(".scroll").animate({
                            height: 339
                        }, 1e3);
                        $(".emos").animate({
                            height: initHeight
                        }, 1e3);
                    } else {
                        console.log("not visible");
                        $("#" + parent).slideToggle(1e3);
                        $(".emos").css("margin-top", "5px");
                        $(".emos").animate({
                            height: 713
                        }, 1e3);
                        $(".scroll").animate({
                            height: 664
                        }, 1e3);
                    }
                } else if (!previewWindow || previewWindow.closed) {
                    console.log("closed");
                    if (options.previewInWindow) {
                        previewWindow = window.open("", "preview", options.previewInWindow);
                        $(window).unload(function() {
                            previewWindow.close();
                        });
                    } else {
                        iFrame = $('<iframe class="markItUpPreviewFrame"></iframe>');
                        if (options.previewPosition == "after") {
                            iFrame.insertAfter(footer);
                        } else {
                            iFrame.insertBefore(header);
                        }
                        previewWindow = iFrame[iFrame.length - 1].contentWindow || frame[iFrame.length - 1];
                    }
                } else if (altKey === true) {
                    if (iFrame) {
                        iFrame.remove();
                    } else {
                        previewWindow.close();
                    }
                    previewWindow = iFrame = false;
                }
                if (!options.previewAutoRefresh) {
                    refreshPreview();
                }
                if (options.previewInWindow) {
                    previewWindow.focus();
                }
            }
            function refreshPreview() {
                renderPreview();
            }
            function renderPreview() {
                var phtml;
                var parsedData = $$.val();
                if (options.previewParser && typeof options.previewParser === "function") {
                    parsedData = options.previewParser(parsedData);
                }
                if (options.previewHandler && typeof options.previewHandler === "function") {
                    options.previewHandler(parsedData);
                } else if (options.previewParserPath !== "") {
                    $.ajax({
                        type: options.previewParserAjaxType,
                        dataType: "text",
                        global: false,
                        url: options.previewParserPath,
                        data: options.previewParserVar + "=" + encodeURIComponent(parsedData),
                        success: function(data) {
                            writeInPreview(localize(data, 1));
                        }
                    });
                } else {
                    if (!template) {
                        $.ajax({
                            url: options.previewTemplatePath,
                            dataType: "text",
                            global: false,
                            success: function(data) {
                                writeInPreview(localize(data, 1).replace(/<!-- content -->/g, parsedData));
                            }
                        });
                    }
                }
                return false;
            }
            function writeInPreview(data) {
                if (options.previewInElement) {
                    $("#" + options.previewInElement).html(data);
                } else if (previewWindow && previewWindow.document) {
                    try {
                        sp = previewWindow.document.documentElement.scrollTop;
                    } catch (e) {
                        sp = 0;
                    }
                    previewWindow.document.open();
                    previewWindow.document.write(data);
                    previewWindow.document.close();
                    previewWindow.document.documentElement.scrollTop = sp;
                }
            }
            function keyPressed(e) {
                shiftKey = e.shiftKey;
                altKey = e.altKey;
                ctrlKey = !(e.altKey && e.ctrlKey) ? e.ctrlKey || e.metaKey : false;
                if (e.type === "keydown") {
                    if (ctrlKey === true) {
                        li = $('a[accesskey="' + (e.keyCode == 13 ? "\\n" : String.fromCharCode(e.keyCode)) + '"]', header).parent("li");
                        if (li.length !== 0) {
                            ctrlKey = false;
                            setTimeout(function() {
                                li.triggerHandler("mouseup");
                            }, 1);
                            return false;
                        }
                    }
                    if (e.keyCode === 13 || e.keyCode === 10) {
                        if (ctrlKey === true) {
                            ctrlKey = false;
                            markup(options.onCtrlEnter);
                            return options.onCtrlEnter.keepDefault;
                        } else if (shiftKey === true) {
                            shiftKey = false;
                            markup(options.onShiftEnter);
                            return options.onShiftEnter.keepDefault;
                        } else {
                            markup(options.onEnter);
                            return options.onEnter.keepDefault;
                        }
                    }
                    if (e.keyCode === 9) {
                        if (shiftKey == true || ctrlKey == true || altKey == true) {
                            return false;
                        }
                        if (caretOffset !== -1) {
                            get();
                            caretOffset = $$.val().length - caretOffset;
                            set(caretOffset, 0);
                            caretOffset = -1;
                            return false;
                        } else {
                            markup(options.onTab);
                            return options.onTab.keepDefault;
                        }
                    }
                }
            }
            function remove() {
                $$.unbind(".markItUp").removeClass("markItUpEditor");
                $$.parent("div").parent("div.markItUp").parent("div").replaceWith($$);
                var relativeRef = $$.parent("div").parent("div.markItUp").parent("div");
                if (relativeRef.length) {
                    relativeRef.replaceWith($$);
                }
                $$.data("markItUp", null);
            }
            init();
        });
    };
    $.fn.markItUpRemove = function() {
        return this.each(function() {
            $(this).markItUp("remove");
        });
    };
    $.markItUp = function(settings) {
        var options = {
            target: false
        };
        $.extend(options, settings);
        if (options.target) {
            return $(options.target).each(function() {
                $(this).focus();
                $(this).trigger("insertion", [ options ]);
            });
        } else {
            $("textarea").trigger("insertion", [ options ]);
        }
    };
})(jQuery);

var myBbcodeSettings = {
    nameSpace: "bbcode",
    previewParserPath: "./ajax/bbcode_parser.php",
    previewInElement: "preview-window",
    markupSet: [ {
        name: "Bold",
        key: "B",
        openWith: "[b]",
        closeWith: "[/b]"
    }, {
        name: "Italic",
        key: "I",
        openWith: "[i]",
        closeWith: "[/i]"
    }, {
        name: "Underline",
        key: "U",
        openWith: "[u]",
        closeWith: "[/u]"
    }, {
        name: "Strike through",
        key: "S",
        openWith: "[s]",
        closeWith: "[/s]"
    }, {
        separator: "---------------"
    }, {
        name: "Picture",
        key: "P",
        replaceWith: "[img][![Url]!][/img]"
    }, {
        name: "Link",
        key: "L",
        openWith: "[url=[![Url]!]]",
        closeWith: "[/url]",
        placeHolder: "Your text to link here..."
    }, {
        separator: "---------------"
    }, {
        name: "Colors",
        openWith: "[color=[![Color]!]]",
        closeWith: "[/color]",
        dropMenu: [ {
            name: "Yellow",
            openWith: "[color=yellow]",
            closeWith: "[/color]",
            className: "col1-1"
        }, {
            name: "Orange",
            openWith: "[color=orange]",
            closeWith: "[/color]",
            className: "col1-2"
        }, {
            name: "Red",
            openWith: "[color=red]",
            closeWith: "[/color]",
            className: "col1-3"
        }, {
            name: "Blue",
            openWith: "[color=blue]",
            closeWith: "[/color]",
            className: "col2-1"
        }, {
            name: "Purple",
            openWith: "[color=purple]",
            closeWith: "[/color]",
            className: "col2-2"
        }, {
            name: "Green",
            openWith: "[color=green]",
            closeWith: "[/color]",
            className: "col2-3"
        }, {
            name: "White",
            openWith: "[color=white]",
            closeWith: "[/color]",
            className: "col3-1"
        }, {
            name: "Gray",
            openWith: "[color=gray]",
            closeWith: "[/color]",
            className: "col3-2"
        }, {
            name: "Black",
            openWith: "[color=black]",
            closeWith: "[/color]",
            className: "col3-3"
        } ]
    }, {
        name: "Size",
        key: "S",
        openWith: "[size=[![Text size]!]]",
        closeWith: "[/size]",
        dropMenu: [ {
            name: "xx-large",
            openWith: "[size=7]",
            closeWith: "[/size]"
        }, {
            name: "x-large",
            openWith: "[size=6]",
            closeWith: "[/size]"
        }, {
            name: "large",
            openWith: "[size=5]",
            closeWith: "[/size]"
        }, {
            name: "medium",
            openWith: "[size=4]",
            closeWith: "[/size]"
        }, {
            name: "small",
            openWith: "[size=3]",
            closeWith: "[/size]"
        }, {
            name: "x-small",
            openWith: "[size=2]",
            closeWith: "[/size]"
        }, {
            name: "xx-small",
            openWith: "[size=1]",
            closeWith: "[/size]"
        } ]
    }, {
        separator: "---------------"
    }, {
        name: "Unordered list",
        openWith: "[list]\n",
        closeWith: "[/list]"
    }, {
        name: "Ordered list",
        openWith: "[list=[![Starting number]!]]\n",
        closeWith: "\n[/list]"
    }, {
        name: "List item",
        openWith: "[*] "
    }, {
        separator: "---------------"
    }, {
        name: "Align Left",
        openWith: "[left]",
        closeWith: "[/left]"
    }, {
        name: "Align Center",
        openWith: "[center]",
        closeWith: "[/center]"
    }, {
        name: "Align Right",
        openWith: "[right]",
        closeWith: "[/right]"
    }, {
        separator: "---------------"
    }, {
        name: "Quotes",
        key: "Q",
        openWith: "[quote]",
        closeWith: "[/quote]"
    }, {
        name: "Code",
        key: "K",
        openWith: "[code]",
        closeWith: "[/code]"
    }, {
        separator: "---------------"
    }, {
        name: "Table generator\n+alt key for th",
        className: "tablegenerator",
        placeholder: "Your text here...",
        replaceWith: function(h) {
            var cols = prompt("How many cols?"), rows = prompt("How many rows?"), html = "[table]\n";
            for (var c = 0; c < cols; c++) {
                html += "\t[th] [![TH" + (c + 1) + "text:]!][/th]\n";
            }
            for (var r = 0; r < rows; r++) {
                html += "\t[tr]\n";
                for (var c = 0; c < cols; c++) {
                    html += "\t\t[td]" + (h.placeholder || "") + "[/td]\n";
                }
                html += "\t[/tr]\n";
            }
            html += "[/table]\n";
            return html;
        }
    }, {
        separator: "---------------"
    }, {
        name: "Clean",
        className: "clean",
        replaceWith: function(h) {
            return h.selection.replace(/\[(.*?)\]/g, "");
        }
    }, {
        name: "Preview",
        key: "!",
        className: "preview",
        call: "preview"
    } ]
};

$(document).ready(function() {
    $("#box_1").hide();
    $("#box_2").hide();
    $("#box_3").hide();
    $("#box_4").hide();
    $("#box_1").fadeIn("slow");
    $("a#smilies").click(function() {
        $("#box_1").show("slow");
        $("#box_2").hide();
        $("#box_3").hide();
        $("#box_4").hide();
    });
    $("a#custom").click(function() {
        $("#box_1").hide();
        $("#box_2").show("slow");
        $("#box_3").hide();
        $("#box_4").hide();
    });
    $("a#staff").click(function() {
        $("#box_1").hide();
        $("#box_2").hide();
        $("#box_3").show("slow");
        $("#box_4").hide();
    });
    $("#bbcode").markItUp(myBbcodeSettings);
    $(".emoticons a").click(function() {
        emoticon = $(this).attr("title");
        $.markItUp({
            openWith: emoticon
        });
        return false;
    });
    $("#tool_open").click(function() {
        $("#tools").slideToggle("slow", function() {});
        $("#tool_open").hide();
        $("#tool_close").show();
    });
    $("#tool_close").click(function() {
        $("#tools").slideToggle("slow", function() {});
        $("#tool_close").hide();
        $("#tool_open").show();
    });
    $("#more").click(function() {
        $("#attach_more").slideToggle("slow", function() {});
    });
});